<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Some Database Notes</title>
      <link href="/2022/10/01/Database-Cheatsheet/"/>
      <url>/2022/10/01/Database-Cheatsheet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>How deep one understands database indicates how fast one can debug and in general, how good one is at full-stack development… Says Michael Ball, my Software Engineering professor (My Database professor didn’t say something like this though).</p><span id="more"></span><p>Here are things to remember for database design and implementation - i.e. How to develop systems to efficiently manage, maintain, process, query, transact with, and make sense of data.</p><h2 id="SQL-Client"><a href="#SQL-Client" class="headerlink" title="SQL Client"></a>SQL Client</h2><h3 id="SQL-Background"><a href="#SQL-Background" class="headerlink" title="SQL Background"></a>SQL Background</h3><ul><li><p>SQL Roots</p><ul><li>Developed @IBM Research in the 1970s (System R project)</li><li>Berkeley’s Quel language (Ingres)</li><li>Commercialized/Popularized in the 1980s</li><li>IBM started the db2 product line</li><li>IBM beaten to market by a startup called Oracle</li></ul></li><li><p>SQL is questioned repeatedly</p><ul><li>90’s: Object-Oriented DBMS (OQL, etc.)</li><li>2000’s: XML (Xquery, Xpath, XSLT)</li><li>2010’s: NoSQL &amp; MapReduce</li><li>Not the only language to query relations, but SQL keeps re-emerging as the standard</li></ul></li></ul><h3 id="Relational-Model"><a href="#Relational-Model" class="headerlink" title="Relational Model"></a>Relational Model</h3><ul><li>(Relational) Database: set of named relations.</li><li>Relation(Table): Schema, Instance, Attribute (Column, Field), Tuple (Record, Row), Cardinality (# of tuples)</li><li>Property of relations:<ul><li>Tuples are not ordered.</li><li>First Normal Form (Flat): only primitive types as attributes. No nested attributes. No arrays, no structs, no unions.<ul><li>Split into another relation if need to include nested relation.</li></ul></li><li>Multiset: may have duplicate tuples</li><li>Physical data independence: does not prescribe how they are implemented or stored</li></ul></li><li>Important realization: relation is but one of many data strcuture/data models. Graph is another such model.</li></ul><h3 id="General-SQL-Syntax"><a href="#General-SQL-Syntax" class="headerlink" title="General SQL Syntax"></a>General SQL Syntax</h3><ul><li><p>Overview</p><ul><li>Declarative: specify what to do, not how to do it (DBMS figures out a fast way to execute a query, regardless of how it is written)</li><li>Implemented widely with various optimizations, additional features and extensions</li><li>Not targeted at Turing-complete tasks</li></ul></li><li><p>DDl: Data Definition Language (Define and modify schema)</p><ul><li><code>CREATE TABLE Users (uid INTEGER, wid INTEGER, age FLOAT, name VARCHAR(255), PRIMARY KEY (uid), FOREIGN KEY (wid) REFERENCES Websites(wid))</code><ul><li>Primary key can be made up of multiple attributes (<code>(firstname, lastname)</code>)</li><li>Foreign key is a contraint that links a column in one table (<code>Users(uid)</code>) to a column in a different table (<code>Websites(uid)</code>) and ensures that a value can be added to <code>Users</code>‘ <code>uid</code> column only if the same value already exists in <code>Websites</code>‘ <code>uid</code> column.</li></ul></li><li>DROP TABLE</li><li>ALTER TABLE</li><li><code>CREATE VIEW &lt;view_name&gt; AS &lt;select_statement&gt;</code>. Views are not materialized (they can be, though); these are for convenience (and security). Views are used just like tables.</li><li>(CTE) <code>WITH &lt;view_name&gt;(&lt;column expression&gt;) AS (&lt;select_statement&gt;)</code>. With clause is used to define a view that can be used in the same query (it can be directly followed by a <code>SELECT</code> statement). CTEs are materialized.</li></ul></li><li><p>DML: Data Manipulation Language (Read and write data)</p><ul><li><p>Single-table queries</p><ul><li><p>Syntax:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Comments are prefixed with '--' or enclosed in '/* ... */'</span><span class="token keyword">SELECT</span> <span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token keyword">column</span> expression list<span class="token operator">></span> <span class="token comment">-- separate by comma, can be '*'</span>  <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>single <span class="token keyword">table</span><span class="token operator">></span>  <span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>predicate<span class="token operator">></span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span><span class="token keyword">column</span> list<span class="token operator">></span> <span class="token comment">-- separate by comma</span>  <span class="token punctuation">[</span><span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>predicate<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span><span class="token keyword">column</span> list<span class="token operator">></span><span class="token punctuation">]</span> <span class="token comment">-- separate by comma, can append DESC or ASC (ASC by default)</span>  <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token operator">&lt;</span><span class="token keyword">integer</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p>Order:</p><ul><li>FROM</li><li>WHERE (no aggregate allowed! Groups have not been formed yet.)</li><li>GROUP BY: form groups and perform all necessary aggregates per group (only aggregate functions referred by in <code>SELECT</code> or <code>HAVING</code> are necessary)</li><li>HAVING (must be used with <code>GROUP BY</code>)</li><li>SELECT (aliases defined in <code>SELECT</code> can strictly only be used after <code>SELECT</code>)</li><li>DISTINCT</li><li>ORDER BY</li><li>LIMIT</li></ul></li><li><p><code>WHERE</code>/<code>HAVING</code> predicate: <code>&lt;=&gt;</code> for (in)equality comparison, <code>BETWEEN</code> for range, <code>LIKE</code> for “Old School SQL” pattern matching (<code>~</code> for standard Regex), <code>IS NULL</code> for null testing, and a series of subquery specific predicates.</p><ul><li>Compound predicate： <code>AND</code> for conjunction, <code>OR</code> for disjunction, <code>NOT</code> for negation.</li><li>Wildcard characters for <code>LIKE</code> pattern: <code>%</code> for any number of characters (0, 1, or more), <code>_</code> for any single character.<ul><li><code>LIKE &#39;z%&#39;</code> or <code>~ &#39;^z&#39;</code> for all strings starting with <code>z</code>.</li><li><code>LIKE &#39;%z&#39;</code> or <code>~ &#39;z$&#39;</code> for all strings ending with <code>z</code>.</li><li><code>LIKE &#39;%z%&#39;</code> or <code>~ &#39;z&#39;</code> for all strings containing <code>z</code>.</li><li><code>LIKE &#39;z&#39;</code> or <code>~ &#39;^z$&#39;</code> for all strings equal to <code>z</code>.</li><li><code>LIKE &#39;z_&#39;</code> or <code>~ &#39;^z.&#39;</code> for all strings starting with <code>z</code> and having length of 2.</li><li><code>LIKE &#39;_z%&#39;</code> or <code>~ &#39;^..z&#39;</code> for all strings whose 2nd character is <code>z</code>.</li></ul></li><li>Predicates for subquery:<ul><li><code>EXISTS</code> for emptiness: <code>WHERE EXISTS (SELECT * FROM Websites WHERE Websites.uid = Users.uid)</code>.</li><li><code>IN</code> for membership: <code>WHERE Users.uid IN (SELECT uid FROM Websites)</code>.</li><li><code>ANY</code>/<code>ALL</code> for quantification: <code>WHERE Users.age &gt;= ALL (SELECT age FROM Users)</code>.</li><li><code>SOME</code> is an alias for <code>ANY</code>.</li></ul></li><li>Comparison of incompatible types will error out. Use <code>CAST</code> to convert types. There’s an edge case in Natural Join: if mutual columns in different tables have different data types; in that situation, the join will error.</li></ul></li><li><p>Column expression can be a column name, a constant, or an aggregate function, or a math expression involving the previous items.</p><ul><li>Aggregate functions: <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code>, <code>GROUP_CONCAT</code>, <code>STDDEV</code>, <code>STDDEV_POP</code>, <code>STDDEV_SAMP</code>, <code>VAR_POP</code>, <code>VAR_SAMP</code>, <code>VARIANCE</code>…</li><li>Math expression: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code>, <code>()</code>, <code>ABS</code>, <code>CEIL</code>, <code>FLOOR</code>, <code>ROUND</code>, <code>SIGN</code>, <code>SQRT</code>, <code>EXP</code>, <code>LN</code>, <code>LOG</code>, <code>POWER</code>…</li><li><code>COUNT(DISTINCT S.name)</code> and <code>DISTINCT Count(S.name)</code> are different.</li><li><code>COUNT(*)</code> counts the number of tuples regardless of the value of the attributes.</li></ul></li><li><p>If using <code>GROUP BY</code>, only THE GROUP-BY attribute and aggregated values can appear in the <code>SELECT</code> list.</p></li></ul></li><li><p>Multi-table queries</p><ul><li>Only thing changed is the FROM clause: <code>FROM &lt;single table&gt;</code> -&gt; <code>FROM &lt;table expression&gt;</code>.</li><li>Table expression: <code>FROM &lt;table expression&gt; [AS &lt;alias&gt;]</code><ul><li><code>&lt;table expression&gt;</code> can be a table name, a subquery, or a join of two or more table expressions.</li><li><code>&lt;alias&gt;</code> is optional (only in <code>FROM</code> clause; column aliases are always required in <code>SELECT</code> clause).</li><li>Two-table join: <code>FROM &lt;table name&gt; [INNER | NATURAL | &#123;LEFT | RIGHT | FULL&#125; OUTER] JOIN &lt;table name&gt; ON &lt;qualification list&gt;</code></li><li>Default join:<ul><li><code>a JOIN b ON ...</code> – Inner Join<ul><li><code>a JOIN b</code> without <code>ON</code> is equivalent to <code>a, b</code>.</li></ul></li><li><code>a, b</code> – Cross Join, a simple Cartesian product</li></ul></li><li>Joining more than 2 tables can be done by chaining multiple joins.<ul><li>Take note! The <code>INNER JOIN</code> and <code>WHERE</code> clauses will filter out rows with <code>NULL</code> values produced by the <code>OUTER JOIN</code>.</li></ul></li><li>With queries that <code>SELECT *</code>, the order of the columns is dependent on the join order. With queries that <code>SELECT</code> specific columns, the order of the columns is dependent on the order of the columns in the <code>SELECT</code> clause.</li></ul></li></ul></li><li><p><code>NULL</code> values</p><ul><li><code>NULL</code> is used to fill in the entries with no matching data points.<ul><li>Inner join is the only join that wouldn’t have any null values by definition, since the results must match on both sides.</li></ul></li><li><code>WHERE</code> and aggregate functions ignore <code>NULL</code> (Except <code>Count(*)</code>). For example, <code>SELECT * FROM sailors WHERE rating &gt; 8 OR rating &lt;= 8</code> will not select tuples with <code>NULL</code> rating.</li><li>Think about <code>NULL</code> as “I don’t know”. So, <code>(x op NULL) = NULL</code>, where <code>op</code> is any comparison operator. <code>NULL and TRUE = NULL</code>, <code>NULL and FALSE = FALSE</code>, <code>NULL or TRUE = TRUE</code>, <code>NULL or FALSE = NULL</code>.</li></ul></li><li><p>Query composition (Treat tuples within a relation as elements of a set)</p><ul><li>Relation will become sets once <code>UNION</code> <code>INTERSECT</code> <code>EXCEPT</code> is applied (no duplicates).</li><li>Multiset semantics: <code>UNION ALL</code> <code>INTERSECT ALL</code> <code>EXCEPT ALL</code> (duplicates allowed).</li><li>For these operations to be applied correctly, the schema of two tables must be the same.</li></ul></li><li><p><a href="https://www.geeksforgeeks.org/sql-ddl-dql-dml-dcl-tcl-commands/">DCL</a></p></li></ul></li></ul><h2 id="Query-Parsing-amp-Optimization"><a href="#Query-Parsing-amp-Optimization" class="headerlink" title="Query Parsing &amp; Optimization"></a>Query Parsing &amp; Optimization</h2><h3 id="Out-of-Core-Algorithms"><a href="#Out-of-Core-Algorithms" class="headerlink" title="Out-of-Core Algorithms"></a>Out-of-Core Algorithms</h3><ul><li>Limited RAM spaces (B blocks of disk equivalent)</li><li>Single-pass streaming data through RAM</li><li>Divide (into RAM-sized chunks) and Conquer</li><li>Double buffering</li></ul><h3 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h3><p>Produce an output file FS with contents (records) stored in order by a given sorting criterion.DISTINCT, GROUP BY, sort-merge join, tree bulk loading, and ORDER BY all require sorting.</p><ul><li>Procedure<ul><li>Pass 0 (Conquer): Recursively sort sets of B pages. Produce ⌈N/B⌉ sorted runs.</li><li>Pass i (<code>i &gt;= 1</code>, Merge): Use B - 1 input buffers and 1 output buffer. Merge B-1 runs into 1 runs. Repeat until only 1 run is left.</li></ul></li><li>Analysis<ul><li>Total number of passes: <code>⌈log&lt;sub&gt;B-1&lt;/sub&gt;⌈N/B⌉⌉ + 1</code></li><li>Total number of I/OS: <code>2N * Total number of passes</code> (as each pass requires 2N I/Os)</li><li>Two passes can process <code>B(B-1)</code> pages.</li></ul></li></ul><h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><p>Produce an output file FH with contents (records) arranged on disk so that no two records that have the same value are separated by a record with a different value.</p><ul><li>Procedure<ul><li>Pass i (<code>1 &lt;= i &lt;= n - 1</code>, Divide): Use 1 input buffers and B - 1 output buffer. Stream records to disk based on defined hash function. This produces at most B - 1 slots.<ul><li>When an output buffer fills up, we write it to disk and clear it. The next time it fills up, we flush it again. The two pages that came from the same buffer will be placed adjacently.</li><li>If a partition is too large to fit in B pages, recursively partition that partition using a different hash function.</li><li>If there are more than B pages of duplicates, we’ll never get small enough partitions. We can check if all values in partition are the same and terminate algorithm.</li></ul></li><li>Pass n (Conquer): Start when all partitions fit in B pages. Read partitions into in-memory hash table one at a time, using a fine-grained hash function.</li></ul></li><li>Analysis<ul><li>Some partition might not fill up whole page so after a pass we might end up with more pages than we started with.</li><li>Also not sure how many recursive partitions we will have.</li><li>If hash function is perfect, without recursive partitioning we can process <code>B(B-1)</code> pages. Costs can be estimated as <code>4N</code> I/Os.</li><li>No easy formula exist. To get exact I/O cost can only count by hand.</li></ul></li></ul><h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h2><h2 id="File-and-Index-Organization"><a href="#File-and-Index-Organization" class="headerlink" title="File and Index Organization"></a>File and Index Organization</h2><h3 id="B-Tree-Index"><a href="#B-Tree-Index" class="headerlink" title="B+ Tree Index"></a>B+ Tree Index</h3><ul><li>Concepts<ul><li>Order(<code>d</code>): <code>2d</code> is the maximum number of keys in a node.</li><li>Fanout(<code>F</code>): max number of child. Always: <code>F = 2d + 1</code>.</li><li>Height(<code>h</code>): number of edges from root to all leaves. All leaf nodes have the same height.</li></ul></li><li>Properties<ul><li>Key defined intervals that are left-closed and right-open: <code>[a, b)</code>.</li><li>Max number of keys in a tree: <code>2d * F^h</code>.</li><li>In each node: <code>d &lt;= #keys &lt;= 2d</code> (Root doesn’t need to obey this invariant).</li><li>In inner node, key is never deleted, even when we delete keys from leaf nodes.</li><li>Balancing requirement not strictly obeyed, especially in deletion/bulk loading.</li><li>Usually has a high fanout, so it’s not very deep.</li><li>Actual keys are always stored on the leaf nodes.</li><li>Leaves need not be stored in sorted order (but often are).</li><li>All leaf nodes are doubly linked so they can go to sibling nodes easily (for range queries).</li></ul></li><li>Operation<ul><li>Read (by key): find split on each and follow children pointers.</li><li>List: find leftmost leaf and follow sibling pointers.</li><li>Insertion: find correct leaf and insert. If leaf is full (<code>2d + 1</code> keys), split it recursively.<ul><li>Split leaf node: the origin leaf has the first <code>d</code> keys and the new leaf has the remaining. The first element of the new leaf is copied up to parent inner node.</li><li>Split inner node: Same as leaf, but instead of copying up the first element, push it up instead.</li><li>Split root node: Create a new root with 1 key and two children are the origin root and the new nodes, each with <code>d</code> keys.</li><li>Splitting root “grows” the tree upwards (<code>h</code> increases by 1).</li></ul></li><li>Deletion: find correct leaf and delete. For our purpose, don’t rebalance it. Don’t delete inner nodes even if empty. Textbook describes algorithm for rebalancing and merging on deletion.</li><li>Bulk loading: insert all keys one by one just like insertion - but once we find a leaf node we load until we cannot - instead of going back to root and trace down every time after an insertion. One more difference: on leaf node we load up to load factors instead of waiting for it to be full to split (this does not apply to inner nodes).<ul><li>Once a inner node split, it and its children node will never be touched again.</li></ul></li></ul></li><li>Data Storage<ul><li>By value: actual data record (with key value k)</li><li>By reference: <code>[k, rid of matching data record]</code></li><li>By list of references: <code>[k, list of rids of all matching data records]</code><ul><li>More compact.</li><li>Very large rid lists can span multiple blocks, needs bookkeeping to manage that</li><li>Can handle non-unique search keys</li></ul></li><li>Using reference means unless we sort data records by different key and enforce clustering on both, two B+ tree indices can share one copy of table.</li></ul></li><li>Clustering<ul><li>Clusterings are used to reduce the number of I/Os needed to access data, enjoying potential locality benefits from cache hits at the expense of maintaining the clustering.</li><li>Unclustered: about 1 I/O per record. Clustered: about 1 I/O per page of records.</li></ul></li><li>Varible-length key<ul><li>Questioning order<ul><li>Order (d) makes little sense with variable-length entries. Different nodes have different numbers of entries. inner nodes often hold many more entries than leaf nodes. Even with fixed length fields, Alternatives 1 and 3 storage gives variable length data.</li><li>Instead, use a physical criterion in practice: at-least half-full (measured in Bytes).</li></ul></li><li>Compression<ul><li>Prefix Compression: we compress starting at leaf. On split, determine minimum splitting prefix and copy up.</li><li>Suffix Compression: store common prefix once in each node. Leave only suffix as key. (Esp useful for composite keys where first part is common.)</li></ul></li></ul></li></ul><h2 id="Buffer-Management"><a href="#Buffer-Management" class="headerlink" title="Buffer Management"></a>Buffer Management</h2><p>Buffer manager hides the fact that not all data are in RAM. Upper layers want to read/write to pages as if they are always in RAM (except they aren’t; buffer manager will read/write to disk if necessary).</p><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><ul><li>Buffer pool: Large range of memory, malloc’ed at DBMS server boot time (MBs-GBs). Consisting of a set of frames in RAM.</li><li>Buffer Manager metadata: Smallish array in memory, malloc’ed at DBMS server boot time. It records <code>(frameid, pageid, dirty?, pin count)</code>, and other information (e.g., a <code>ref bit</code> for each frame and one single <code>clock hand</code> field in Clock Policy).</li><li>Frame: a block of memory that can hold a page.</li><li>Cache hit</li></ul><h3 id="Strategies"><a href="#Strategies" class="headerlink" title="Strategies"></a>Strategies</h3><ul><li>If requested page is in buffer pool, load it from there. Otherwise, load it from disk and put it in buffer pool. If requested page is not in buffer pool and there is no empty frame available, we need to evict a page from buffer pool to make room for the requested page. That is, some form of eviction policy is needed.</li><li>If the page evicted is dirty, we need to write it back to disk before eviction. Thus, each frame should maintain a isDirty flag.</li><li>If the page evicted is still in use by other transactions, we need to wait until it is no longer in use before we can evict it. Thus, each frame should maintain a pin count. Any request to this page increase the pin count; once we are done with the request we decrease the pin count. If the pin count is 0, we know evicting this page is safe.</li><li>Thus, an eviction policy must at least look for a page with pin count 0, and should always check isDirty flag before evicting a page (if isDirty, write it back to disk first and mark clean).</li><li>If requests can be predicted (e.g., sequential scans) pages can be pre-fetched (several pages at a time!)</li></ul><h3 id="Eviction-Policies"><a href="#Eviction-Policies" class="headerlink" title="Eviction Policies"></a>Eviction Policies</h3><ul><li>Policy can have big impact on #I/Os depending on the access pattern. The database management system knows its data access patterns, which allows it to optimize its buffer replacement policy for each case.</li><li>LRU: Least Recently Used. Evict the page that was least recently used.<ul><li>Good temporal locality.</li><li>Bad in handling sequential scans - basically no hit.</li><li>Heap data structure for min value is costly.</li><li>Can use Clock Approximation to reduce cost.</li></ul></li><li>Clock:<ul><li>Arrange frames in a circular list. Maintain an extra <code>ref bit</code> for each frame, and one single <code>clock hand</code> field. Set all these to <code>0</code> at the beginning.</li><li>When a page is requested, if it is in buffer pool, set its ref bit to <code>1</code>. Do not touch <code>clock hand</code>.</li><li>If it is not in buffer pool and there is empty frame, load it in and set its ref bit to <code>1</code>.</li><li>If it is not in buffer pool and there is no empty frame, start checking from the frame pointed by <code>clock hand</code>. Skip all frames whose <code>pin count</code> is non-zero and move forward clockhand. For all unpinned frames whose <code>ref bit</code> is <code>1</code>, set <code>ref bit</code> to <code>0</code> and move forward clockhand, until we meet the first unpinned frames whose <code>ref bit</code> is <code>0</code>, evict this frame and load the requested page in. Set its ref bit to <code>1</code>.</li></ul></li><li>MRU: Most Recently Used. Evict the page that was most recently used.<ul><li>Handles sequential flooding (accesses) well - <code>B-1</code> hits per round from the second round onwards (<code>B</code> is the buffer pool size).</li><li>Timestamp for “used” is counted by the time it is unpinned, not the time it is pinned. So, more accurately, “most recently unpinned”.</li></ul></li><li>Random: Evict a random frame.</li></ul><h2 id="Disk-Space-Management"><a href="#Disk-Space-Management" class="headerlink" title="Disk Space Management"></a>Disk Space Management</h2><p>Disk Space Management is the lowest layer of DBMS interacting with disk storage. It is responsible for mapping pages to disk blocks, loading pages into the buffer pool, and writing pages back to disk.</p><p>DSM may interface with device directly but that is hard to program due to the variety. So, it is usually implemented over its own file system (Bypass the OS, allocate single large “contiguous”<br>file on an empty disk, assuming sequential/nearby byte access are fast).</p><h3 id="Disk-Structure-SSD"><a href="#Disk-Structure-SSD" class="headerlink" title="Disk Structure/SSD"></a>Disk Structure/SSD</h3><p>Te be updated.</p><h3 id="DSM-Hierarchy"><a href="#DSM-Hierarchy" class="headerlink" title="DSM Hierarchy"></a>DSM Hierarchy</h3><ul><li>Each disk is divided into a number of pages/blocks, the basic unit of data transfer to/from the disk. Each relation is stored in its own file and a file can be organized into multiple pages. Thus, a file stores a relation, and also stores a collection of pages, and a page stores a collection of tuples.</li><li>Loosely, DSM File (= potentially many OS files)= Relation &gt; Page &gt; Tuple</li><li>In some texts, page = a block-sized chunk of RAM. We treat “block” and “page” as synonyms.</li><li>Again, we are not talking to OS. DSM file may span multiple OS files on multiple disks/machines.</li><li>Think pages as the common currency understood by multiple layers. It is Managed on disk by the disk space manager and managed in memory by the buffer manager.</li><li>DSM basically needs to provide API for higher layer to do CRUDI record. This abstraction could span multiple OS files and even machines.</li><li>To keep track at a record level, we potentially need to specify: machine ID, file ID, page ID, record ID.</li></ul><h3 id="Organizing-fields-on-a-record"><a href="#Organizing-fields-on-a-record" class="headerlink" title="Organizing fields on a record"></a>Organizing fields on a record</h3><ul><li>Assume System Catalog stores the Schema, then no need to store type information with records.</li><li>Fixed-length records: fast access to any field via offset calculation.</li><li>Variable-length records: Put fixed length fields before variable length fields. Put a header at beginning of record to save pointer to end of each variable length field for fast access to any field.</li><li>Bitmap can be stored in record header to indicate NULL fields (one bit is needed per nullable field; primary key is not nullable).<ul><li>Without a bitmap, we cannot distinguish between NULL and empty string. (Both will be 0 bytes long in terms of pointers.)</li></ul></li><li>Variable-length pointer approach can also be used to squash fixed length null fields with many NULLs.</li></ul><h3 id="Organizing-records-on-a-page"><a href="#Organizing-records-on-a-page" class="headerlink" title="Organizing records on a page"></a>Organizing records on a page</h3><ul><li>For Fixed Length Records: If packed, record ID can be used to locate a record; if unpacked, a bitmap can be stored in page header to indicate which slots are free.</li><li>For Variable Length Records: A page footer is needed to store metadata of this page.<ul><li>Page footer<ul><li>Slot count (number of slots used and unused from slot directory)</li><li>Free space pointer (points to the first free byte in the page)</li><li>Slot directory (array of record entries, each entry is a [record pointer, record length] pair). This grows inwards.</li></ul></li><li>Adding record: Find the first free slot and insert, update slot directory, update free space pointer, update slot count. If there is NULL in slot directory (can check slot count), use it instead instead of creating new entry.</li><li>Deleting record: Set the slot directory entry to NULL, update slot count.</li><li>If packed, a packing happens directly after deleting a record. If unpacked, a packing happens periodically.</li></ul></li></ul><h3 id="Organizing-pages-on-a-file"><a href="#Organizing-pages-on-a-file" class="headerlink" title="Organizing pages on a file"></a>Organizing pages on a file</h3><ul><li><p>Heap file: Pages are stored in a file in no particular order.</p><ul><li>Linked list implementation: 1 header page containing pointers to 2 doubly linked lists: a linked list of full pages and a linked list of pages with free space. Each data page has pointers to the next and previous pages.<ul><li>Insert: Trace the linked list of pages with free space to find the first page with enough free space. If no such page exists, allocate a new page and append it to the front of the linked list of pages with free space. Insert the record into the page. Update all necessary linked list pointers and header page. If a page becomes full, move it to the front of the linked list of full pages.</li><li>Delete: Find the page containing the record. Delete the record from the page. If the page becomes empty, remove it from the linked list of full pages and append it to the linked list of pages with free space. Update all necessary linked list pointers and header page.</li></ul></li><li>Page directory implementation: A linked list of header pages containing [Amount of free space, pointer to data page] pairs.<ul><li>Insert: Look through the linked list of header page to find a data page with enough space. Insert the record and update the info on header page.</li><li>Delete: Find the page containing the record. Delete the record from the page and update the info on header page.</li></ul></li><li>We can optimize the page directory further (E.g., compressing header page, keeping header page in sorted order based on free space, etc.) But diminishing returns?</li></ul></li><li><p>Sorted file: Pages are stored in a file in sorted order - this implies the records on a page are also sorted.</p><ul><li>Sorted files are implemented using page directory and an ordering is strictly enforced on the pages.</li></ul></li><li><p>Indexed file: Using an index (B+ Tree, Hash, R-Tree, GiST etc.) on the pages in a file for fast lookup and modification by key - the index itself may contain the records directly, or pointers to the pages containing the records (If the latter, the pages themselves may be be clustered - sorted unstrictly - or unclustered).</p></li></ul><h3 id="Cost-Model-for-Analysis"><a href="#Cost-Model-for-Analysis" class="headerlink" title="Cost Model for Analysis"></a>Cost Model for Analysis</h3><ul><li>Parameters:<ul><li><code>B</code>: Number of data blocks in the file</li><li><code>R</code>: Number of records per block</li><li><code>D</code>: Average time to read/write disk block (We can take out a factor of <code>D</code> to count the number of I/O instead of estimated time)</li><li>(For B+ Tree) <code>F</code>: Average inner node fanout</li><li>(For B+ Tree) <code>E</code>: Average # data entries per leaf</li></ul></li><li>Focus: Average case analysis for uniform random workloads for:<ul><li>Sequential scan</li><li>Random read</li><li>Random update</li><li>Random insert</li><li>Random delete</li></ul></li><li>Assumptions: For now, we will ignore:<ul><li>Sequential vs Random I/O</li><li>Pre-fetching and cache eviction costs</li><li>Any CPU costs after fetching data into memory</li><li>Reading/writing of header pages for heap files</li><li>Data need to be brought into memory before operated on (and potentially written back to disk afterwards) and both will cost I/O.</li></ul></li><li>More assumptions:<ul><li>Single record insert and delete</li><li>Equality selection – exactly one match</li><li>For Heap Files: Insert always appends to end of file.</li><li>For Sorted Files: Packed means Files compacted after deletions (i.e., no holes); always search according to sorted key.</li></ul></li><li>Even more assumptions:<ul><li>For B+ Tree: assume each page is 2/3 full.</li><li>For B+ Tree: assume using reference as storage method.</li></ul></li></ul><img src="FileCostCompare.png" alt="Cost Comparison of Heap, Sorted, and Indexed Files" loading="lazy"><h2 id="Concurrency-Control"><a href="#Concurrency-Control" class="headerlink" title="Concurrency Control"></a>Concurrency Control</h2><h2 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h2><h2 id="Mechanical-Procedures"><a href="#Mechanical-Procedures" class="headerlink" title="Mechanical Procedures"></a>Mechanical Procedures</h2><h3 id="Size-Counting"><a href="#Size-Counting" class="headerlink" title="Size Counting"></a>Size Counting</h3><ul><li>Count record size<ul><li>Primary key is not nullable.</li><li>Header: Each variable length field needs a 4-Byte pointer to the end of the field in header.</li><li>Header: Each nullable field needs a 1-bit in bitmap in header. Summing them up and round up to the nearest byte for the total size of bitmap.</li><li>Body: For fixed length fields we always allocate the same amount of space even if the field can be NULL, i.e. <code>topic CHAR[20]</code> will always take 20 bytes.</li><li>Body: For variable length fields, if it is nullable it may take up 0 bytes, i.e. <code>topic VARCHAR[20]</code> will take 0 bytes if it is NULL. If it is not NULL, it may take up a size up to 20 bytes.<ul><li>This is the only part that makes size of record variable.</li></ul></li></ul></li><li>Count records per page<ul><li>Exclude all metadata in data page: page header/footer, including bitmap, sibling pointer, free space pointer, slot count etc.</li><li>For page footer layout: Each record needs itself and a slot in the slot directory.</li><li>For fixed length record bitmap layout: Each record needs itself and a bit in the bitmap. Round bitmap to the nearest byte.</li><li>Sometimes we only fill up to a certain percentage of the page.</li></ul></li><li>Count number of ader pages<ul><li>Linked list header page: 1 header page only.</li><li>Page directory header page: number of pages divided by number of entries per page.<ul><li>Sometimes need to consider the sibling pointers in header pages when we are counting bytewise.</li></ul></li><li>Data pages: number of records divided by number of records per page.</li></ul></li></ul><h3 id="I-O-Counting"><a href="#I-O-Counting" class="headerlink" title="I/O Counting"></a>I/O Counting</h3><ul><li><p>Count heap file I/O (linked list):</p><ul><li>If no implemention specified, ignore header page costs.</li><li>Header pages and sibling pointers both needs maintenance.</li><li>Moving pages between linked lists needs maintenance. Always move to the front of the list to minimize I/O.</li><li>Insert: finding a page in middle of pages with free space might cause more I/O than finding a page at the end of the list. An insertion that causes a page to be full incurs maximum I/O count.<ul><li>If record is fixed length, then we can be sure the first non-full page will have enough space.</li></ul></li></ul></li><li><p>Count heap file I/O (page directory)</p><ul><li>Full scan: needs to read all header + data pages. (There is no sibling pointer in data pages so we can’t skip header pages.)</li><li>Insert: if primary key is inserted, need a full scan to ensure no duplicate and then + 2 I/Os. If primary key is not inserted, just 2 I/Os.</li><li>Full scan: Do we count in 1 header page?</li></ul></li><li><p>Count sorted file I/O</p><ul><li>Count as if you can binary search on data pages (without header pages) and you can go to any data page from any page.</li></ul></li><li><p>Count B+ Tree I/O</p><ul><li>Each node has its own page so reading a node is one I/O.</li><li>Remember to count: reading root, inner, leaf, and actual data page (if implemented with reference).</li><li>Index choice<ul><li>If see <code>AND</code> can choose either key on two sides of <code>AND</code>.</li><li>Always choose lower tree with suitable index.</li></ul></li><li>If no index, may need to full scan all data pages (ignore trees with irrelevant index). For full scan, ignore tree.</li><li>If data page is changed, index might need changing too which incurs additional write I/O.</li><li>Clustered: to get best-case I/O we can assume everything to be on the same page as much as possible.</li><li>Unclustered: to get worst-case I/O we can assume everything to be on different pages as much as possible.<ul><li>One leaf node might need to read many data pages!</li></ul></li><li>Range query<ul><li>Need to count how many leaf nodes are used to encompass the range.<ul><li>If alternative 1 storage, data pages themselves are leaf nodes and order number does not apply. Need to check how many records on one data page.</li><li>If alternative 2/3 storage, need to check order number, fill factor.</li></ul></li></ul></li></ul></li><li><p>Count Sort I/O: use formula</p></li><li><p>Count Hash I/O (By example)</p><ul><li>B = 3, N = 8, assuming first partition pass uses a bad hash function, creating a partition A of size 3 and partition B of 5, but the subsequent partition pass uses perfectly uniform hash function.</li><li>Since B = 3, each time we hash pages into two partitions.</li><li>Pass 1:<ul><li>Read <code>8</code> pages.</li><li>Write <code>3 + 5 = 8</code> pages.</li><li>In total: <code>8 + 8 = 16</code> I/Os.</li></ul></li><li>Pass 2:<ul><li>Partition A only has <code>3</code> pages so no recursive partitioning needed.</li><li>Now for partition B: Read <code>5</code> pages.</li><li>Since hash is uniform now, even partition will have <code>⌈5/2⌉ = 3</code> pages.</li><li>So in total we write <code>3 + 3 = 6</code> pages.</li><li>We can stop for this part, as partition of size 3 will fit in <code>B = 3</code>.</li><li>In total: <code>5 + 6 = 11</code> I/Os.</li></ul></li><li>Conquer:<ul><li>Now, we have <code>3</code> pages in partition A and <code>6</code> pages in partition B.</li><li>Read <code>3 + 6 = 9</code> pages in total.</li><li>Write <code>3 + 6 = 9</code> pages in total.</li><li>In total: <code>9 + 9 = 18</code> I/Os.</li></ul></li><li>Grand total: <code>16 + 11 + 18 = 45</code> I/Os.</li></ul></li></ul><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>Questions popped up in my head during the reading:</p><ul><li><p>Can we compress inner nodes in B+ Trees into a single page? (E.g., if the inner node is small enough, we can store it in a single page and use a pointer to the next page to store the rest of the inner node. This is similar to how we store variable length records in pages.)</p></li><li><p>How to deal with multiple B+ Trees defined over the same table, each wanting its own clustering?<br>Is it possible to have two clustered indices on separate columns, but you would generally have to store two copies of the data (and keep both up to date).<br>Special case: if the search key for one index is a subset of the search key for the other (e.g. index 1 on sid, index 2 on (sid, name)), then we can have just one copy (sorted on (sid, name)).</p></li><li><p>How is prefix key compression scalable to insertion?</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Cheatsheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I am back!</title>
      <link href="/2022/08/07/I-am-back/"/>
      <url>/2022/08/07/I-am-back/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>A framework update for the whole site and the end of summer holidays.</p><span id="more"></span><p>Why is my weekend always busier than weekdays, and summer holidays always busier than regular semesters?</p><p>It has been three months since I posted a post on this site and a year since I started working on this site. A lot of npm modules have been updated and the framework (YUN) I used experienced a breaking update while I was away. I think it’s high time to update the site and the whole project. It took me an evening but I pulled that off - some of the stylings might still be a bit off but I am happy with the result now!</p><p>I also refurbished the portfolio page by segmenting the page into three subpages: game, web-based, and misc. Of course, I updated my resume too. I also updated the works page to include the new projects I have done. On the other hand, I learnt a lot this summer but none is highly conceptual, theoretial or requires a lot of memorization work; hence, I did not put anything down as technical blog.</p><p>Besids learning technical stuff, my work as a teaching assistant for this summer semester is ending soon and hopefully I will have time to write a memoir about it. It was such an experience. My projects are going well but I had to drop one of them simply because of the time constraints (The mobile game project). That was such a pity.</p><p>Anyway, I am back!</p>]]></content>
      
      
      <categories>
          
          <category> Non-technical </category>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to Undo in Git</title>
      <link href="/2022/04/08/On-Going-Back-to-a-Previous-Commit/"/>
      <url>/2022/04/08/On-Going-Back-to-a-Previous-Commit/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Various scenarios of undoing commits in Git discussed.</p><span id="more"></span><p>There are already many very thorough posts about how to undo stuff in Git, for example <a href="https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/">this one</a>. I will not aim to be more thorough but rather I will just pick out some points I find most frequently used/worth emphasizing. This is essentially some kind of cheat sheet.</p><ul><li>Undo a unstaged change (“discard” new changes): <code>git restore &lt;file&gt;</code> (previously we use <code>git checkout -- &lt;file&gt;</code>, which behaves the same).</li><li>Undo a stage (undo <code>git add</code>): <code>git restore --staged &lt;file&gt;</code> (previous we use <code>git reset HEAD &lt;file&gt;</code>, which behaves the same. Take note that none of these actually discards any change made to the file; they only unstage the changes. I have a relevant <a href="/2022/03/26/Staged-but-Uncommited-Files-and-Git-Add/" title="post">post</a> that discusses the limitation of this “unstaging” operation).</li><li>Undo a local commit/going back to a previous commit (undo <code>git commit</code>): <code>git reset &lt;last good commit&gt;</code> (By default this is soft, keeps the working tree changes, add <code>--hard</code> to remove those if desired. Caution! This deletes git history. If you want to keep history use the <code>git revert</code> described below. Personally, I found <code>git reset --hard HEAD~1</code> very handy)</li><li>Fix last commit message: <code>git commit -amend -m &lt;correct message&gt;</code>. (It replaces the most recent commit with a new commit that incorporates any staged changes; if nothing is staged, it only rewrites commit message.)</li><li>Undo a pushed commit: <code>git revert &lt;last good commit&gt;</code> then <code>git push</code>. (It creates a new commit than automatically undoes all changes since the last good SHA. No history deleted. You just now have a new commit on top of all previous but without those changes).</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Cheat Sheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Views in Java Collection Framework</title>
      <link href="/2022/04/01/Views-in-Java-Collection-Framework/"/>
      <url>/2022/04/01/Views-in-Java-Collection-Framework/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>A view in Java Collections Framework is a special lightweight object which implements <code>Map</code> or <code>Collection</code>.</p><span id="more"></span><p>It is not a real, wholesome collection object. It does not holds extra information or operation on its own. It only acts as a particular representation of the whole or parts of another collection. As its name suggests, a view provides a different “view”, or look, into an already existing object.</p><p>Internally, a view references another collection, array, or singleton object. Hence, changing the view (if it is mutable) is equivalent to changing the referenced collection, array or object.</p><p>The term “view” probably comes from database jargon and it is closely related to Adapter pattern.</p><h2 id="Common-Views"><a href="#Common-Views" class="headerlink" title="Common Views"></a>Common Views</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">////Map's keySet, entrySet and values</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> origMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>origMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>origMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>origMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nice"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> origMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> origMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> origMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">////Array's List representation</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origArr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"nice"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listOfArr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>origArr<span class="token punctuation">)</span><span class="token punctuation">;</span>origArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zero"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listOfArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"zero", they are synced</span>listOfArr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"what"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>origArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"what"</span><span class="token comment">////List's subList</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> origList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>origList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>origList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>origList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> subList <span class="token operator">=</span> origList<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">////SortedSet, SortedMap has similar sub-collections</span><span class="token comment">//SortedSet&lt;E>  headSet(E toElement);</span><span class="token comment">//SortedSet&lt;E>  subSet(E fromElement, E toElement);</span><span class="token comment">//SortedSet&lt;E>  tailSet(E fromElement);</span><span class="token comment">//SortedMap&lt;K,V>    headMap(K toKey);</span><span class="token comment">//SortedMap&lt;K,V>    subMap(K fromKey, K toKey);</span><span class="token comment">//SortedMap&lt;K,V>    tailMap(K fromKey);</span></code></pre><h2 id="Unmodifiable-Views"><a href="#Unmodifiable-Views" class="headerlink" title="Unmodifiable Views"></a>Unmodifiable Views</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> zeroList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> zeroSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> zeroMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> oneList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> oneSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> oneMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token class-name">NineElemsList</span> <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">nCopies</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>These views are unmodifiable and will error if you try add or remove.<br>They are easier and faster to create as they do not have the overhead of creating a traditional collection.</p><p>Further, java creates factory methods to create unmodifiable collection (these are views, too):</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//List&lt;T>         unmodifiableList(List&lt;? extends T> list);</span><span class="token comment">//Map&lt;K,V>        unmodifiableMap(Map&lt;? extends K,? extends V> m);</span><span class="token comment">//Set&lt;T>          unmodifiableSet(Set&lt;? extends T> s);</span><span class="token comment">//SortedMap&lt;K,V>  unmodifiableSortedMap(SortedMap&lt;K,? extends V> m);</span><span class="token comment">//SortedSet&lt;T>    unmodifiableSortedSet(SortedSet&lt;T> s);</span><span class="token comment">//For example</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> unmodifiableList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>origList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Other than those, to create unmodifiable lists you can also use,</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> unmodifiableList2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>As of Java9, to create unmodifiable maps with multiple entries,</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> unmodifiableMap2 <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">ofEntries</span><span class="token punctuation">(</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> unmodifiableMap3 <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Unmodifiable list and immutable list are pretty much two terms that could be used interchangeably.</p><p>Unmodifiable map and immutable map are not same. You cannot add or remove entries from unmodifiable map (<code>UnsupportedOperationException</code>). You can still update key values in the case of unmodifiable map. An unmodifiable Map containing immutable objects is called immutable Map. In immutable map nothing can be changed.</p><h2 id="Why-Bother"><a href="#Why-Bother" class="headerlink" title="Why Bother?"></a>Why Bother?</h2><p>View exists for the primary reason of efficiency. No copying around data. No extra codes. Minimized overhead.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>There Is No Undo for Git Add</title>
      <link href="/2022/03/26/Staged-but-Uncommited-Files-and-Git-Add/"/>
      <url>/2022/03/26/Staged-but-Uncommited-Files-and-Git-Add/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>The first questions that keep coming up during the first months using Git probably look like these: How do I undo <code>git add</code>? How do I undo <code>git commit</code>? How do I undo xxx?</p><span id="more"></span><p>These days I realized that there is really no “undoing” of most commands in Git. Essentially, you are always moving forward.</p><p>Take <code>git add</code> for example. The popular ways to undo <code>git add</code> are:</p><ul><li><code>git reset HEAD &lt;filename&gt;</code> (and its variations, <code>git reset</code>, <code>git reset .</code> etc.) Since from 1.8.2 Git decides to throw in an empty index for <code>HEAD</code> instead of just erroring, this command is applicable even with a repository with no previous commit. You may need to run <code>git gc --prune=now</code> to remove all loose objects but it is fine to leave them there (they would not interfere with your work and the memories would eventually be reclaimed).</li><li><code>git rm --cached &lt;filename&gt;</code> Adding <code>--cached</code> will let your <code>git rm</code> command remove paths only from the index while leaving the working tree files intact, whether modified previously or not.</li></ul><p>However, both are not perfect.</p><p><code>git rm --cached &lt;filename&gt;</code>, as the documentation goes, simply removes a file path from the index. This is not ideal. For example, in the case where your file has a few correct <code>git add</code> or/and <code>git commit</code> before you modified the file and made an erroneous <code>git add</code> (which you want to undo), the <code>git rm --cached</code> command will remove and unstage this file entirely and discarding all previous commits. This is probably not what you want.</p><p>In other words, <code>git add</code> have two use cases: track a new file, or update content of a previously tracked file. <code>git rm --cached &lt;filename&gt;</code> works as a undo for the first case but not the second.</p><p><code>git reset HEAD &lt;filename&gt;</code> is generally more preferable as it seems to work for both cases. However, it is still not an undo, since all it does it simply resetting the repository to the <code>HEAD</code> commit. If your file has a few correct <code>git add</code> (for updating content) before a erroneous <code>git add</code>, those previous <code>git add</code> will not survive the <code>git reset</code> either.</p><p>In a way, all consecutive <code>git add</code>s are “combined”. You could only commit them all or reset them all.</p><p>Example:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token builtin class-name">test</span><span class="token builtin class-name">cd</span> <span class="token builtin class-name">test</span><span class="token function">git</span> init<span class="token function">vim</span> dummy <span class="token comment"># type in 0 and exit</span><span class="token function">git</span> <span class="token function">add</span> dummy<span class="token function">git</span> status <span class="token comment"># dummy has staged but uncommitted changes: 0</span><span class="token function">git</span> commit -m <span class="token string">"0"</span><span class="token function">git</span> status <span class="token comment"># working tree clean</span><span class="token function">vim</span> dummy <span class="token comment"># type in 1 and exit</span><span class="token function">git</span> status <span class="token comment"># dummy has unstaged changes: 1</span><span class="token function">git</span> <span class="token function">add</span> dummy<span class="token function">git</span> status <span class="token comment"># dummy has staged but uncommitted changes: 1</span><span class="token function">vim</span> dummy <span class="token comment"># type in 2 and exit</span><span class="token function">git</span> status <span class="token comment"># dummy has unstaged changes: 2; staged but uncommitted changes: 1</span><span class="token function">git</span> <span class="token function">add</span> dummy<span class="token function">git</span> status <span class="token comment"># dummy has staged but uncommitted changes: 12</span><span class="token function">vim</span> dummy <span class="token comment"># type in "wrong" and exit</span><span class="token function">git</span> status <span class="token comment"># dummy has unstaged changes: 12; staged but uncommitted changes: wrong</span><span class="token function">git</span> <span class="token function">add</span> dummy<span class="token function">git</span> status <span class="token comment"># dummy has staged but uncommitted changes: 12wrong</span><span class="token function">git</span> reset HEAD dummy <span class="token comment"># Or `git restore --staged dummy`; they behave the same here</span><span class="token function">git</span> status <span class="token comment"># dummy has unstaged changes: 12wrong</span><span class="token function">cat</span> dummy <span class="token comment">#prints 012wrong</span><span class="token comment"># Notice the correct changes of 1 and 2 also gets unstaged</span><span class="token comment"># Also, working directory changes are still there, just unstaged</span><span class="token comment"># If want to remove those working directory changes:</span><span class="token function">git</span> checkout -- dummy <span class="token comment">#Or `git restore dummy`; they behave the same here</span><span class="token function">git</span> status <span class="token comment"># working tree clean. So all working directory changes are gone now</span><span class="token function">cat</span> dummy <span class="token comment">#prints 0</span></code></pre><p>Hence there is really no perfect “undo command” for <code>git add</code>. That is probably why most command names in Git are not symmetric (<code>add</code> and <code>unadd</code>, for example), because the processes are indeed not perfectly symmetric.</p><p>Hence, be mindful when you try to invent alias for undo commands. When you follow an online tutorial and start to do something like these:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global alias.unadd <span class="token string">'reset HEAD --'</span><span class="token function">git</span> config --global alias.unstage <span class="token string">'reset HEAD --'</span></code></pre><p>Always keep in mind what your command actually do.</p><p>Update: Might <code>git restore --staged</code> (new in 2.35.1) work as a better option?<br>Git used to recommend <code>git reset</code> in its bash terminal but now it decides to recommend <code>git restore</code> instead.</p><pre class="language-bash" data-language="bash"><code class="language-bash">Changes not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git restore &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>        modified:   xxxxx.txtUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>        xxxxx.txt</code></pre><p>I have not looked into this command in detail. Some basic testings show that they behave the same.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unfamiliar OOP Patterns: Adaptors and more</title>
      <link href="/2022/03/20/Unfamiliar-OOP-Concepts-Adaptor-and-More/"/>
      <url>/2022/03/20/Unfamiliar-OOP-Concepts-Adaptor-and-More/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Just some random Java design patterns stuff…</p><span id="more"></span><h2 id="Partial-Implementation"><a href="#Partial-Implementation" class="headerlink" title="Partial Implementation"></a>Partial Implementation</h2><h2 id="NotImplementedException"><a href="#NotImplementedException" class="headerlink" title="NotImplementedException"></a>NotImplementedException</h2><h2 id="Adaptor"><a href="#Adaptor" class="headerlink" title="Adaptor"></a>Adaptor</h2>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Standard Collection Interfaces</title>
      <link href="/2022/03/20/Java-Standard-Collection-Types/"/>
      <url>/2022/03/20/Java-Standard-Collection-Types/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Java standard library has several interfaces for collections of objects. For a structure map, see <a href="https://www.geeksforgeeks.org/how-to-learn-java-collections-a-complete-guide/">here</a>.</p><span id="more"></span><p>Here are common methods from each interface (Here I list the non-generic interfaces for simplicity. Adding support for generics does not add much conceptual complexity.)</p><h2 id="Iterable-Interface"><a href="#Iterable-Interface" class="headerlink" title="Iterable Interface"></a>Iterable Interface</h2><p>Father interface of <code>Collection</code>.</p><ul><li>retrieval: <code>iterator</code> (returns a iterator)</li><li>others: <code>forEach</code> (takes in a lambda consumer)</li></ul><h2 id="Collection-Interface"><a href="#Collection-Interface" class="headerlink" title="Collection Interface"></a>Collection Interface</h2><p>Extends <code>Iterable</code>. Father interface of <code>List</code>, <code>Queue</code> and <code>Set</code>.</p><ul><li>comparison: <code>equals</code> (this is testing whether each elements match)</li><li>membership test: <code>contains</code>, <code>containsAll</code></li><li>retrieval: <code>toArray</code></li><li>size: <code>size</code>, <code>isEmpty</code></li></ul><p>The below methods are optional (classes implementing <code>Collection</code> interface may throw <code>UnsupportedOperationException</code> for the following methods).</p><ul><li>modification: <code>add</code>, <code>addAll</code>,<code>remove</code>, <code>clear</code>, <code>removeIf</code> (takes in a lambda predicate),</li><li>set operation: <code>removeAll</code> (set difference, takes in another collection and remove all seen in that collection), <code>retainAll</code> (set intersection, takes in another collection and retain all seen in that collection)</li></ul><h2 id="List-Interface"><a href="#List-Interface" class="headerlink" title="List Interface"></a>List Interface</h2><p>Extends <code>Collection</code>. Supports all optional operations from <code>Collection</code>.</p><ul><li>membership test: <code>indexOf</code>, <code>lastIndexOf</code></li><li>retrieval: <code>get</code>, <code>listIterator</code> (return a <code>ListIterator</code> type, which extends <code>Iterator</code> and adds <code>previous</code> and <code>hasPrevious</code>.)</li><li><a href="/2022/03/19/Unfamiliar-OOP-Concepts-Adaptor-and-More/" title="view">view</a>: `subList`</li><li>modifying: <code>replaceAll</code></li><li>other: <code>sort</code></li></ul><p><code>LinkedList</code>, <code>ArrayList</code>, <code>Vector</code> implements <code>List</code>.</p><h2 id="Queue-Interface"><a href="#Queue-Interface" class="headerlink" title="Queue Interface"></a>Queue Interface</h2><p>Extends <code>Collection</code>.</p><table><thead><tr><th align="center">Queue action</th><th align="center">Throws exception</th><th align="center">Returns special value</th></tr></thead><tbody><tr><td align="center">Insert</td><td align="center">add (from <code>Collection</code>)</td><td align="center">offer</td></tr><tr><td align="center">Remove</td><td align="center">remove (from <code>Collection</code>)&gt;</td><td align="center">poll</td></tr><tr><td align="center">Examine</td><td align="center">element</td><td align="center">peek</td></tr></tbody></table><p><code>Deque</code> (pronounced as “deck”) interface extends <code>Queue</code> (but honestly we use a different set of renamed methods):</p><table><thead><tr><th align="center">Action direction</th><th align="center">Head</th><th align="center">Head</th><th align="center">Tail</th><th align="center">Tail</th></tr></thead><tbody><tr><td align="center">Deque action</td><td align="center">Throws exception</td><td align="center">Returns special value</td><td align="center">Throws exception</td><td align="center">Returns special value</td></tr><tr><td align="center">Insert</td><td align="center">addFirst</td><td align="center">offerFirst</td><td align="center">addLast</td><td align="center">offerLast</td></tr><tr><td align="center">Remove</td><td align="center">removeFirst</td><td align="center">pollFirst</td><td align="center">removeLast</td><td align="center">pollLast</td></tr><tr><td align="center">Examine</td><td align="center">getFirst</td><td align="center">peekFirst</td><td align="center">getLast</td><td align="center">peekLast</td></tr></tbody></table><p><code>Deque</code> also has <code>removeFirstOccurence</code> and <code>removeLastOccurence</code> as convenient methods. Of course, the set of methods from <code>Queue</code> still do what they should do in <code>Deque</code>.</p><p>How could an insertion operation fail? Sometimes the collections are implemented with capacity limit. Adding upon limit reached results in failure. In this case, <code>add</code> would throw <code>IllegalStateException</code> while <code>offer</code> returns <code>false</code> and cancels the insertion.</p><p><code>PriorityQueue</code> implements <code>Queue</code>.</p><p>Queue has a dedicated interface while stack does not. In Java, stacks are represented in Java with the <code>Stack</code> class (and the generic version, of course). <code>Stack</code> extends <code>Vector</code> which implements <code>List</code>. Unlike <code>Queue</code>, methods in Java <code>Stack</code> class follow the traditional naming: <code>push</code>, <code>pop</code> (throw error if stack is empty), <code>peek</code> (throw error if stack is empty), <code>search</code> (returns base-1 index), <code>empty</code>.</p><h2 id="Set-Interface"><a href="#Set-Interface" class="headerlink" title="Set Interface"></a>Set Interface</h2><p>Implements <code>Collection</code>. Has basically the same set of methods as <code>Collection</code>.</p><p><code>Set</code> has two prominent branches of children.</p><ul><li>The first lineage goes to <code>TreeSet</code>, passing through <code>SortedSet</code> interface and <code>NavigableSet</code> interface.</li></ul><p><code>SortedSet</code> gives the set the ability to be sorted. Thus, we have <code>first</code>, <code>last</code>.<br><code>SortedSet</code> also supports view from <code>headSet</code>, <code>tailSet</code> and <code>subSet</code> (takes in a lower and/or upper bound and return a <code>SortedSet</code> view). Attempts to add elements out of the original bound to the view are disallowed.</p><p><code>NavigableSet</code> gives the set the ability to find closet target. Methods <code>lower</code>, <code>floor</code>, <code>ceiling</code>, and <code>higher</code> return elements respectively <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code> and <code>&gt;</code> a given element, returning <code>null</code> if there is no such element.<br><code>NavigableSet</code> has an additional view <code>descendingSet</code> and an additional iterator <code>descendingIterator</code>.<br><code>NavigableSet</code> also supports deque-like methods <code>pollFirst</code> and <code>pollLast</code>.</p><p>Finally, <code>TreeSet</code> is just a <code>NavigableSet</code> implementation using <code>TreeMap</code>. Hence, no extra methods are added except for the ones it gets from other interfaces (<code>clone</code> from <code>Cloneable</code> etc).</p><p>The generic version <code>TreeSet&lt;T&gt;</code> requires either that <code>T</code> be <code>Comparable</code>, or that a <code>Comparator</code> is supplied as the first argument in constructor. e.g., <code>SortedSet&lt;String&gt; rev_fauna = new TreeSet&lt;String&gt;(Collections.reverseOrder());</code></p><ul><li>The second is hash sets.</li></ul><p><code>HashSet</code> is actually implemented with <code>HashMap</code>. It has no special methods other than those inherited from father interfaces except for the ones it gets from other interfaces (<code>clone</code> from <code>Cloneable</code> etc). <code>LinkedHashSet</code>, extends <code>HashSet</code>, is just a hash set that also maintains a doubly-linked through all entries to guarantee a predictable ordering.</p><p>Take note: <code>size</code> of all <code>Set</code> belongs to <code>O(n)</code>, not <code>O(1)</code>.</p><h2 id="Map-Interface"><a href="#Map-Interface" class="headerlink" title="Map Interface"></a>Map Interface</h2><p>Independent all previous interfaces, but has similar methods.</p><ul><li>size: <code>size</code>, <code>isEmpty</code></li><li>modification: <code>put</code>, <code>putAll</code>, <code>putIfAbsent</code>, <code>merge</code>, <code>remove</code>, <code>replace</code>, <code>clear</code></li><li>comparison: <code>equals</code></li><li>membership test: <code>containsKey</code>, <code>containsValue</code></li><li>view: <code>entrySet</code>, <code>keySet</code>, <code>values</code> (returns a multiset)</li><li>retrieval: <code>get</code></li><li>others: <code>forEach</code> (takes in a lambda biconsumer)</li></ul><div class="admonition error"><p class="admonition-title">Construction Ongoing</p><p>This is not a finished post. The final version may have drastic differences as compared to this draft.</p></div>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Cheat Sheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misconceptions in Asymptotic Notation</title>
      <link href="/2022/03/20/Misconception-in-Asymptotic-Notation/"/>
      <url>/2022/03/20/Misconception-in-Asymptotic-Notation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>When we write <code>f(n) = O(n)</code> what we truly should write is <code>f(n) ∈ O(n)</code>.</p><span id="more"></span><p>That is because, technically <code>O(n)</code> defines a set.</p><p>This is only one of the various forms of imprecisions in our language using “Big Oh” (arguably the most widely adopted, and the only harmless imprecision I am about to discuss).</p><p>If <code>O(n)</code> is a set, what set is that? Is it the set of all algorithms that runs on linear time? Not really. It also includes all algorithms that runs on constant time. Do not confuses “Big Oh” with “Big Theta”.</p><p>Taking this pedantry one step further: technically <code>O(n)</code> is not a set of <em>algorithm</em>. It is a set of <em>function</em>. It is fundamentally a mathematical concept which could be understood without any context of computer science. To clarify this, we need the formal definition of the “Big Oh” set:</p><blockquote><p><code>f(n) ∈ O(g(n))</code> if and only if there exist positive constants <code>c</code> and <code>k</code> such that <code>f(n) &lt;= c * g(n)</code> for all <code>n &gt; k</code>.</p></blockquote><p>Noticing the parallel between this definition and that of limit, we realizes that this is really a property characterizing the limiting behavior of functions.</p><p>To make things less abstract, we could say <code>f(n) = 3n + 9</code> belongs to <code>O(n)</code> by letting <code>c = 4</code> and <code>k = 10</code>. We could also say <code>f(n) = 999</code> belongs to <code>O(n)</code> by letting <code>c = 1</code> and <code>k = 1000</code>. However, when we try to do the same thing to <code>f(n) = n^2</code> we would fail.</p><p>Of course, “Big Omega” can be defined similarly, and “Big Theta” is just the intersection of the two previous sets.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Principle </tag>
            
            <tag> Asymptotic Notation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Batch Encoding Change via Bash</title>
      <link href="/2022/03/11/Batch-Encoding-Change-via-Bash/"/>
      <url>/2022/03/11/Batch-Encoding-Change-via-Bash/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>How to batch convert file encoding in Bash.</p><span id="more"></span><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>I have been using MCVS as my primary IDE for Unity Development for a long time while I mostly uses VSCode for other work. It just occurred to me, today, that I probably should give VSCode a try on Unity to see how they orchestrate with each other.</p><p>I switched, but a problem ensue. It turns out that all my <code>.cs</code> files are encoded with GBK (I do have some non-Latin characters in this particular project) and VSCode attempts to open it with UTF-8. Of course, I would easily switch the encoding in my VSCode by doing <code>&quot;default_encoding&quot;: &quot;GBK&quot;</code>, but I do not want to use GBK for ALL projects (For this project I have non-Latin characters because I am collaborating with a non-English speaking developer, but that is not true for my other projects). The other option is to save with UTF-8 encoding on a file-by-file basis, but that is just tedious.</p><p>I have to find a way to batch convert my file encoding, and Bash seems to be the way to go.</p><h2 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h2><p>After some research I discovered the <a href="https://www.ibm.com/docs/en/aix/7.2?topic=i-iconv-command"><code>iconv</code> command</a>. Hence, my strategy would be using <code>iconv</code> with <code>find</code> to perform a conversion for all my files. Initially, I tried</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span> <span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">find</span> -type f -name <span class="token string">"*.cs"</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span><span class="token operator">>></span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$file</span>"</span><span class="token operator">>></span> <span class="token function">mv</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token string">"<span class="token variable">$file</span>.gbkold"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">iconv</span> -f GBK -t UTF-8 <span class="token operator">&lt;</span> <span class="token string">"<span class="token variable">$file</span>.gbkold"</span> <span class="token operator">></span> <span class="token string">"<span class="token variable">$file</span>"</span><span class="token operator">>></span> <span class="token keyword">done</span></code></pre><p>It worked for the most part but this won’t work with files with path that contains spaces (I realized this since I <code>echo</code> the files names). Luckily I committed before performing this destructive operation, so I easily reverted all changes by <code>git checkout -- .</code> and <code>git clean -f</code>(removing all created <code>.gbkold</code> files). Then, I tried,</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span> <span class="token function">find</span> <span class="token builtin class-name">.</span> -iname <span class="token string">"*.cs"</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token function">file</span><span class="token operator">>></span> <span class="token keyword">do</span><span class="token operator">>></span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$file</span>"</span><span class="token operator">>></span> <span class="token function">mv</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token string">"<span class="token variable">$file</span>.gbkold"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">iconv</span> -f GBK -t UTF-8 <span class="token operator">&lt;</span> <span class="token string">"<span class="token variable">$file</span>.gbkold"</span> <span class="token operator">></span> <span class="token string">"<span class="token variable">$file</span>"</span><span class="token operator">>></span> <span class="token keyword">done</span></code></pre><p>This read file paths by line and is unaffected by spaces in path. This commands works, and most files are successfully converted. For one file or two, <code>iconv</code> tells me that it failed to convert, so I have to manually save them with UTF-8 encoding (this is simply done by copying everything from the <code>.cs.gbkold</code> file to the actual <code>.cs</code> file and save with UTF-8 in VSCode - Now you see why I save an older copy of my files.)</p><p>I only converted everything I wrote, without touching <code>.cs</code> files in the Plugin folder which contains some third-party extensions like DoTween.</p><h2 id="Clean-up"><a href="#Clean-up" class="headerlink" title="Clean-up"></a>Clean-up</h2><p>In principle this should have no effect on the original Unity project. My game still plays as per usual.</p><p>Now, after making sure everything works, I move on to delete the temporary files by</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span> <span class="token function">find</span> <span class="token builtin class-name">.</span> -type f -name <span class="token string">"*.gbkold"</span> -delete<span class="token operator">>></span> <span class="token function">find</span> <span class="token builtin class-name">.</span> -type f -name <span class="token string">"*.gbkold.meta"</span> -delete <span class="token comment">#Since I opened Unity after generating the .gbkold files, Unity have made .meta files for them</span></code></pre><p>Note that <code>rm *.gbkold -rf</code> will not work! We are removing files recursively, not directories.</p><p>Nice! I end by doing <code>git commit -a &quot;Switch to UTF-8&quot;</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大家都有病（下）</title>
      <link href="/2022/03/10/%E5%A4%A7%E5%AE%B6%E9%83%BD%E6%9C%89%E7%97%85%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2022/03/10/%E5%A4%A7%E5%AE%B6%E9%83%BD%E6%9C%89%E7%97%85%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>我们这地球上的人，从出生开始，就一直在鬼门关前面排着队。医生的作用，则是把付钱给他的人拽到队伍后面去。</p><span id="more"></span><h2 id="12-19-PM-药店内"><a href="#12-19-PM-药店内" class="headerlink" title="12.19 PM 药店内"></a>12.19 PM 药店内</h2><p>“芡实只有 178g 罐装的？”<br>“啊？”女药剂师走过来，“什么？”<br>“芡实，”白鹭重复了一遍，“只有这种包装？没有散称的？我们要不了这么多。”<br>那个三十余岁的白袍女子从白鹭手中接过玻璃罐，想了五秒钟。<br>“没别的。”药剂师似乎是才反应过来应该摆出不耐烦的表情了。显然，我们打扰了她的午间休息。<br>“那就拿这个？”白鹭征求我的同意，我点头。我还能说什么？再去下一家药房？三十一块钱，不能刷医保。<br>就这样吧。<br>“其他都买了。午时茶？黄连素？B2？都有了？”<br>“买了 3 天药量。走吧。”一共 46 块钱。那一小罐就占去三分之二的花销。<br>“罗老太婆开的药倒是都不贵……”白鹭边把围巾围回项上边说，“不过，黄连素不也是寒性的吗？你受得住？”<br>“哎。无所谓。反正还年轻。”我假笑。<br>我勉强想打趣。可是这并不成功。这么多年，我在她面前从来幽默不起来。这一点，我对自己也很纳闷。面对某些人我便能幽默自如，可是面对某些人我却会完全丧失幽默能力。说是人格分裂大概是说严重了，不过我真的很纳闷。<br>我看了看表，距离拿结果还要大概两个小时吧。我不知道接下来做什么好，这种境地不是尴尬二字就能形容的。<br>“你自责吗？”走在街上，她突然这么问我。<br>“自责什么？”<br>“自己作死呀。”白鹭仿佛展示一个十分显而易见的道理给我看一般摊开了手，“要不然怎会得病？”<br>“你也这么想吗？”<br>“不不不。我没有这么想，我是估计别人都会这么想。”她掏出手机，开始搜索附近的餐馆，手指一会儿就冻得通红，“我要是那么想，可不就打自己的脸嘛。就说我自己，我其实是很自责的。要不是我太蠢……不过责任其实全不在我。若是世人要责备一个失足少女的道德而不谴责那个王八蛋做了什么，这个世界就完了。”<br>“还真的有这么些人。”我尖刻地说，“但是我说兄弟啊，创伤已经不可逆转了。物理上……好像还有修复术什么的。我是指精神上的创伤，已经不可消除了。”<br>“没办法了。后悔也来不及呀。”<br>这时候她完全不像是三年前哭哭啼啼的样子，竟然可以直接就事论事。<br>也许失足少女有着道德的保护算不得罪人，但病人终究是罪人。毕竟，可怜之人必有可恨之处。为什么你会病呢？追求这个问题的答案时，人们仿佛统统忘却了蝴蝶效应的荒谬之处，无限地延伸着自己的推理逻辑，最终的一环只能指向病人本身。你自己问题了，不怪你，难道怪我吗？自己不注意身体？自己没长大，不懂得照顾自己？于是，你要么就是脑子有问题，要么就是心灵有问题。<br>要我说，应该去怪上帝，毕竟他才是始作俑者。若说要是自己注意保养我就不会病，不如说要是上帝没造我我就不会病更痛快些。我没保养自己这一论断并不比上帝造人这一论断的确定性高多少。<br>“没办法了。后悔也来不及呀。”我重复她的话。</p><h2 id="12-54-PM-粥店内"><a href="#12-54-PM-粥店内" class="headerlink" title="12.54 PM 粥店内"></a>12.54 PM 粥店内</h2><p>我们最后选择了喝粥。为——我——着——想。毕竟，少油少盐少糖不能吃牛羊肉不能吃辛辣不能吃冰热这么一套规矩下来，在外面餐馆能找到的，也只有粥了。<br>所幸我们都还算爱喝粥。<br>唯一不满足的地方，就是粥店嘈杂而且位置不多，我们只能分开坐。端着一个砂锅站在她旁边吃仿佛又太不像样，便就干脆分开。其实暂时分开也好，我们可以有一些空闲来安置自己头脑中的思绪。<br>其实这一切的思绪都是不理性甚至傻气幼稚的。健康地活着不好吗？是好的。死总归是消极的。我能想到一千种观点来反驳自己。比如经济学观点：理性来说，不论此情此景当下现状如何，人能做出的最理性选择都是健康活着——前面所受的多少苦难都早已是沉没成本而不能成为衡量要不要活下去的因素——就像因为怕雨所以花钱预定了室内球场的人看到那天其实艳阳高照比室内舒服，理性来说他不论预定费多贵都应该改去室外打球。<br>可是这种理性和气象学家的模型一般仅供参考。<br>我回忆起来自己对于医院的印象。我才意识到，罗老太婆的那个破败的诊所，和以前我的小镇上的社区医院竟然如此相似。大概是什么政府工程同一批建起来的社区医院吧。现在这些大多已经废弃，只有老人还在里面。<br>怪不得不用挂号，因为原来挂号的人都不在了。<br>皮蛋瘦肉粥端上来了。份量有点少。粥的话，我总是可以吃很多——可是今天算了吧。<br>在我的稀薄印象中，小镇诊所的玻璃门前总是能听见哭声。孩童们，或坐在婴儿车里面，或被家长抱着，或双脚站在地面抱着父亲的大腿，一声声哭泣恳求着不要走进那间屋子。哭泣的音调从高昂到低沉都有，但是哭泣的内容惊人地相似：“我不要”。小时候，每每路过那个街区，我都能听见一声声的“我不要”。惊人地相似。春季，该打疫苗的时候，孩童们的“我不要”则更加撕心裂肺。<br>我也曾是他们中的一员，可是我要面子。我不愿让人看见我落泪。我父亲只要看见了我哭泣，便会加倍地责骂我。所以我不哭，哭也没用。<br>可是，就现在，我一勺一勺地把粥送到嘴边吹凉，再送入舌尖，我边吃边看着玻璃门对面的马路，马路对面的一附院。大医院的门口怎么从没听见过哭声呢？哭声都在里面呢。啊，不是医院里面，不是病房里面，而是身体里面，心里面。孩童们为扎针的痛苦哭泣，而真正的病人们正在为扎多少针都治不好病默默地在心中落泪呢。每个人都有每个人的问题吧。<br>“小伙子。”我听见一口浓重的男声北方腔。<br>我猛地转过头。<br>“小伙子，要不要换位置？”刚才叫我的大哥就坐在我旁边，看相貌，对方三十出头。<br>“换什么位置？”我一下没反应过来，还以为是要和我互换位置——这有什么意义呢？<br>“换位置啊！让你女朋友坐过来？”那北方腔仍然不减。<br>我这才明白。原来刚才白鹭和我在门口找座那个纠结样子被他看着了，这人是想展示善意呢。<br>“不用了。您误会了，她是我同学，陪我过来看病，”我说，“就这么坐吧，别麻烦了。”我这几年受过最多次数的两个误会就是：1.我是大学生；2.她是我女友。我已经见怪不怪了，往好处想，也许这说明我长得比较成熟吧。<br>“你也是来一附院看病？你哪里不舒服啊？”他仿佛没有一丝尴尬地，自然地和我聊了起来。<br>“吃饭说这个可能不太方便吧。”<br>我没想理他，只想喝粥，想问题。谁知道他的话匣子合不上了。</p><h2 id="13-14-PM-粥店内"><a href="#13-14-PM-粥店内" class="headerlink" title="13:14 PM 粥店内"></a>13:14 PM 粥店内</h2><p>“……于是我就跑到南昌来，南昌有大医院，一附院，这里最好的医院。一附院都治不好，那就得去更大的大城市。”<br>我低头喝粥，顺便点个头。他从家境身世讲起，已经这么讲了五分钟了。<br>“一附院。我就排队哟……头天晚上置办起那个褥子来，在这里排队。就是那个黄主任的号，特别难搞。总算是排上了。我进去，黄主任人挺好，说得挺仔细，可是他不看我的片子。”他伸手要去袋子里拿自己的 X 光片，发出哗啦哗啦一阵响。“说要重新检查，别家小医院检查的不算数。我说也行吧，重新检查就重新检查。可是拍片子又要排队。要等上一礼拜，我就在医院里面打地铺，冷死个人。得亏我没让我老婆来。”<br>我已经成功地引起了白鹭的注意。她正在不时地用警惕的目光向这边投来。<br>“前天拍片子，完事黄主任又不在。今天还得重新挂号，才挂上黄主任的号。片子给人看了，人说是有阴影，是癌的可能性挺大的。又要开检查，还要检查血和尿什么的，搞什么‘确诊’。我给我老婆这么一说，她死活要过来看我，拦都拦不住。今晚就要坐大巴过来，我还不知道上哪去给老婆踅摸住处。”<br>我的粥碗差不多要见底了。听见“癌”这个字，我已经没有什么感觉了。姐姐得过乳腺癌，把瘤子拿掉就是了，拿掉不就好了。治不了，无非也就是双腿一伸。<br>死其实是最不折磨人的惩罚。<br>“女人哪，就是喜欢大惊小怪。医生说癌就是癌？傻女人吓得要死。以前我们盘子上的黄铁匠，医生说肺癌，活不长了，还不是健健康康活到六十岁！”大哥唾沫横飞地讲述着，“我能有啥事？现在还真有事了，小伙子，你是本地人不？这附近哪有便宜住处没有？”<br>“我帮您查查吧……”我心不在焉地掏出手机，然后才意识到自己的愚蠢。网络上是查不到医院附近的苍蝇旅馆的。<br>癌症又要降临到一个人的头上咯。我自以为是地心想。但愿是晚期吧！早期的话，这一线生还的希望又要拖垮一整个家庭了。希望他也就这么乐呵下去，没有痛苦，然后突然一天，嘎嘣。这样是最好的安排了。这不过上帝往往不这么安排。到时候，后悔也来不及呀……<br>我们这地球上的人，从出生开始，就一直在鬼门关前面排着队。医生的作用，则是把付钱给他的人拽到队伍后面去。我不理性地害怕过这种有违天意安排的行为是否真的是好的。或是，没有一个医生能真正改变我们的排序，我们只是自我安慰而已？<br>不管怎么说，要是患上绝症，我大概会很难过的。可是我也不会那么难过。也许我还有几个月可以活。我该要把自己爱做的事情都做了，想要说的话都说了；我要揭露我所看到的一切恶，体味我认识的一切善和美，而不用瞻前顾后、畏首畏尾。若是身体很痛苦，我便选择安乐死，伦理道德是留给活人的事情。我不会把道德难题加给任何人——你们只需要假装没看好我让我偷偷吃了安眠药即可。我始终觉得，和一个行将就木的人谈伦理道德、尊严气节，总是不免虚伪做作。禁止自杀的法律是很好笑的——抓到怎么处罚？放到牢里去浪费纳税人的钱？像英国一样把自杀未遂的人定罪处死？<br>哎，这么一说，看来大家问题都不少。</p><h2 id="13-27-PM-白鹭的家"><a href="#13-27-PM-白鹭的家" class="headerlink" title="13:27 PM 白鹭的家"></a>13:27 PM 白鹭的家</h2><p>“所以你就一直在那傻听？”<br>“听听也无妨，我现在最不缺的就是时间。”我说，“话说回来，怪不得你对这罗氏诊所这么熟，原来你家就在这附近嘛。我都不知道你在这也有房子。”<br>“不是，我妈妈租的房子，方便上班。她和奶奶住。奶奶身体不好，妈妈住这里方便照顾她。”<br>“哦……”<br>我们拾级而上，白鹭家住五楼，在取造影结果之前，我们就在室内等着，暖和一些。<br>“没人吗？”我把鞋子收拾进屋。<br>“没。”<br>屋子是上个世纪常见的格局：客厅小，房间大。这样的格局显得十分局促狭小，但是实际上更加实用。毕竟，客厅大是没什么用的一件事。我走进房间。房间里没什么自然光线，白天也需要开着灯。<br>“你做你的事咯？”我说。<br>估计她还有很多要复习、要写的作业吧。我感到十分愧疚。对于高三学生来说，一个上午的时间也是很宝贵的啊。所有的高三学生都在进行这一场经典的零和游戏，能参与其中本已经是幸运。<br>我就坐在床上。这个房间里也并没有第二张椅子。我想要看一会儿书，可是我情愿躺下来睡一会觉。我必须要做点什么，若是不做什么，我的精神就没办法维持下去，便会昏昏入睡。这大概是精神状态不佳的集中体现。转念一想，为了活着而需要的锚点，其意义也差不多。<br>“你小时候老生病？”<br>“嗯？”她的笔停住了，然后好像才回过神一般，“啊，是啊。我也是过敏体质。这是遗传的。我妈妈也是。这种体质容易生病。”<br>“过敏……”<br>“我的过敏体质比你的严重多了。小时候我就喝不得奶。我妈抱着我喂奶，我就一边喝，一边拉。啊哟……我妈的身上就没干过。”<br>“乳糖不耐？我也有。”<br>“不是。就是喝不得。后来我妈给我泡什么羊奶，什么脱敏奶粉，还是不行。我奶奶说，这是过敏！我妈才知道。”白鹭说，“我，就是不能喝奶。”<br>“你奶奶学医？”<br>“对，是。就算不是，久病也成医——她也是过敏体质。可是我妈没经验，她是第一次生小孩啊。”<br>“诶，你奶奶呢？身体怎么样？”<br>“出去了。身体不好更要出去锻炼啊。”<br>“这么冷的天啊……老人家一个人？安全吗？”<br>“安全，室内活动，做自己的一点点小爱好。她在那里，其实我更放心些。”<br>“打麻将？”<br>“不是啦。她比较笨，不会打麻将，教她也教不会——我试过了。”<br>“我还没见过你家里人呢，除了你妈妈。”<br>“你见过我奶奶的。”<br>“以前来你家玩的时候吗？”<br>“啊，大概是啊——我继续跟你讲故事吧。你记得，我那个老房子前面，门口有三个树桩吗？就是那三个‘梅花桩’嘛！以前老在那里玩的……”</p><h2 id="13-55-PM-白鹭的家"><a href="#13-55-PM-白鹭的家" class="headerlink" title="13:55 PM 白鹭的家"></a>13:55 PM 白鹭的家</h2><p>其实我觉得我睡着了。这是一种半梦半醒似睡非睡的状态，简单说，我知道自己在做梦，可是梦里的我不知道。<br>这是一个世界里面发生的事情。我自己来到——或自己创造的一个世界。其实我不是参与者，而是旁观者；如果我愿意，我可以变成主宰者。<br>我看见白鹭跳出来了。她要给我看那三棵柚子树，老屋门口，栽着三棵柚子树。柚子树的影响模糊不清，其实我也根本就没有见过在树上的柚子，或者说我没见过长得很高的果树。可是那树就这样以一种模糊符号的形式在我眼前——或者思维中——呈现，那是一种强加给我的符号，好比对企鹅形容火。<br>她把裤腿卷起来，露出脱皮溃烂的腿。那腿青红相间，凄惨不已，血、痂、肉模糊在一起，说是被千万条虫噬咬过也不夸张。我们要怎么办呢？显然这是一个有意义的符号。我们肯定要把这种情况给扭转。什么东西不对了，出问题了，而我们需要解决它。而白鹭说话了。<br>“那是我爸栽的树。栽了有三四年了哟，柚子树你也知道，要好几年才结果子。好不容易长那么大了……”<br>我该要抬头看看这树。我记得我是看了的，可是记忆中对此类知识的缺乏让我看了相当于没看。记住，我不能获取我不知道的信息。<br>“浑身是刺的绿色毛毛虫。”我要找浑身是刺的绿色毛毛虫。树上全部都是那种毛毛虫，“别碰！”耳边响起一个声音，我飞了起来，于是我看到枝丫之间更多的毛毛虫。我当然不会碰它们，真是恶心死了。<br>绵谷问她：“夏天了，你怎么不穿裙子呀？”她把裤腿又卷起来，露出那一对人间惨剧，然后放下。我们被吓坏了。但是我们忘了。<br>“树上长那种虫子……就是浑身刺的绿色毛毛虫。我根本就不接近那树，躲得远远的。可是每到夏天，我腿就会烂。简直是不成人形，可惨了。我根本就不接近那树！”<br>画面转到一附院。我认为，此时应该是我获悉病情真相的时刻，可是报告单迟迟不发给我，我只好坐在等候区发呆。左边是柜台，右边，却又是那郁郁葱葱的三棵柚子树，长了毛毛虫的柚子树。我认识那种虫，蜇人可疼了。我看到白鹭的父亲挥起斧子，一下一下地砍那棵树。可是我没见过她的父亲，所以取而代之的是一个男人形象，也许有几分像是我的父亲；抑或是，只有一个贴着“父亲”纸条的黑影在那里摆动着。<br>父亲每砍一下，树便摇晃一阵，几条绿色毛毛虫便被抖动下来。那父亲不知何时又幻化成了绵谷，绵谷朝我笑着，那是十岁的他，眼神中还没有那种邪恶。可是我是十七岁的我自己，我不会去接近他。而白鹭——白鹭消失了——我感觉她在哪里哭泣。<br>三个木桩出现在眼前了，我们三个给木桩起名叫“梅花桩”。这似乎从哪本小说上看来的什么武功的名字。然后呢？白鹭可以穿裙子了。我们夏天也看不到毛毛虫了。问题解决了。大家都高兴了。可是我隐隐约约感觉还有一件事没有做啊。<br>“走了，差不多该走了。”白鹭把我摇醒了。</p><h2 id="14-35-PM-急诊创伤大楼"><a href="#14-35-PM-急诊创伤大楼" class="headerlink" title="14:35 PM 急诊创伤大楼"></a>14:35 PM 急诊创伤大楼</h2><p>“其实，我给你带了礼物。”走在去一附院的路上，白鹭突然这么说。<br>“在哪？”我看她手里没拿东西。<br>“刚才本来想给你的。给我忘了。在家里。”<br>“等会儿去拿吗？”我有点不好意思。<br>“懒得再回去了。”她朝右边一指，指向急诊创伤大楼的方向。<br>“好吧……要去那里吗？”她点点头，显得很不自然。她显然不习惯用语言指路。这几年我发现自己在外也有用手（而不是用语言）给人指路的习惯，多半就是从她这里染上的。<br>我们走进大楼内，电梯间仍是一如既往拥挤。<br>“哎。就不想问问我给你准备什么了？”<br>“书？大家都送我书。其实我更想要个抱枕或者娃娃什么的。”<br>“绘本，书名叫做《大家都有病》。”<br>“哇。”我礼节性地表示了一下欣喜。<br>三楼到了，随着电梯门的开启，我看到等待结果的队伍已经排起来了。一股惰性突然爬上我的腰，我挪动自己的身体，很不情愿地站到了队伍的尾端。<br>“真的不回去拿书吗？我有点想要。”我试探性地说。<br>“不回去了吧。”白鹭说，“错过了应该也是有道理的。不过我记得其中的一小段，我讲给你听吧。”<br>队伍缓缓地向前蠕动，纸张翻动声、脚步声、工作人员的呵斥声都非常清晰。<br>“里面有一个人去找医生，他对医生说：‘大夫！我怀疑我得了肺癌、大肠癌、肝癌、胃癌、胰脏癌、骨癌、胰腺癌、淋巴癌、口腔癌，天哪！我到底先治哪一个？’”<br>“然后呢？”我问。<br>“然后，大夫说，‘你先治焦虑症。’”<br>“然后呢？”<br>“然后就没了。”<br>“啊。”<br>“有点无聊。”她说。<br>前面的柜台在叫我的名字了。我要去拿结果了。<br>我身不由己地向前走。恐惧吗？不恐惧。我都知道那上面会写什么了。攥着白色的小纸片我急忙向回走。<br>“你拿这个的表情，就和我拿成绩单一样。”白鹭笑道，“不敢看？”<br>“哪有什么不敢呢。猜也猜得到上面怎么说。”<br>白鹭从我手中夺过报告单，三下两下捋平。<br>“不好吧，毕竟这是我的大肠。”我犹豫地说。<br>我自己想观察她脸上的神色。可是她没有给我观察的时间，她只不耐烦地扫了一眼，立刻又把单子攥在手中。<br>“你猜对了。‘未见异常’。”白鹭把单子递回给我。<br>仿佛确认中奖号码似的，我又确认了一遍，白色的纸上写着大堆看不明白的术语，但是最下方确实写着“未见异常”四个汉字。大概只有这一行是用来给人理解的吧。<br>“那怎么办？”<br>“还能怎么办？就这样吧。我走了。”她说。“你怎么回去？”<br>“坐公交车吧。”<br>“行吧。”她便迈开了腿。我只能跟着向下走。这一次我们没坐电梯，而是走逃生楼梯。<br>我的心中却是不知如何是好的一种状态。虽然我发现，我大部分时候都处于一种我很难用语言描述的奇特心情中，这种时刻还是很特殊甚至很值得喜爱的。就像是钢琴曲一样，作为人世间的东西，值得喜爱，让一个行将就木的人最是留恋。这时候，哪有选择不选择自由不自由理解不理解的分别呢。<br>“活着啊。”她在路口摆摆手。“下一次还不知道什么时候见面。”<br>“至少活到下次见面你把礼物给我。”我苦涩地说，“你学习要用心——”<br>“好好好。”她钻进小巷子里不见了。<br>其实刚才，我很想说点什么意味深长的话来作为告别语，可是这时候我一句话也想不起来。<br>哎呀，最近脑子真是有问题了。</p><div class="admonition info"><p class="admonition-title">作品信息</p><p>《大家都有病》，原作于 2018 年 12 月 12 日，在 2022 年 3 月 9 日重新润色。</p></div>]]></content>
      
      
      <categories>
          
          <category> Non-technical </category>
          
          <category> Mood </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大家都有病（上）</title>
      <link href="/2022/03/10/%E5%A4%A7%E5%AE%B6%E9%83%BD%E6%9C%89%E7%97%85%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2022/03/10/%E5%A4%A7%E5%AE%B6%E9%83%BD%E6%9C%89%E7%97%85%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>我真的希望我们之间随便谁赶紧接个电话离去算了，可是今天是周日，现在是中午，外面有阳光，但是很冷。</p><span id="more"></span><h2 id="10-55-AM-一附院门口"><a href="#10-55-AM-一附院门口" class="headerlink" title="10:55 AM 一附院门口"></a>10:55 AM 一附院门口</h2><p>“医生怎么说？”<br>“星期天呐，本来就没什么正经医生值班。”我叹了口气，“到现在为止报告单上都是这四个字，未见异常。都是未见异常。”<br>见她没作声，我就继续往下讲。<br>“医生也不说什么。实话说我也找不到人去问——刚从全麻中醒来，我连是被谁推出来的都不知道——大概是实习生吧。医生……医生怎么会做上台呢。不管怎么说，造影结果要等两三个小时吧，现在刚做完，要出结果估计那就得等到他们下午两点半上班了。”<br>“查不出嘛……你要不要试试看中医？”她漫不经心地答话。“哎，那开了药么？”<br>“没用的药，我都吃过了。中医么——再说吧。”我端起茶碗，“今天还得谢谢你妈妈了……说到中医，你知道什么好去处嘛？我倒是认识一个治鼻炎特灵的，挂他一个号就是四百块……”<br>“不谢。”她仿佛没在听我说，直接打断了我，“现在医院和警察局不都是这样，不找人你就排着队吧。这也就是我力所能及的事情，就算是帮老朋友一把。你不是请我喝茶了嘛。”<br>我没什么好说的了，但也不愿就这么离开这家店。毕竟花了十几块钱买了柚子茶，才坐一会儿就走实在划不来。可是我确实也没什么好说的了。尽管从小学到初中白鹭都是特别要好的朋友，初中甚至当了同学，可是两年来来去去早已经断了音讯；这一次有求于人才向她开口，已经是天大的不好意思了。<br>可是我们还是对那两年的雁断鱼沉不置一词。没人提起那个尴尬的中断，大家又仿佛是昨日还在一起嬉笑打闹的老朋友一样对待着这个特殊的今日。我觉得最好也别说，这种不容置喙的场合。<br>“我还真知道。”她突然说。<br>“什么？”<br>“我说，”她这一次一字一顿地说，“我知道一个中医，特别灵。社区小医院里面的老医生，叫做罗老太婆什么的。我可以带你去！反正闲着等结果也是等结果。”<br>啊啊，真的有嘛。其实我并不在乎。去就去吧，病急还乱投医呢，我想。<br>“……而且不用排队。可是，你又指望医生给你查出什么来呢？”白鹭问我。<br>今年的冬天不是一般的冬天，雨水很多，天很暗，空气很冷。我们两人都包裹着围巾和口罩，但是在这寒风中我们仍然感觉到寒意。<br>“一附院都说你没问题了。”<br>“大概是有什么方子调养咯。病……谁知道。”<br>就像恍然大悟一般，人，在生命中，或早或晚会认识到这么一个事实：有些被我们当作理所应当的规律其实并不存在。我们有发达的刑侦系统和敬业的警察，完善的医疗技术和白衣天使，充足的教育补贴和园丁般的教师，但是丢了手机可能从分局跑到总局还是找不回来，得了病可能努力寻医问药也毫无效果。<br>这是一种突然得到的感悟：原来这个世界没有人在给你做出这么一个保证，保证你的问题一定有相应的社会机构可以解决。这个事实突然让我感觉害怕，就像是上个世纪的美国人突然发现自己国家没有纳米化学品的防控法律一般害怕。这并不是对于社会的愤青式的批判，而是更偏向于认识论层面的感悟：原来世间的一般问题（甚至不是什么特殊问题），都不一定有解决的。这对从小生长在唯物主义和因果律环境中的我是很大的打击。<br>白鹭回头望了一眼南昌大学第一附属医院大厦上金光闪闪的牌匾：门诊部。我跟上她。我没有让她来陪我，只是想小小地走个后门而已，但是我们却怎么也想不出分开的什么理由。人世间就是充满了如此的尴尬境地。而这种问题大概也是没有所谓最佳处理办法的，就像是没有人保证某种疾病可以有个最佳治疗方案一样。<br>荒谬。而我并不在乎。</p><h2 id="11-02-AM-小巷内"><a href="#11-02-AM-小巷内" class="headerlink" title="11:02 AM 小巷内"></a>11:02 AM 小巷内</h2><p>“是不是你心理作用啊？”白鹭认真地说，“就是老觉得自己有病……”<br>“不是。”我跟着她转过一个弯，眼前的街道瞬间比刚才破败了许多，“很多人也这么说。不是。绝对不是。”<br>“看看再说吧。你父母周末也上班？不来陪你？”<br>“是哦。他们别也积劳成疾了就好。”我突然想起前几天在飞机上看的那本《过劳时代》。<br>我们转过一个又一个弯，我能确定，我们来到了只有很熟悉本地地形的人才能走得进来的小巷子，因为这样的小径是不会记载在地图上的。在南昌，高楼大厦和不知名的小巷只隔五分钟距离，这种事我已经慢慢习惯。<br>“你怎么知道这里的？”我问她。<br>“也是被别人介绍来的。说这个罗老太婆特别厉害。我小的时候，淋了雨以后高烧不退，在儿童医院住了半个月的院花了小一万，不见好转。到这里，罗老太婆给开了方子，第二天就退烧了。特别神。我小时候总是生病，好多病都是这罗老太婆看好的。她人很好。”<br>只是我不确定自己是否有问题呢！未见异常。这四个字，特别让人烦恼。<br>我的思绪的大多数却被她的话吸引。原来她小时候是个病秧子？我努力对她进行回忆，可是我几乎无法想起她生病的模样。这两者不能联系到一起。我想，也许我该去问问绵谷——只是不知道他这家伙，现在又在哪里飘荡。小时候牢不可破的三人团体，现在已经分崩离析。<br>“这事怎么以前从来没听你说过？”<br>“很小的事情了。再说可能以前光顾玩了吧。”白鹭回头做了个鬼脸。真不巧，被这个时代脸上人人都有的口罩遮住了。<br>她停住了脚步。仿佛想要分辨方向。四周都是一样的平房，一样的樟树。樟树到了冬天要落叶，于是满地都是灰枯的病叶和一踩就发出吱吱声的树籽儿。<br>“看来大家都病过。”我说。<br>有问题，是吧，我说了，这活着就有问题。哪都有问题。谁都有问题。可是我们找不出问题。这才是最大的问题。<br>“应该说，看来现在医药行业都是一群王八蛋，只顾着赚钱。没听说吗？他巴唑又停产了，没钱赚，这么好用的药别人药厂就不生产。医生呢？先带你溜一圈检查捞一波钱再说！排两个小时队，和医生说两句话。”<br>“别这么说。也有好医生吧。”我有些尴尬，“你妈妈不也是医生嘛。”<br>“算是吧。”她欲言又止，指向前方，“到了。就这里。”<br>我抬头看向前方，险些把“罗氏诊所”四个字看成了“未见异常”。</p><h2 id="11-11-AM-诊所内"><a href="#11-11-AM-诊所内" class="headerlink" title="11:11 AM 诊所内"></a>11:11 AM 诊所内</h2><p>只有一条走廊，走廊的两边是一个个门口装着金属门牌的房间，挂号和取药的窗口分置在两边，前面是分别都安置了玻璃和生锈的铁栏杆。<br>仿佛是二十年前的医院。<br>我瞥了一眼表：上午 11 点刚过。医院十分静谧，仿佛没有人在里面一般。白鹭领着我直接忽略了挂号收费处，径直打开“耳鼻喉科”诊室的门，我迟疑了一刹那，跟着走了进去。<br>“还好。罗老太婆在这里。”白鹭松了口气，“去跟她说说吧。”<br>我面前的确坐着一位穿着白大褂的老年医生。<br>“不用……挂号什么的？”我问白鹭。<br>“不用。”罗老太婆说话了，是一种尖细的声音。我吃了一惊。这看上去七八十岁的老人能发出这么尖细的声音？从我眼角的余光中，我同时细细地品味着白鹭线上的神情。她显得局促而紧张。<br>“你们谁看病？”<br>“我。”我便接过老人递过来的小板凳，在她面前坐下。这么一来，我便比她矮了一个头。白鹭似乎显得很后悔带我到这里来，正在局促地观察着这小房间里面的一切：红锈斑斑的保险柜，桌上堆着的黄黄白白的大本子，半开的木质抽屉。我把右手听话地放到那方小枕头上，老人的几个指头压在我的手腕上，冰凉。白鹭没说什么。我又张嘴，老人拿着小镜子在我的舌头上找来找去，似乎也没找到什么，我又闭上了嘴。白鹭还是没说什么。<br>我开口了：“医生，我肠胃不好，经常腹痛……”<br>“没什么问题。”老人说。我递上了肠镜报告单，她却不看，只是抓过小本子一直写，一直写。“是不是有炎症？”我又递上血常规的报告单。“没有炎症。”<br>“你是过敏体质啊。”老人看了半晌，终于说了一句话，“淋巴细胞过多。”<br>她看着我的病历：主诉症状——腹痛，胀气，胃中不净感……持续数月……我便觉得我不必说什么了。其实该说的话我也说了千万遍了，也从医生那里得到了统一的回复：注意饮食，好好休息，减轻压力，年纪轻轻，不要担心。<br>“脾胃功能失调。”她总结性地在黄纸上画上一条线。“怎么办呢？”<br>我觉得很好笑，这一切显得都莫名其妙——你问我怎么办？我看向白鹭，她站在我身边十分不自在，那后悔显然更加深刻了。<br>“你平时吃什么啊？”<br>“我很注意饮食了，搭配得很好，辛辣和油腻我都有避开。”<br>“还不够注意。你昨天吃了什么？”老人继续用那令人惊讶的尖细语气和我说话，我发现自己差不多已经习惯了这个声音。<br>“菠菜、羊肉、洋葱、蘑菇……”<br>“蘑菇你不能吃，羊肉要少吃，牛肉不能吃。”老人说，“水果吃了吗？”<br>“呃……橙子和火龙果。”<br>“橙子可以，中性的。火龙果和香蕉你不能吃，寒性的。”<br>“还有什么……”<br>“橘子和柿子也不能吃。糖分太重。水果就吃苹果，中性的，谁都可以吃。”<br>“好……”<br>“你记着！猪肉、鸡鸭肉都少吃。油盐糖都少吃。包菜、土豆可以吃。西红柿可以。菠菜可以，青菜……就是绿叶子的都可以吃。板栗，山药要多吃，可以健脾胃……”<br>我坐着小板凳从低处抬起头来看老人——这一次我是在认真打量。而她还在滔滔不绝。</p><h2 id="11-36-AM-诊所内"><a href="#11-36-AM-诊所内" class="headerlink" title="11:36 AM 诊所内"></a>11:36 AM 诊所内</h2><p>我记录了满满一整个手机屏幕的食物禁忌。老人终于停下了，开始端详着这个房间里面的我们。<br>我的脑后爬上一阵奇怪感觉来——主要是气氛的奇怪。无论怎样，这也不是医院或者私人诊所的气氛。在这里呆了二十分钟到现在，老人还不知道我姓甚名谁。这在动辄填表单出示各种卡片的常规医院里面简直不敢想。我们该走了吗？我把不安的眼神递给白鹭，可是她也和我一样局促。<br>这不像是个医生，倒像是个努力想要完成一件手头上事情的工人。有一点是可以确定的：这位老人与一般医生生活和工作的动机是截然不同的。可是我不习惯，白鹭大约也是。我也不准备相信我看见的任何物品，要不然我是不会为了看消化道问题走进耳鼻喉科的。<br>我的结论：这家医院有问题。<br>“你是老计家的那个小女儿吧，你奶奶也姓罗，是吧？”老人不知何时已经用目光锁住了白鹭。<br>“是。”白鹭抬起头，“您还记得我？”<br>“知道。你爸爸都是在我手上看的病！你这小丫头我怎么不记得？”<br>我也尝试着从她那满脸皱纹中解读出什么，就像是十八世纪那些都仿佛会相面之术的法国作家一样，能从脸上看到人个性中的刚毅和软弱。可是从她脸上我除了看到了苍老什么也看不到，而这一点是并不需要看相之术就可以获悉的。正如她自己所说，白鹭的爸爸都在她这里看病，那她的年纪该有多大，我们心中大概有数。<br>“罗奶奶，他这是没什么病吧？是只需要调理，是吗？”白鹭小心地问道。<br>“这是你什么人？”仿佛又一下忘却了自己刚提的问题似的，老人喃喃道，“没什么器质性的问题。调养得看运气，先吃着这些药试试。吃三天的药，一天三次：午时茶，”她又抓过一张纸开始在上面潦草地书写。我几乎怀疑她有没有整理过自己的书桌。<br>“复方黄连素，”沙沙沙，“再吃点 B2。三天以后再来找我看看吧——”她把纸张塞给我，忽然又想起了什么似的，把小纸头又从我手中抢了回来，“这三天，早晚都喝粥。拿粟米——黑米——”她仍然一边说一边写，“薏仁米，糯米，再放一点芡实，熬粥。”<br>“芡实买多少克呢？”白鹭问。<br>“一两。”老人把纸头塞回给我。“分六次用。这些都是非处方药，我这不卖药，去药店都买得到。B2 啊，别忘了。早晚喝粥。”<br>这真是个诊所吗？这是中医还是西医？我愈发满腹狐疑。<br>“能好吗？”我失口问出了一个人能在问医生时问出的最傻的问题。<br>“好——谁能打包票？”老人仿佛有些声嘶力竭地说，“我也看了一辈子病了。你这是过敏体质啊……”那尖细的语气仍然听得我害怕。<br>我把白鹭揪到一旁：“这罗老太婆——没有老年痴呆啥的吧？怎么前言不搭后语的？”<br>她胆怯地看着我，摇了摇头。<br>“应该没有吧——”<br>“我以前也是过敏体质，大病小病不断，就学医了。所有科目都学。我们是没碰上好时代！”老人突然大喊道，“注意身体吧！”<br>“吱——”桌上的热水壶开始蜂鸣，看来是水烧开了。</p><h2 id="12-02-PM-超市内"><a href="#12-02-PM-超市内" class="headerlink" title="12:02 PM 超市内"></a>12:02 PM 超市内</h2><p>“粟米就是小米吗？”白鹭一边问我，一边在超市的货架上摸找着。<br>“你不上晚自习吗？”我反问。<br>我们却没再说话。我拿起手机开始查询粟米是不是就是小米，白鹭思考着是否应该买散称的米还是包装的米，以及真空包装和半真空又有什么实际意义上的区别。种类太多，多到难以选择。选择往往不是自由而是煎熬。<br>十分钟后我们放弃了。随便拿了货架上看得顺眼的几包米，其实选什么都一样。就像是“今天晚上吃什么”一般，选择什么还不都是一样。<br>有时候，我还真的觉得，某一天晚上，抱着对于明天和未来的不变想法，躺上床睡觉，干脆就不要醒来，岂不是一件十分好的事情。至少，我们免于对于这时间支配的选择的恐惧。选择往往不是自由而是煎熬。<br>“说真，”我们一人手里拿着两个砖头一般的真空包装中的米块，站在收银台前面排起长队。这是一家小小的社区超市。<br>“你真不用上晚自习？”<br>“去不去其实都可以啦。难得聚一下。”<br>“嗯……过得怎么样？”<br>“不就那样。”<br>“去哪个大学，现在可想好了？”<br>“随缘吧。”<br>“哦。”<br>于是我又没了话可说。确实是没什么话可以说了。我真的希望我们之间随便谁赶紧接个电话离去算了，可是今天是周日，现在是中午，外面有阳光，但是很冷。<br>“听你说这病，也有一段时间了吧。”她说，“今年三月份好像是第一次听你讲——”<br>“差不多吧。”<br>“突然开始的？”<br>“是啊。”<br>我用左手的米块磨蹭着右手的米块，发出沙沙的难听噪声；一来一回，仿佛也发出“是——啊——是——啊——”的声音。<br>“有多难受？”<br>“也谈不上很难受——不过还是挺难受的。当然比不上那些得炎症的啦……”我说，“主要是心里难受。说实话，每次听到别人说，你没病，只是心理作用，我就很沮丧恼火。有的时候……”<br>“有的时候怎么？”<br>“有的时候……就是很难过吧。”<br>“好吧。”<br>有的时候……我其实想说，有的时候，我就盼着医生给我诊断出一个什么病，最好是特别吓人的那种。<br>“你和绵谷的事情怎样了？”<br>“还就那样。就算我报复他不成，总会有人报复这个王八蛋。”她长出一口气，“那之后就没联系了。”<br>“这事你还和谁说过了吗？你父母知道吗？”<br>“没法说。我倒是想说啊，没法说。别人不会同情你的，他们只会用固有的思维来理解世界。他们看到失足少女的第一反应是什么——这女孩真是贱、真是放荡。他们不会理解。不会知道我们之间本来有什么样程度的信任，又是基于什么样的关系。”<br>我突然觉得特别悲哀。这一次倒不是为自己。<br>“可是你也瞒不长久。”<br>“你知道的，其实，我也说不好——我说，人的理解能力是很有限的，人倾向把一切东西都套入自己理解过经历过的模板中，所以得到了简化。”白鹭说，“就比如说你——你真的是单纯得了病那么简单吗？还是单纯没病那么简单？有那么简单就好了。”</p><h2 id="12-11-PM-超市内"><a href="#12-11-PM-超市内" class="headerlink" title="12.11 PM 超市内"></a>12.11 PM 超市内</h2><p>我几乎有点希望医生告诉我，你这是癌症，肠癌，胃癌，食管癌，随便什么。拿着这样的检查结果，就连平日里不耐烦的医生也会停下来问你：家属来了吗？这句话从他嘴里温柔地滑落的那一瞬间，你就知道，你被判了死刑。<br>死是我最轻松的活法。被医生判死刑是我最轻松的死法。这样不用背负自杀留下的污点和白眼。不用被自己侥幸的希望从鬼门关拉回来。这是生命被剥夺，我不能选，也不用选。“不能选”则不用为选择负责（去他的社会责任感！），“不用选”则不必为生死选择煎熬生怕自己做错选择。一身轻松地一下超脱出来。<br>选择往往不是自由而是煎熬。<br>“说真的，”我问白鹭，“你想过死吗？”<br>“想过好多次，没敢死。”她干脆地说。我连忙提醒她小声些。<br>“跳楼自杀什么的，这一类。有时候，明天的报纸里面怎么写我我都认真考虑过了。但是我真的不敢。”<br>“不敢跳？”<br>“不敢跳。你可以试试看。真正站在天台的时候我的内心哪还有悲伤，只剩下恐慌和害怕。倒不是怕什么社会舆论，就是单纯不敢往下跳。我不知道为什么。”她说，“要是哪一天我在睡梦中煤气中毒死了就好了。”<br>“我倒也想过。经常想。睡觉的时候想。刷牙的时候想。拿着饭盒去打饭也想。”我说，“不过不是自杀。”<br>“并不奇怪。”<br>“可是还是不能死。怎么活呢？找着自己生命的锚点，或者叫目标，或者叫盼头，或者随便叫什么。怎么取名都无所谓。在这一点上抛弃所有理性，就能活。就这么活下去。”我小声说。<br>“我没明白。”<br>“给人生做出最大的一个不理性的假设，然后，在这个假设下面实施理性。算了，我自己都不知道我再说什么。”<br>“那就不说了。”白鹭回应道。<br>人群总算开始挪动了，看来收银员吃完了饭回来了。这个小超市终于恢复了生机；我们不仅在排队采购，还在等那张两点才能出来的造影报告单。<br>“我呢？”白鹭说，“我是死不了的。我还得考大学，还得画画。以后我会出名，成为有名的画师。到时候我就可以写回忆录了，我这些破事——背叛啊，失贞啊，什么的一股脑儿都写进去，被人误解什么的都写进去，好好地骂他们。我还要复仇。”<br>我根本没在听她说。其实这几年我听过她说太多次这样的话，以至于我都有些麻痹了。我只是看向四周，这是我们很常见的一个动作。我相信这四周总有一般人走马观花一般看不见的东西，而自己总能发现点什么。收银员的头发很乱。后面的宣传喇叭开始了鸣叫，收银桌上铁皮翘起，黑色掉皮的传送带早已报废。桌上花花绿绿的泡泡糖装在廉价的透明球形塑料罐里，等着人们去拿。让一个走出超市的人来说你看到了什么，他说不出。他们什么也看不见；看见了，也不会去理解。<br>收银台前摆满了让人在最后一刻冲动消费的便宜货品，五颜六色。我悲哀地想：我到现在，也还没学会用泡泡糖吹泡泡呢。我到现在，也没明白跳跳糖是不是真的在跳呢。我到现在，也没弄清口哨糖能否真的吹曲子呢。我能就这么死了吗？我突然有点不甘心。我还不能在钢琴上弹《花之舞》、不能在吉他上弹《加州旅馆》呢！我还没去过京都奈良威尼斯布拉格，没去看卢浮宫，没看过金字塔，没触摸过亚麻色长发的小艾琳呢！高等学府的压力，职场的勾心斗角，为人父母的欣慰，缓缓老去的无力，我都还没有亲身经历过呢！</p><div class="admonition info"><p class="admonition-title">作品信息</p><p>《大家都有病》，原作于 2018 年 12 月 12 日，在 2022 年 3 月 9 日重新润色。<a href="https://reimirno.github.io/2022/03/09/%E5%A4%A7%E5%AE%B6%E9%83%BD%E6%9C%89%E7%97%85%EF%BC%88%E4%B8%8B%EF%BC%89/">阅读下半部分</a></p></div>]]></content>
      
      
      <categories>
          
          <category> Non-technical </category>
          
          <category> Mood </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bit Hacks</title>
      <link href="/2022/03/08/Bit-Hacks/"/>
      <url>/2022/03/08/Bit-Hacks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Some bit manipulation tricks.</p><span id="more"></span><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><ul><li>Constants</li></ul><p><code>0</code> is <code>0000 ... 0000</code><br><code>1</code> is <code>0000 ... 0001 (all bits are 0 except the least significant one)</code><br><code>-1</code> is <code>1111 ... 1111 (all bits are 1)</code><br><code>2^n</code> is <code>1 &lt;&lt; (n - 1)</code></p><p>Assuming 32-bit integer:</p><p>Maximum integer is <code>~(1 &lt;&lt; 31)</code>, <code>(1 &lt;&lt; 31) - 1</code>, or <code>(1 &lt;&lt; -1) - 1</code>.<br>Minimum integer is <code>1 &lt;&lt; 31</code> or <code>1 &lt;&lt; -1</code>,</p><p>This method works with any type. e.g., maximum <code>long</code> could be <code>((long)1 &lt;&lt; 127) - 1</code></p><ul><li>Basic operations</li></ul><pre class="language-java" data-language="java"><code class="language-java">x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>                <span class="token comment">//multiply x by 2</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>                <span class="token comment">//multiply x by 4</span>x <span class="token operator">>></span> <span class="token number">2</span>                <span class="token comment">//divide x by 4</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">//mod x by 8</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>          <span class="token comment">//return true if x is even</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span>          <span class="token comment">//return true if x and y are of the same sign</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>        <span class="token comment">//return true if x is positive (assuming 32-bit integer)</span></code></pre><h2 id="Hacks"><a href="#Hacks" class="headerlink" title="Hacks"></a>Hacks</h2><ul><li>Find absolute value</li></ul><pre class="language-java" data-language="java"><code class="language-java">mask <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">31</span>        <span class="token comment">//assuming 32-bit integer</span><span class="token comment">// mask is 0 for positive integers (all bits are 0)</span><span class="token comment">// mask is -1 for negative integers (all bits are 1)</span><span class="token punctuation">(</span>x <span class="token operator">+</span> mask<span class="token punctuation">)</span> <span class="token operator">^</span> mask     <span class="token comment">//this gives the absolute value of x</span><span class="token comment">// for positive integer this essentially means "plus 0 and stay put"</span><span class="token comment">// for negative integer this essentially means "minus 1 and flip all bits"</span><span class="token comment">//e.g.</span><span class="token comment">//using 8-bit byte as an example:</span><span class="token comment">///// when x is positive</span><span class="token comment">// x = 0000 1101</span><span class="token comment">// mask = x >> 7 = 0000 0000</span><span class="token comment">// (x + mask) ^ mask is still just x</span><span class="token comment">///// when x is negative</span><span class="token comment">// x = 1100 1101 (= -51)</span><span class="token comment">// mask = x >> 7</span><span class="token comment">//   = 1111 1111</span><span class="token comment">// x + mask</span><span class="token comment">//   = 1100 1100</span><span class="token comment">// (x + mask) ^ mask</span><span class="token comment">//   = 0011 0011 (= 51)</span></code></pre><ul><li><code>x + 1</code> and <code>x - 1</code></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token operator">~</span>x <span class="token operator">==</span> x <span class="token operator">+</span> <span class="token number">1</span>          <span class="token comment">//always true</span><span class="token operator">-</span>x <span class="token operator">==</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span>          <span class="token comment">//always true</span><span class="token operator">~</span><span class="token operator">-</span>x <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span>           <span class="token comment">//always true</span><span class="token operator">~</span>x <span class="token operator">=</span> <span class="token operator">-</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token comment">//e.g.,</span><span class="token comment">// x = 0000 0011</span><span class="token comment">// ~x = 1111 1100 = -x - 1</span><span class="token comment">// -x = 1111 1101 = ~x + 1</span><span class="token comment">// -~x = 0000 0100 = x + 1</span><span class="token comment">// ~-x = 0000 0010 = x - 1</span></code></pre><p>You can get -x from x this way (<code>~x + 1</code>) or <code>(x ^ -1) + 1</code>.</p><ul><li>Swap two numbers without using a third variable</li></ul><pre class="language-java" data-language="java"><code class="language-java">x <span class="token operator">=</span> x <span class="token operator">^</span> yy <span class="token operator">=</span> x <span class="token operator">^</span> yx <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token comment">//x and y are now swapped</span></code></pre><ul><li>If <code>x</code> is <code>a</code>, set <code>x</code> to <code>b</code>; if <code>x</code> is <code>b</code>, set <code>x</code> to <code>a</code></li></ul><pre class="language-java" data-language="java"><code class="language-java">x <span class="token operator">=</span> a <span class="token operator">^</span> b <span class="token operator">^</span> x</code></pre><h2 id="Bit-k"><a href="#Bit-k" class="headerlink" title="Bit k"></a>Bit k</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//(1 &lt;&lt; k) makes a mask with only bit k not set (rightmost is bit 0)</span><span class="token comment">//e.g., (1 &lt;&lt; 4) makes 00010000</span><span class="token comment">//     ~(1 &lt;&lt; 4) makes 11101111</span><span class="token comment">//thus,</span>x <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span>  <span class="token comment">//turn off bit k of x</span>x <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span>   <span class="token comment">//turn on bit k of x</span>x <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span>   <span class="token comment">//flip bit kof x</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>   <span class="token comment">// return true if bit k of x is not set</span></code></pre><h2 id="Rightmost-Set-Bit"><a href="#Rightmost-Set-Bit" class="headerlink" title="Rightmost Set Bit"></a>Rightmost Set Bit</h2><ul><li>About <code>x - 1</code></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//x - 1 always flips all bits of x starting from its rightmost set bit.</span><span class="token comment">//e.g. x = 11101100, then</span><span class="token comment">// x - 1 = 11101011</span><span class="token comment">//Notice how the last three bits are flipped by subtraction of 1</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">//turn off the rightmost set bit</span>x <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//find where the rightmost set bit of x is</span>x <span class="token operator">&amp;</span> <span class="token operator">-</span>x              <span class="token comment">//same effect as above</span>n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token comment">//return true when x is a power of 2 (that means, only one single set bit)</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> x       <span class="token comment">//same effect as above</span></code></pre><ul><li>Brian Kernighan’s Algorithm</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Count of number of set bit, by turning them off consecutively</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">countSetBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token operator">++</span>count<span class="token punctuation">;</span>            x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="English-Alphabet"><a href="#English-Alphabet" class="headerlink" title="English Alphabet"></a>English Alphabet</h2><ul><li>The difference between lower- and uppercase Characters</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token string">'A'</span> <span class="token operator">-</span> <span class="token number">01000001</span> <span class="token string">'a'</span> <span class="token operator">-</span> <span class="token number">01100001</span><span class="token string">'B'</span> <span class="token operator">-</span> <span class="token number">01000010</span> <span class="token string">'b'</span> <span class="token operator">-</span> <span class="token number">01100010</span><span class="token string">'C'</span> <span class="token operator">-</span> <span class="token number">01000011</span> <span class="token string">'c'</span> <span class="token operator">-</span> <span class="token number">01100011</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>Notice that they only differ in their third significant bit. For uppercase characters, the bit is 0, and for lowercase characters, the bit is 1.</p><p>Also, in ASCII,</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token string">' '</span> <span class="token operator">-</span> <span class="token number">00100000</span><span class="token string">'_'</span> <span class="token operator">-</span> <span class="token number">01011111</span></code></pre><p>Hence, we have:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">(</span>c <span class="token operator">|</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment">//Convert c to lowercase; if c is already lowercase then no effect</span><span class="token keyword">char</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token string">'_'</span><span class="token punctuation">)</span>    <span class="token comment">//Convert c to uppercase; if c is already uppercase then no effect</span><span class="token keyword">char</span><span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment">//Invert c's case</span></code></pre><ul><li>Position of letter in alphabet</li></ul><p>This will work, regardless of case:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token comment">//return 1</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token comment">//return 1</span><span class="token punctuation">(</span><span class="token string">'c'</span> <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token comment">//return 3</span></code></pre><h2 id="More-Resources"><a href="#More-Resources" class="headerlink" title="More Resources"></a>More Resources</h2><p>Interested in more bit manipulations? See <a href="http://graphics.stanford.edu/~seander/bithacks.html">here</a><br>Interested in some practices? Checkout <a href="https://leetcode.com/tag/bit-manipulation/">Leetcode</a></p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Up My C Drive</title>
      <link href="/2022/01/18/Clean-Up-My-C-Drive/"/>
      <url>/2022/01/18/Clean-Up-My-C-Drive/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>So my C Drive is full yet again.</p><span id="more"></span><p>Throughout these years using Windows OS, the insufficient C Drive space is always a haunting problem for me. Usually I allocate 80-120 Gigabytes and it is filled up within a few months, even though I never throw anything into C and make sure to never install anything into C.</p><p>Here are some of the ways I clean up my C Drive. I record them here in case I need to Google “How to set virtual memory on Windows” over and over again.</p><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ul><li>Clean up Desktop, Download folder, Recycle Bin and Document folder.</li><li>MS Disk Cleanup: Right click Drive Icon &gt; Properties &gt; Disk Clean-up. Do not stop here, click into the Clean Up system files. Important items to look for: Temporary Internet Files, Windows Update Files, Windows Old.</li><li>Rebuild or just disable indexing (This reduces size of <code>Windows.edb</code> which can be several Gigabytes): Control Panel &gt; Indexing Options. Modify the items to be indexed (Keep Start Menu only, or just don’t index anything) and rebuild indexing. From now on, use Everything to search instead the Windows build-in search.</li><li>(Once off) Shift system folders to another disk.</li><li>(Once off) Turn off hibernation (This removes <code>Hiberfil.sys</code> which can be several Gigabytes): CMD command <code>powercfg.exe /hibernate off</code>. This should be off by default. If you saw a large <code>Hiberfil.sys</code> using Space Sniffer, considering turning off hibernation and that file would be deleted.</li><li>(Once off) Shift Virtual Memory to another disk (This removes <code>Pagefile.sys</code> which can be several Gigabytes): Right click This Computer &gt; Advanced system settings &gt; Advanced Tab &gt; Settings &gt; Change. Allocate all virtual memories to other disks. After restarting the computer <code>Pagefile.sys</code> would be removed.</li><li>(Not recommended) MS Disk Compression: never tried before.</li><li>(Not recommended) Disk Defragmentation: does more damage than benefits for solid drives</li></ul><h2 id="Third-Party-Tools"><a href="#Third-Party-Tools" class="headerlink" title="Third Party Tools"></a>Third Party Tools</h2><p>Run them as administrator.</p><ul><li>Space Sniffer: rediscover the lost disk space.</li><li>Dism++: clean up garbage files.</li><li>Driver Store Explorer: delete old drivers.</li></ul><h2 id="Optimizing-Applications"><a href="#Optimizing-Applications" class="headerlink" title="Optimizing Applications"></a>Optimizing Applications</h2><p>Generally, if possible, move all download/cache folder to another disk. If the app does not support this, use <code>mklink</code> command to link a directory: <code>mklink /D &quot;previous-path&quot; &quot;target-path&quot;</code>.</p><ul><li>ADOBE</li><li>Office</li><li>Tencent: Tim/QQ/WeChat can adjust download folder location.</li><li>Unity</li><li>Chrome</li><li>VSCode</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Layer, Tag, Sorting Layer, and Best Practices</title>
      <link href="/2021/11/24/Unity-Layer-Tag-Sorting-Layer-and-Best-Practices/"/>
      <url>/2021/11/24/Unity-Layer-Tag-Sorting-Layer-and-Best-Practices/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Tag identifies individual, Layer groups similar.</p><span id="more"></span><p>There are three potentially confusing concepts in Unity: Layer, Tag and Sorting Layer. When asked about their difference, many would say Layer is for physics and Sorting Layer is for rendering. When writing a condition check in <code>OnTriggerXXX</code>, many would just choose whichever comes to their mind first, be it Tag or Layer.</p><p>In this post, you will see that the Physics/Rendering dichotomy is not really valid, and being inconsistent in using Tag and Layer is really a bad practice.</p><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><p>Let us starts with the easiest of the three.</p><p>Tag is the easiest to use simply because it is designed to be so. Unlike Layer and Sorting Layer, Tag never interfaces with Unity Engine feature. There is no component that would need to check Tag of an GameObject in order to do something, and there is no API that takes in or output an Tag (in fact, there is no dedicated Tag class. It is just a string), except for those designed to search Tag. Since Tag is not a building block of the whole Engine architect, I infer the only reason why they are present is that they are added to facilitate better, faster programming.</p><p>Unity Manual echoes what I thought.</p><blockquote><p>Tags help you identify GameObjects for scripting purposes. They ensure you don’t need to manually add GameObjects to a script’s exposed properties using drag and drop, thereby saving time when you are using the same script code in multiple GameObjects.</p><footer><strong>Unity Technologies</strong><cite><a href="https://docs.unity3d.com/Manual/Tags.html">Tags</a></cite></footer></blockquote><p>One suggested use of tag mentioned in the Manual (which is also ubiquitous in a lot of beginner tutorial) is to use them as a check in <code>OnTriggerXXX</code> methods, to check “whether the player is interacting with an enemy, a prop, or a collectable, for example.</p><p>Another use is in methods like <code>GameObject.FindWithTag()</code> and <code>GameObject.FindGameObjectsWithTag()</code>. The former returns an arbitrary gameobject with the specified Tag, and the latter return all.</p><p>In general, tags should be used to:</p><ul><li>Give logical, gameplay-level, player-perspective grouping to gameobjects, instead of engine-level, programmer-perspective groupings. This allows us to search through the scene to find specific groups of gameobjects or check collision among objects in the same layer.</li><li>Give a unique label to individual gameobjects so we do not need to find them by name (<code>GameObject.Find()</code>).</li></ul><p>Some tips:</p><ul><li>Do not write <code>if (collider.tag == &quot;Player&quot;)</code>; Use <code>if (collider.CompareTag(&quot;Player&quot;))</code> instead for best performance.</li><li>Tag string is really “anything goes”. There does not seem to be word ban or character limit.</li><li>There can be infinite Tags, but a gameobject can have only one tag and must have one tag (If you do not tag it, it has the Tag “Untagged”).</li><li>Tag is optional. You do not have to use it.</li></ul><h2 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h2><p>Unlike Tag, Layer is heavily built in the Engine. There are many components and functions that interface with Layer, not just physics ones. I list some on top of my head:</p><ul><li>Physics-related<ul><li>Selective collision.</li><li>Selective cast and overlap check.</li></ul></li><li>Rendering-related<ul><li>Camera selective rendering (culling mask)</li><li>Light and Light2D selective illumination</li></ul></li></ul><p>Layer is really implemented as a bitmask - so that is why there can only be 32 layers at most (Moreover, Unity occupies a few slots by default). However, by virtue of bitmask it is permissible for LayerMask to include more than one Layer, although an gameobject can still only have one Layer.</p><p>In general, tags should be used to:</p><ul><li>Provide groupings for collision. For example, I create separate layers for enemy and player bullets and enemy and player bodies to prevent shooting bullets that kill oneself.</li><li>Provide groupings for lighting target. For example, I want my player not to be lit by the light source emitting from herself.</li><li>Provide groupings for gameobjects that might be rendered or hidden in different situation. This is used to separate the game and GUI elements. The UI layer, which is there by default, is automatically assigned to all UI elements upon their creation.</li></ul><p>Tips:</p><ul><li>If you want the raycast to check for only gameobjects in the first layer, you write <code>int layermask = 1 &lt;&lt; 1</code>(Not <code>1 &lt;&lt; 0</code>!). If you want everything but the first layer, simply do <code>layermask = ~layermask</code>.</li><li>Layer 31 is used internally by the Editor’s Preview window mechanics. To prevent clashes, do not use this layer.</li><li>At the start, clear out all checks in the collision matrix except for the row of Default.</li></ul><h2 id="Sorting-Layer"><a href="#Sorting-Layer" class="headerlink" title="Sorting Layer"></a>Sorting Layer</h2><p>Sorting Layer is purely about rendering. On top of my head, there are at least two rendering components that allow you to assign a Sorting Layer to the things they render: Sprite Renderer, Tilemap Renderer.</p><p>Sorting Layer is the most prioritized factor when Unity decide which out of the few overlapping graphics should be in front of which. It is used usually with Order in Layer to specify an internal ordering within Layer. <a href="https://docs.unity3d.com/Manual/2DSorting.html">There are various other factors that determine the order of rendering when both Sorting Layer and Order in Layer are the same.</a></p><p>Sorting Layer, in fact, has a very clear-cut use and is distinct from the above two. It is included here only because it is often confused with Layer - majorly because of the similar nomenclature (perhaps we should really have a better name for Sorting Layer - Perhaps “Sorting Level”?).</p><p>Tips:</p><ul><li>Start with the player/enemy Sorting Layer and think about what would go in front of and behind these characters.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Down to Unity 2D Stacks II - 2D Graphics</title>
      <link href="/2021/11/23/Unity-2D-Collections-2/"/>
      <url>/2021/11/23/Unity-2D-Collections-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>So, should a game programmer be in charge of effect, post-processing and particle system?</p><span id="more"></span><div class="admonition error"><p class="admonition-title">Construction Ongoing</p><p>This is not a finished post. The final version may have drastic differences as compared to this draft.</p></div><div class="admonition info"><p class="admonition-title">Post Series</p><p>This posts belongs to the series: <em>Down to Unity 2D Stacks</em>. You can see all posts in this series <a href="https://reimirno.github.io/series/unity-2d-collection">here</a>.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: Medium</p><p>This post is good for readers having some basic knowledge on the topic: <em>Unity 2D Graphics</em>. The ideal reader group include those who have a good practical command of Unity 2D yet want to check whether they have missed anything important or wonder about the underlying concept.However, since this post belongs to a series, you are expected to master the previous posts in the series.</p></div><h2 id="Art-Style"><a href="#Art-Style" class="headerlink" title="Art Style"></a>Art Style</h2><h3 id="Perspective"><a href="#Perspective" class="headerlink" title="Perspective"></a>Perspective</h3><ul><li>Top-down</li><li>Side-on</li><li>Isometric</li></ul><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><ul><li>Minimalist</li><li>Pixel</li><li>Illustrative</li><li>Pre-rendered 3D</li></ul><h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2><h3 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h3><blockquote><ul><li>A render pipeline performs a series of operations that take the contents of a Scene, and displays them on a screen.</li><li>At a high level these operations are: Culling, Rendering, Post-processing.</li></ul><img src = "BestPracticeLightingPipeline3.svg" alt = "Three Roles of RP" title = "Three Roles of RP" loading="lazy"><footer><strong>Unity Technologies</strong><cite><a href="https://docs.unity3d.com/Manual/render-pipelines-overview.html">Render pipelines introduction</a></cite></footer></blockquote><ul><li>Unity has 3 render pipelines: SRP (limited customization), URP (optimized graphics, more customization), HDRP (high-fidelity graphics on high-end platforms).<ul><li>Usually we will use URP. By Default, when you start a project Unity uses SRP (Now, there are URP template to start with). Many of the features described below rely on URP.</li><li>To switch to URP:<ul><li>Install URP package (This installs Shader Graph as well).</li><li>Create an URP Pipeline Asset and a 2D Renderer. Swap the 2D into the PipeLine Asset and Delete the original renderer.</li><li>Apply the Pipeline to Project Settings &gt; Graphics &gt; Scriptable Render Pipeline Setting.</li><li>Upgrade all existing assets to use URP (Edit &gt; URP &gt; Upgrade)</li></ul></li><li>To switch back to SRP, remove any Scriptable Render Pipeline from there.</li></ul></li></ul><h3 id="Texture-Material-Shader"><a href="#Texture-Material-Shader" class="headerlink" title="Texture, Material, Shader"></a>Texture, Material, Shader</h3><ul><li>Conceptually,<ul><li>Textures are bitmap images.</li><li>Shaders are scripts that contain the mathematical calculations and algorithms for calculating the color of each pixel rendered based on the lighting input and the material configuration.</li><li>Materials define how a surface should be rendered. Materials use shaders as a reference to tell Unity how to render a surface and allow for configuration of the shader code. It is like a wrapper around the shader.</li><li>A material can contain references to textures so that the shader can use the textures in its calculations.</li></ul></li><li>Unity have several Materials 2D by out of box.<ul><li>“Sprite-Default” will not react to 2D Lighting. This is the default material to be attached to gameobjects under SRP.</li><li>“Sprite-Lit” will react to 2D Lighting. Gameobject with this material would appear black when there is no Light 2D. This is the default material under URP.</li><li>“Sprite-Unlit” Will not react to 2D Lighting as well.</li></ul></li><li>You can create 2D Shaders now with the new URP!</li></ul><h3 id="ShaderGraph"><a href="#ShaderGraph" class="headerlink" title="ShaderGraph"></a>ShaderGraph</h3><ul><li>You can handwrite shader code or use this visual scripting tools to create shaders.</li><li>Common Node<ul><li>Math<ul><li>Sine: used to create rolling waves, rustling vegetation, floating magical entities and more.</li></ul></li></ul></li><li>Common Shaders How-tos<ul><li>Dissolution</li><li>Rustling</li><li>Outline</li><li>Trail</li><li>Water Reflection</li></ul></li></ul><h3 id="Post-processing"><a href="#Post-processing" class="headerlink" title="Post-processing"></a>Post-processing</h3><ul><li>A collaboration among three parties<ul><li>There must be a Volume with effect profile</li><li>Camera must enable Post-processing</li><li>Pipeline Asset must enable Quality &gt; HDR (You usually need this)</li></ul></li></ul><h4 id="Colors"><a href="#Colors" class="headerlink" title="Colors"></a>Colors</h4><ul><li>Tonemapper: Tonemapper maps HDR color scale to a scale that local monitor can display. Just remember to always put an Tonemapper there when HDR is enabled. ACES has more of a cinematic look.</li><li>White Balance: <code>Temperature</code> controls between blue and yellow, and <code>Tint</code> controls between green and purple.</li><li>Color Adjustment:<ul><li>Pretty self-explanatory</li><li>Empirical Value: Tonemapper uses ACES, Color Adjustment &gt; Post Exposure set to 0.5 and Saturation set to -5 gives a bright and nice appearance.</li></ul></li><li>Channel Mixer</li><li>Color Curves</li><li>Shadows Midtones Highlights/ Lift Gamma Gain</li><li>Split Toning</li><li>Color Lookup Table</li></ul><h4 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h4><ul><li>Bloom<ul><li>Let bright area bleed into their neighborhood.</li><li>Make a glow<ul><li>Export an emission map from Photoshop that can be superposed onto the original spritesheet, with the part that you want to glow being white and otherwise black.</li><li>Import this into Unity. Set <code>Texture Type</code> to <code>Default</code>. Other import settings should be the same.</li><li>Attach this to the original spritesheet as a secondary texture.</li><li>Now, you can access this secondary texture (<code>_</code> followed by the name of the emission map set in the Sprite Editor) in Shader Graph and use an addition to blend colors.</li><li>Use a HDR color to multiply to that secondary texture before addition onto the <code>_MainTex</code>.</li><li>Use a <code>Bloom</code> effect profile on a Volume and set threshold to more than 1 (this is to prevent normal sprite from glowing).</li></ul></li><li><a href="https://github.com/sonicether/SE-Natural-Bloom-Dirty-Lens">Bloom dirty lens</a></li></ul></li><li>Chromatic Aberration</li><li>Film Grain</li><li>Vignette</li></ul><h4 id="Lens"><a href="#Lens" class="headerlink" title="Lens"></a>Lens</h4><ul><li>Depth of Field</li><li>Motion Blur</li><li>Lens Distortion<ul><li>Can be used to create a high-speed wrapping effect</li></ul></li><li>Panini Projection</li></ul><h4 id="Located-on-Camera"><a href="#Located-on-Camera" class="headerlink" title="Located on Camera"></a>Located on Camera</h4><ul><li>Dithering</li><li>Anti-aliasing</li></ul><h2 id="2D-Light"><a href="#2D-Light" class="headerlink" title="2D Light"></a>2D Light</h2><ul><li>Always select Target Layer.</li></ul><h2 id="Sprite-2D-Mesh"><a href="#Sprite-2D-Mesh" class="headerlink" title="Sprite (2D Mesh)"></a>Sprite (2D Mesh)</h2><h3 id="Import-Settings"><a href="#Import-Settings" class="headerlink" title="Import Settings"></a>Import Settings</h3><ul><li><code>Texture Type</code>: this is set to <code>Sprite (2D and UI)</code> after importing assets by default when under 2D mode. If not, manually set it to be <code>Sprite (2D and UI)</code> for 2D projects.</li></ul><h3 id="Sprite-Renderer"><a href="#Sprite-Renderer" class="headerlink" title="Sprite Renderer"></a>Sprite Renderer</h3><ul><li><code>Color</code> should be thought of as a tint color on Sprite. If working with complete white Sprite then tint color would be the only color blended into the sprite; if working with a completely black Sprite, tint would have no effect.</li><li><code>Draw Mode</code>: <code>Sliced</code> is for Sprite that would be applied 9-slicing technique with the middle section being stretched, <code>Tiled</code> is for Sprite that would be applied 9-slicing technique with the middle section being repeated.</li><li><code>Mask Interaction</code>: Define the interaction mode between this Sprite and the Sprite Mask.</li><li><code>Sprite Sort Point</code>: Define a point used in the calculation of the distance between this Sprite and the camera. This is useful when you sort Sprite by distance from camera.</li><li><code>Material</code>: Material used to render the Sprite. Unity supplies some default sprite materials by default.</li><li><code>Sorting Layer</code>, <code>Order in Layer</code>: Define a Sorting Layer and Layer in Order to sort Sprite.</li></ul><h3 id="Texture-Packer"><a href="#Texture-Packer" class="headerlink" title="Texture Packer"></a><a href="https://www.codeandweb.com/texturepacker/tutorials/using-spritesheets-with-unity">Texture Packer</a></h3><h3 id="Sprite-Shape"><a href="#Sprite-Shape" class="headerlink" title="Sprite Shape"></a>Sprite Shape</h3><h3 id="Tilemaps"><a href="#Tilemaps" class="headerlink" title="Tilemaps"></a>Tilemaps</h3><h2 id="2D-Camera"><a href="#2D-Camera" class="headerlink" title="2D Camera"></a>2D Camera</h2><h3 id="Camera-General"><a href="#Camera-General" class="headerlink" title="Camera General"></a>Camera General</h3><ul><li>Marking a Camera as Orthographic removes all perspective from the Camera’s view. This is mostly useful for making isometric or 2D games.</li><li>Camera size<ul><li>We would first decide on a rendering resolution. This is usually much smaller than the actual screen resolution that players are using in the case of pixel art games. For example, we can use a <code>960 by 540</code> rendering resolution, which is 16:9, and the player may run the game on a full HD screen (<code>1920 by 1080</code>).</li><li>We also need to decide beforehand how many pixels a “square” of our Sprite would have. This may be 16, 32 or 64. Set that as the <code>Pixel Per Unit</code> when importing the Sprite.</li><li>Camera Size = Height of the rendering resolution / 2 / pixel per unit.</li><li>But the thinking process actually is the other way around: For example, I would want a very refined pixel art style in the game so pixel per unit is set to 64 (more work for the artists); I want a screen that can fit 9 unit square height (and thus 16 unit square width), which means I want a camera size of 4.5; The resulting rendering resolution is <code>(16 * 64) by (9 * 64)</code> which calculates to be <code>1024 by 576</code>.</li></ul></li></ul><h3 id="Pixel-Perfect-Camera"><a href="#Pixel-Perfect-Camera" class="headerlink" title="Pixel Perfect Camera"></a>Pixel Perfect Camera</h3><h3 id="Cinemachine"><a href="#Cinemachine" class="headerlink" title="Cinemachine"></a>Cinemachine</h3><h3 id="Parallax"><a href="#Parallax" class="headerlink" title="Parallax"></a>Parallax</h3><h2 id="2D-Sorting"><a href="#2D-Sorting" class="headerlink" title="2D Sorting"></a>2D Sorting</h2><h2 id="2D-Animation"><a href="#2D-Animation" class="headerlink" title="2D Animation"></a>2D Animation</h2><h3 id="Animator"><a href="#Animator" class="headerlink" title="Animator"></a>Animator</h3><h3 id="Behavior-Tree"><a href="#Behavior-Tree" class="headerlink" title="Behavior Tree"></a>Behavior Tree</h3><h2 id="Particle-System"><a href="#Particle-System" class="headerlink" title="Particle System"></a>Particle System</h2>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Down to Unity 2D Stacks I - 2D Physics</title>
      <link href="/2021/11/23/Unity-2D-Collections/"/>
      <url>/2021/11/23/Unity-2D-Collections/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>And yea, after three years of Unity development, I am back to revisit the most basic fundamentals.</p><span id="more"></span><div class="admonition note"><p class="admonition-title">Update Ongoing</p><p>This post will be updated.</p></div><div class="admonition info"><p class="admonition-title">Post Series</p><p>This posts belongs to the series: <em>Down to Unity 2D Stacks</em>. You can see all posts in this series <a href="https://reimirno.github.io/series/unity-2d-collection">here</a>.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: Medium</p><p>This post is good for readers having some basic knowledge on the topic: <em>Unity 2D Physics</em>. The ideal reader group include those who have a good practical command of Unity 2D yet want to check whether they have missed anything important or wonder about the underlying concept.However, since this post belongs to a series, you are expected to master the previous posts in the series.</p></div><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li>z-coordinate dose not makes any influence on 2D physics. All 2D physics happens at Z coordinate 0.</li><li>Physics 2D and 3D components do not interact.</li></ul><h2 id="Physics-2D-Project-Settings"><a href="#Physics-2D-Project-Settings" class="headerlink" title="Physics 2D Project Settings"></a>Physics 2D Project Settings</h2><ul><li>Gravity: Default force field applied globally.<ul><li>This would take effect even if <code>Rigidbody.velocity</code> is set by code each physics frame!</li></ul></li><li>Default Material: The physical material used by default if none assigned to Rigidbody 2D and Collider 2D.</li></ul><h2 id="Rigidbody-2D"><a href="#Rigidbody-2D" class="headerlink" title="Rigidbody 2D"></a>Rigidbody 2D</h2><ul><li>Three important roles of Rigidbody 2D<ul><li>Allows the GameObject to be affected by Unity Physics2D Engine. It overrides the <code>Transform</code> and updates it to a position/rotation defined by the Rigidbody 2D.</li><li>Define important physics data for the GameObject (e.g. <code>Mass</code>, <code>Angular Drag</code>)</li><li>Keep track of runtime physics data (e.g. <code>Velocity</code>)</li></ul></li><li>Any Collider 2D component added to the same GameObject or child GameObject is implicitly “attached” to that Rigidbody 2D.<ul><li>Collider 2Ds attached to the same Rigidbody 2D won’t collide with each other. That means you can “compound” Collider 2Ds.</li></ul></li><li><code>Material</code>: specify a common Material for all Collider 2D attached to it. Collider 2D would prioritize its own Material, of course. If no Materials are specified anywhere, default Material in Physics 2D setting are used.</li><li>Think of <code>Mass</code> as the regular mass in the real physical sense.<ul><li>The most important effect of mass is to determine two <code>Dynamic</code> GameObjects collide (Think about the momentum conservation formula).</li><li><code>Use Auto Mass</code> will detect a mass from its Collider 2D.</li></ul></li><li>Think of <code>Drag</code> as air resistance.</li><li><code>Body Type</code> affects movement and collision.<ul><li><code>Dynamic</code> is “full-fledged” use of rigidbody 2D, also most performance-expensive.</li><li><code>Kinematic</code> allows a GameObject’s velocity not to be influenced by forces, gravity and drags. It still will interact with other <code>Dynamic</code> GameObject through collider2D.<ul><li>This is usually for things like moving platform whose movement is controlled by scripts rather than physics engine using <code>Rigidbody2D.MovePosition</code> and <code>MoveRotation</code>.</li><li>It behaves like an immovable objects as if it has infinite mass during collision. Mass-related properties are not available.</li><li>It does not collide with <code>Static</code> or <code>Kinematic</code> GameObjects (but trigger would still fire), unless this is demanded in <code>Use Full Kinematic Contacts</code>.</li></ul></li><li><code>Static</code> is for totally unmoved object, also least performance-expensive.<ul><li>Simply not attaching any Rigidbody 2D component to a GameObject makes it static too. All its colliders by default would be attached to a single hidden <code>Static</code> Rigidbody 2D component.</li><li>Having a dedicated <code>Static</code> Rigidbody 2D has better performance when <code>Body Type</code> needs to be changed at runtime.</li><li>Rigidbody 2D is here solely for collision, not for movement. It is immovable as if it has infinite mass.</li><li>Normally, it will not collide with <code>Kinetic</code> GameObjects; but if the Collider 2D is used as trigger it will fire.</li></ul></li></ul></li><li><code>Interpolate</code>: When the GameObject moved by rigidbody appears jittering, checking <code>Interpolate</code> (smooth using last frame) or <code>Extrapolate</code>(smooth using next frame) may smooth.</li><li><code>Sleeping Mode</code>: There are three threshold values to be adjusted in Physics 2D settings to set a Rigidbody 2D below a certain velocity for a certain duration to sleep.<ul><li>Avoid using <code>Never Sleep</code> if possible.</li><li>Relevant APIs: <code>Rigidbody2D.Sleep()</code> <code>WakeUp()</code> <code>IsSleeping()</code></li></ul></li><li><code>Collision Detection</code>: Best just keep as <code>Discrete</code> unless there are problems (e.g., fast-moving objects).</li><li><code>Simulated</code><ul><li>Check and uncheck this property to stop and resume a Rigidbody 2D and its Collider 2Ds and Joint 2Ds from 2D physics engine.</li><li>This is much less expensive than disabling individual Collider 2Ds and Joint 2Ds components.</li></ul></li></ul><h2 id="Collider-2D"><a href="#Collider-2D" class="headerlink" title="Collider 2D"></a>Collider 2D</h2><h3 id="Collider-General"><a href="#Collider-General" class="headerlink" title="Collider General"></a>Collider General</h3><ul><li>Hold SHIFT key to drag collider shape in the scene view.</li><li>Hold CTRL key to click and delete points for edge and polygon colliders.</li><li>Using a zig-zagged edge collider for a surface is better than compounding several box colliders.</li><li>Minimum requirement for collisions to happen: two GameObjects both have Collider 2D and at least one of them have a <code>Dynamic</code> Rigidbody 2D. This is due to the collision rules specified above.</li><li>General <a href="https://forum.unity.com/threads/capsule-vs-box-colliders.34254/">rule of thumb for performance</a> (best to worst): circle &lt; capsule &lt; box.</li></ul><h3 id="Tag-and-Layer-Collision-Layer-Matrix"><a href="#Tag-and-Layer-Collision-Layer-Matrix" class="headerlink" title="Tag and Layer, Collision Layer Matrix"></a>Tag and Layer, Collision Layer Matrix</h3><ul><li>All gameobjects by default are in <code>Default</code> collision layer. Try to create layers for each type of gameobjects and never leave anything in <code>Default</code>.</li><li>A good practice is to uncheck everything except the <code>Default</code> row in Collision Matrix at the beginning of project. Remember, always cut off unused collision checks.</li></ul><h3 id="Circle-Collider-2D"><a href="#Circle-Collider-2D" class="headerlink" title="Circle Collider 2D"></a>Circle Collider 2D</h3><h3 id="Box-Collider-2D"><a href="#Box-Collider-2D" class="headerlink" title="Box Collider 2D"></a>Box Collider 2D</h3><h3 id="Capsule-Collider-2D"><a href="#Capsule-Collider-2D" class="headerlink" title="Capsule Collider 2D"></a>Capsule Collider 2D</h3><h3 id="Edge-Collider-2D"><a href="#Edge-Collider-2D" class="headerlink" title="Edge Collider 2D"></a>Edge Collider 2D</h3><h3 id="Polygon-Collider-2D"><a href="#Polygon-Collider-2D" class="headerlink" title="Polygon Collider 2D"></a>Polygon Collider 2D</h3><ul><li><code>Auto Tiling</code>: Check it to allow the collider shape to keep updated from Sprite’s dimensions. The Sprite Renderer’s <code>Draw Mode</code> need to be set to <code>Tiled</code> to make this work.</li></ul><h3 id="Composite-Collider-2D"><a href="#Composite-Collider-2D" class="headerlink" title="Composite Collider 2D"></a>Composite Collider 2D</h3><ul><li>Can only merge Box and Polygon Collider 2Ds.</li><li><code>Geometry Type</code>: <code>Outlines</code> makes it effectively an Edge Collider 2D, <code>Polygon</code> Polygon.</li><li><code>Generation Type</code>: <code>Synchronous</code> makes the composite always updated when its sub-colliders change. In <code>Manual</code> you need to recalculate it using <code>CompositeCollider2D.GenerateGeometry()</code>.</li><li><code>Vertex Distance</code>: Minimum spacing allowed among vertices. Think of this as collision resolution.</li><li><code>Edge Radius</code>: When <code>Geometry Type</code> is <code>Outlines</code>, setting this higher than 0 gives a larger collider with rounded convex corners.</li></ul><h2 id="Material-2D"><a href="#Material-2D" class="headerlink" title="Material 2D"></a>Material 2D</h2><ul><li>Physics Material should not be confused with Rendering Material.</li><li><code>Friction</code>: does not seem to have an upper limit or threshold value; but, the higher this value is the higher the friction would be. This is different from linear/angular drag in that it triggers only when GameObjects collide.</li><li><code>Bounciness</code>: 0 is no bounce, 1 is perfect bounce. It is possible to set a value higher than 1.</li><li>Empirical values:<ul><li>Icy ground: (0, 0)</li><li>Bouncy ball: (0.2, 0.8)</li></ul></li></ul><h2 id="Joint-2D"><a href="#Joint-2D" class="headerlink" title="Joint 2D"></a>Joint 2D</h2><h3 id="Joint-General"><a href="#Joint-General" class="headerlink" title="Joint General"></a>Joint General</h3><ul><li>2D joints work with both 2D and 3D GameObjects.</li><li>Constraint: All joints constrain GameObjects in some way (“limiting” it, “driving” it). When GameObjects, subject to some external reason, temporarily breaks out from the constraint, joints would try fix this situation over time.</li><li>Joint Break: When GameObject experience a force/torque that exceeds limit, joint breaks and the component deletes itself from its GameObject. Relevant options: <code>Break Force</code>, <code>Break Torque</code>.</li><li><code>Connected Rigidbody</code>: bind the current GameObject to another Rigidbody 2D. Leaving it blank to bind to the fixed space. If bound to a gameobject, you can check <code>Enable Collision</code> to allow these two to collide.</li><li><code>Anchor</code> is the connection point at this gameobject, <code>Connected Anchor</code> is the connection point at the attached gameobject/world. The coordinates are in local space if attached to an gameobject, and in world otherwise.</li></ul><h3 id="Hinge-Joint-2D"><a href="#Hinge-Joint-2D" class="headerlink" title="Hinge Joint 2D"></a>Hinge Joint 2D</h3><ul><li><code>Motor Speed</code> is the speed at which motor runs in normal situation; when the gameobject breaks away from the constraint, the joint attempts to bring it back but with a maximum corrective force specified by <code>Maximum Motor Force</code>. The larger the force, the faster the correction.</li><li>You can achieve effects like scissors, auto-closing door, see-saw, and rotating platforms.</li></ul><h3 id="Distance-Joint-2D"><a href="#Distance-Joint-2D" class="headerlink" title="Distance Joint 2D"></a>Distance Joint 2D</h3><ul><li>It is not a “absolutely hard” joint, but it is pretty hard. It is still possible to break away from the set distance but the joint would bring back the gameobject as fast as possible.</li><li><code>Max Distance Only</code> lets the <code>Distance</code> value to be just a max value, rather than both a max and min value. In this case, the min value is 0.</li><li>You can achieve effects like hanging ball, yo-yo.</li></ul><h3 id="Fixed-Joint-2D"><a href="#Fixed-Joint-2D" class="headerlink" title="Fixed Joint 2D"></a>Fixed Joint 2D</h3><h3 id="Friction-Joint-2D"><a href="#Friction-Joint-2D" class="headerlink" title="Friction Joint 2D"></a>Friction Joint 2D</h3><h3 id="Relative-Joint-2D"><a href="#Relative-Joint-2D" class="headerlink" title="Relative Joint 2D"></a>Relative Joint 2D</h3><h3 id="Slider-Joint-2D"><a href="#Slider-Joint-2D" class="headerlink" title="Slider Joint 2D"></a>Slider Joint 2D</h3><h3 id="Spring-Joint-2D"><a href="#Spring-Joint-2D" class="headerlink" title="Spring Joint 2D"></a>Spring Joint 2D</h3><h3 id="Target-Joint-2D"><a href="#Target-Joint-2D" class="headerlink" title="Target Joint 2D"></a>Target Joint 2D</h3><h3 id="Wheel-Joint-2D"><a href="#Wheel-Joint-2D" class="headerlink" title="Wheel Joint 2D"></a>Wheel Joint 2D</h3><h2 id="Effector-2D"><a href="#Effector-2D" class="headerlink" title="Effector 2D"></a>Effector 2D</h2><h3 id="Effector-General"><a href="#Effector-General" class="headerlink" title="Effector General"></a>Effector General</h3><ul><li>Add force to gameobjects in a certain area.</li><li><code>Force Direction</code>, <code>Force Magnitude</code>, <code>Force Variation</code>:<ul><li><code>Force Direction</code> is clamped in 0 - 359.99. It uses degrees. Be careful to note whether this angle is in world or local space.</li><li><code>Force Magnitude</code> can be both negative and positive. Usually positive is repulsion and negative is attraction.</li><li><code>Force Variation</code> is not both ways! Hence, it can also be negative and positive. For example, if it is set to 4, then a noise of 0 to 4 can be added to the original force. If it is set to -4, then the noise range is -4 to 0.</li></ul></li><li><code>Drag</code>, <code>Angular Drag</code>: Applies another drag/angular drag on top of the original drag/angular drag specified in Rigidbody 2D.<ul><li>A large <code>Drag</code> can drain the gameobject’s movements in other directions and better forces the gameobject to move in the specified direction of Area Effector 2D.</li><li>A large <code>Drag</code> might also be used to smoothen out the movement in Point Effect 2D, preventing the gameobject from overshooting its target point and oscillating.</li><li>A large <code>Angular Drag</code> prevents the gameobject from rotating too fast (not visually pleasing) in the area.</li></ul></li><li><code>Force Target</code>: Selecting <code>Collider</code> might generate torque if the Collider 2D is not at CM (the object collider is in an irregular shape); selecting <code>Rigidbody</code> will always apply force to CM and always not generating torque.<ul><li>When you have an irregularly shaped object you probably want it to rotate under external force field. Hence, select <code>Collider</code>.</li></ul></li></ul><h3 id="Area-Effector-2D"><a href="#Area-Effector-2D" class="headerlink" title="Area Effector 2D"></a>Area Effector 2D</h3><ul><li>Works usually with Collider 2D set to trigger.</li><li><code>Use Global Angle</code>: If unchecked, the direction of the force is defined in local space. So, when the gameobject with effector rotates, the force direction rotates.</li></ul><h3 id="Point-Effector-2D"><a href="#Point-Effector-2D" class="headerlink" title="Point Effector 2D"></a>Point Effector 2D</h3><ul><li><code>Force Source</code>: Using <code>Collider</code> as the source allows you to adjust the offset of center of force of Point Effector 2D using offset of collider.</li><li><code>Distance Scale</code> is used with <code>Inverse Linear</code> and <code>Inverse Squared</code> mode to control a coefficient of changing rate.</li></ul><h3 id="Buoyancy-Effector-2D"><a href="#Buoyancy-Effector-2D" class="headerlink" title="Buoyancy Effector 2D"></a>Buoyancy Effector 2D</h3><h3 id="Platform-Effector-2D"><a href="#Platform-Effector-2D" class="headerlink" title="Platform Effector 2D"></a>Platform Effector 2D</h3><h3 id="Surface-Effector-2D"><a href="#Surface-Effector-2D" class="headerlink" title="Surface Effector 2D"></a>Surface Effector 2D</h3><h2 id="Constant-Force-2D"><a href="#Constant-Force-2D" class="headerlink" title="Constant Force 2D"></a>Constant Force 2D</h2><ul><li>A component used to apply a constant force/torque to the Rigidbody 2D attached to the same Gameobject.</li><li><code>Force</code> uses global coordinates (so it is indepedent of gameobject’s current rotation), <code>Relative Force</code> uses local coordinates.</li></ul><h2 id="Raycast-2D"><a href="#Raycast-2D" class="headerlink" title="Raycast 2D"></a>Raycast 2D</h2><ul><li>For Physics 2D Raycaster: a gameobject must have a Collider 2D and it must not be a trigger. There is no need for Rigidbody 2D to present. If the gameobject does have a Rigidbody 2D and it is set to not simulating or sleeping, however, raycasting would not find the object.</li><li>Core APIs:<ul><li><code>Physics2D.Raycast(Vector 2 origin, Vector 2 dir, float distance, int layerMask)</code> returns an <code>RaycastHit2D</code> object. You can directly test this object like a boolean value to check whether anything is hit. <a href="https://docs.unity3d.com/ScriptReference/Physics2D.Raycast.html">There are two more arguments that are rarely used.</a></li><li>The <code>RaycastHit2D</code> objects have reference to the relevant gameobject’s <code>collider</code>, <code>rigidbody</code>, <code>transform</code>, and hit information like <code>distance</code>, <code>point</code>.</li><li>There is also a <code>Physics2D.RaycastAll</code> that tries to return all object in ray range (instead of being blocked by the first gameobject hit).</li></ul></li><li>Make the length and layer masks as restricted as possible.<blockquote><ul><li>Don’t use use Raycasts inside a <code>FixedUpdate()</code> function, sometimes even inside an <code>Update()</code> may be an overkill.</li></ul><footer><strong>Unity Technologies</strong><cite><a href="https://learn.unity.com/tutorial/physics-best-practices#5c7f8528edbc2a002053b5b4">Physics Best Practices</a></cite></footer></blockquote></li><li>Relevant static methods:<ul><li><code>BoxCast</code>, <code>BoxCastAll</code>, <code>CircleCast</code> …</li><li><code>OverlapArea</code>, <code>OverlapAreaAll</code>, <code>OverlapBox</code> …</li></ul></li></ul><h2 id="Other-Utility-Method"><a href="#Other-Utility-Method" class="headerlink" title="Other Utility Method"></a>Other Utility Method</h2><ul><li>ClosestPoint</li><li>Distance</li><li>GetContacts</li><li>GetIgnoreCollision, GetIgnoreLayerCollision, GetIgnoreCollisionMask</li><li>IsTouching, IsTouchingLayers</li><li>IgnoreCollision, IgnoreLayerCollision</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some Thoughts on SQL and LINQ</title>
      <link href="/2021/11/22/SQL-Collections/"/>
      <url>/2021/11/22/SQL-Collections/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>!!! error Construction Ongoing<br>This is not a finished post. The final version may have drastic differences as compared to this draft.</p><span id="more"></span><h2 id="Declarative-Programming"><a href="#Declarative-Programming" class="headerlink" title="Declarative Programming"></a>Declarative Programming</h2><p>It did not take me so long to realize the difference between high- and low-level languages (actually, it is not a clear dichotomy), but it does take a while for me to realize the distinction between declarative and imperative languages. I have been using both Markdown and C-like for a long time yet I failed to appreciate their intrinsic differences.</p><p>Declarative languages (Markdown, HTML, CSS SQL, Regex, Prolog…) focus on <em>WHAT</em> instead of <em>HOW</em>. They are the direct descriptions of the desired result, and the interpreter would figure out how to generate the result. They do not use control flow, and the order of evaluation is often not explicit. Everything is handled by the interpreter and the way (<em>HOW</em>) to retrieve the result is unpredictable, but it is sure that you would get the result.</p><p>In imperative languages (C-like, Python, Java, Scheme…), a program is a description of computational process. The interpreter would carry out the computation using a fixed set of evaluation rule and the <em>HOW</em> is predictable. In a way, it is less direct than declarative programs since it does not directly describe the result.</p><p>I was told that the dichotomy between declarative and imperative is not clear-cut, either. I am waiting for the day that I feel why this is so by my own heart.</p><h2 id="Some-heads-up-on-SQL"><a href="#Some-heads-up-on-SQL" class="headerlink" title="Some heads up on SQL"></a>Some heads up on SQL</h2><p>SQL stands for Structured Query Language. Essentially it is used to define, access, manipulate and query data within a database. Different databases should all support SQL which hAS an ANSI standard. However, different database companies try to come up with their own extended syntax beyond the standard ANSI SQL for market differentiation.</p><p>There are relational and nonrelational databases. The “relation” in “relational databases” essentially means that the data are organized in a tabular manner (rather than tree, graph or something else; such databases vanished FROM the modern industry).</p><p>In principle SQL keywords are not case-sensitive. However, in practice different companies of databases follow different standards. Capitalization may differ across operating systems, too. For now, we would use capitals for all SQL keywords and all lowercase letters for table/column names.</p><h2 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h2><p>!!! info Online Interpreter<br>Try this SQL <a href="https://sql.js.org/examples/GUI/index.html">interpreter</a>.<br>When it says “syntax error”, the first thing to check is whether you misses a semicolon.</p><ul><li>Table Update and Basic Select</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- In general,</span><span class="token comment">-- SELECT &lt;columns> FROM &lt;table> WHERE &lt;condition> ORDER BY &lt;order></span><span class="token comment">-- &lt;column> defines what the columns in the result table contain</span><span class="token comment">-- Create a table by using both CREATE TABLE and SELECT</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> cities<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> cities <span class="token keyword">AS</span>  <span class="token keyword">SELECT</span> <span class="token number">38</span> <span class="token keyword">AS</span> latitude<span class="token punctuation">,</span> <span class="token number">122</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span> <span class="token string">"Berkeley"</span> <span class="token keyword">AS</span> city <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token number">42</span><span class="token punctuation">,</span>             <span class="token number">71</span><span class="token punctuation">,</span>               <span class="token string">"Cambridge"</span>        <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token number">45</span><span class="token punctuation">,</span>             <span class="token number">93</span><span class="token punctuation">,</span>               <span class="token string">"Minneapolis"</span><span class="token punctuation">;</span><span class="token comment">-- Modify the table</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> cities <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">"Unknown Land"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> cities <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">888</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">888</span><span class="token punctuation">,</span> <span class="token string">"Unknown Land"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> cities <span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- only two columns have values</span><span class="token comment">-- Update</span><span class="token keyword">UPDATE</span> cities <span class="token keyword">SET</span> latitude <span class="token operator">=</span> <span class="token number">999</span> <span class="token keyword">WHERE</span> city <span class="token operator">=</span> <span class="token string">"Unknown Land"</span><span class="token punctuation">;</span><span class="token comment">-- SELECT would Select some records from a table and project it to a new table</span><span class="token comment">-- But this table is not saved. Hence, you need CREATE TABLE to save it.</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> cities<span class="token punctuation">;</span> <span class="token comment">-- Simply select everything</span><span class="token keyword">SELECT</span> city<span class="token punctuation">,</span> longitude <span class="token keyword">FROM</span> cities <span class="token keyword">WHERE</span> latitude <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> city<span class="token punctuation">,</span> longitude <span class="token operator">+</span> latitude <span class="token keyword">as</span> longlat <span class="token keyword">FROM</span> cities <span class="token keyword">WHERE</span> latitude <span class="token operator">></span> <span class="token number">40</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> longitude<span class="token punctuation">;</span><span class="token comment">-- Filter out repeats, filter out null values</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> city <span class="token keyword">FROM</span> cities <span class="token keyword">WHERE</span> city <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- NULL values are not 0 or whitespace. It is the result of leaving a cell of the table blank</span><span class="token comment">-- Cannot apply comparing operators on NULL; you can only use IS NULL and IS NOT NULL</span><span class="token keyword">SELECT</span> city<span class="token punctuation">,</span> longitude <span class="token operator">-</span> latitude <span class="token keyword">AS</span> gap <span class="token keyword">FROM</span> cities <span class="token keyword">WHERE</span> gap <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">&lt;></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- WHERE can access the gap variable defined earlier!</span><span class="token comment">-- Order by descending, and take only the first two</span><span class="token keyword">SELECT</span> city <span class="token keyword">FROM</span> cities <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> longitude <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- Delete some records from the table</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> cities <span class="token keyword">WHERE</span> latitude <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">OR</span> longitude <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- Deletes all records!</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> cities<span class="token punctuation">;</span><span class="token comment">-- Delete the whole table</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> cities<span class="token punctuation">;</span></code></pre><ul><li>Inner Join</li></ul><p>Inner Join of two tables is Cartesian product.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> parents<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> parents <span class="token keyword">AS</span>  <span class="token keyword">SELECT</span> <span class="token string">"abraham"</span> <span class="token keyword">AS</span> parent<span class="token punctuation">,</span> <span class="token string">"barack"</span> <span class="token keyword">AS</span> child <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"abraham"</span>          <span class="token punctuation">,</span> <span class="token string">"clinton"</span>         <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"delano"</span>           <span class="token punctuation">,</span> <span class="token string">"herbert"</span>         <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"fillmore"</span>         <span class="token punctuation">,</span> <span class="token string">"abraham"</span>         <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"fillmore"</span>         <span class="token punctuation">,</span> <span class="token string">"delano"</span>          <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"fillmore"</span>         <span class="token punctuation">,</span> <span class="token string">"grover"</span>          <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"eisenhower"</span>       <span class="token punctuation">,</span> <span class="token string">"fillmore"</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> dogs<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dogs <span class="token keyword">AS</span>  <span class="token keyword">SELECT</span> <span class="token string">"abraham"</span> <span class="token keyword">AS</span> name<span class="token punctuation">,</span> <span class="token string">"long"</span> <span class="token keyword">AS</span> fur <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"barack"</span> <span class="token punctuation">,</span> <span class="token string">"short"</span> <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"clinton"</span> <span class="token punctuation">,</span> <span class="token string">"long"</span> <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"delano"</span> <span class="token punctuation">,</span> <span class="token string">"long"</span> <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"eisenhower"</span> <span class="token punctuation">,</span> <span class="token string">"short"</span> <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"fillmore"</span> <span class="token punctuation">,</span> <span class="token string">"curly"</span> <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"grover"</span> <span class="token punctuation">,</span> <span class="token string">"short"</span> <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"herbert"</span> <span class="token punctuation">,</span> <span class="token string">"curly"</span><span class="token punctuation">;</span><span class="token comment">-- single table manipulation</span><span class="token keyword">SELECT</span> child <span class="token keyword">FROM</span> parents <span class="token keyword">where</span> parent <span class="token operator">=</span> <span class="token string">"abraham"</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> parent <span class="token keyword">FROM</span> parents <span class="token keyword">where</span> parent <span class="token operator">></span> child<span class="token punctuation">;</span><span class="token comment">-- Join two table</span><span class="token comment">-- Permutes all combination of records from two tables and produces a four-column table</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> parents<span class="token punctuation">,</span> dogs<span class="token comment">-- Gets a table about all dogs whose parent and fur are both known</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> parents<span class="token punctuation">,</span> dogs <span class="token keyword">WHERE</span> child <span class="token operator">=</span> name<span class="token comment">-- Select all parents of curly-furred dogs (no ambiguity of column names)</span><span class="token keyword">SELECT</span> parent <span class="token keyword">FROM</span> parents<span class="token punctuation">,</span> dogs <span class="token keyword">WHERE</span> child <span class="token operator">=</span> name <span class="token operator">AND</span> fur <span class="token operator">=</span> <span class="token string">"curly"</span><span class="token comment">-- Recall: SELECT &lt;columns> FROM &lt;table> WHERE &lt;condition> ORDER BY &lt;order></span><span class="token comment">-- &lt;table> is a comma-separated list of table names with optional aliases</span><span class="token comment">-- Get all pairs of sibling dogs</span><span class="token comment">-- Use dot operator and alias to disambiguate</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> siblings <span class="token keyword">AS</span>  <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>child <span class="token keyword">AS</span> firstSib<span class="token punctuation">,</span> b<span class="token punctuation">.</span>child <span class="token keyword">AS</span> secondSib    <span class="token keyword">FROM</span> parents <span class="token keyword">AS</span> a<span class="token punctuation">,</span> parents <span class="token keyword">AS</span> b    <span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>parent <span class="token operator">=</span> b<span class="token punctuation">.</span>parent <span class="token operator">AND</span> a<span class="token punctuation">.</span>child <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>child<span class="token punctuation">;</span><span class="token comment">-- Select all siblings with the same fur</span><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>firstSib<span class="token punctuation">,</span> a<span class="token punctuation">.</span>secondSib  <span class="token keyword">FROM</span> siblings <span class="token keyword">AS</span> a<span class="token punctuation">,</span> dogs <span class="token keyword">AS</span> b<span class="token punctuation">,</span> dogs <span class="token keyword">as</span> c  <span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>firstSib <span class="token operator">=</span> b<span class="token punctuation">.</span>name <span class="token operator">AND</span> a<span class="token punctuation">.</span>secondSib <span class="token operator">=</span> c<span class="token punctuation">.</span>name <span class="token operator">AND</span> b<span class="token punctuation">.</span>fur <span class="token operator">=</span> c<span class="token punctuation">.</span>fur<span class="token punctuation">;</span></code></pre><ul><li>Numeric and String Manipulation</li></ul><p>Here is SQLite’s <a href="https://www.sqlite.org/syntax/expr.html">BNF for expression</a>.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- &lt; &lt;= > >= &lt;> != = (`&lt;>` and `!=` both means inequality. Equality is `=` - only a single equal sign.)</span><span class="token comment">-- + - * / %</span><span class="token comment">-- NOT AND OR</span><span class="token comment">-- ROUND ABS POWER</span><span class="token comment">-- || SUBSTR INSTR</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> players<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> players <span class="token keyword">AS</span>  <span class="token keyword">SELECT</span> <span class="token string">"Reimu"</span> <span class="token keyword">AS</span> player<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">AS</span> atk<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">AS</span> def<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">AS</span> lvl<span class="token punctuation">,</span> <span class="token string">"Human"</span> <span class="token keyword">AS</span> race <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"Marisa"</span><span class="token punctuation">,</span>          <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"Human"</span>         <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"Youmu"</span><span class="token punctuation">,</span>           <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token number">4</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"Non-human"</span>     <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"Cirno"</span><span class="token punctuation">,</span>           <span class="token number">9</span><span class="token punctuation">,</span>        <span class="token number">9</span><span class="token punctuation">,</span>        <span class="token number">9</span><span class="token punctuation">,</span>        <span class="token string">"Baka"</span>          <span class="token keyword">UNION</span>  <span class="token keyword">SELECT</span> <span class="token string">"Sanae"</span><span class="token punctuation">,</span>           <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">4</span><span class="token punctuation">,</span>        <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"Non-human"</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> player<span class="token punctuation">,</span> atk <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> lvl <span class="token keyword">AS</span> total_atk<span class="token punctuation">,</span> def <span class="token operator">+</span> POWER<span class="token punctuation">(</span>lvl<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_def <span class="token keyword">FROM</span> players<span class="token punctuation">;</span><span class="token comment">-- IN can be used as a shorthand to OR</span><span class="token keyword">SELECT</span> player <span class="token keyword">FROM</span> players <span class="token keyword">WHERE</span> atk <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">-- same as atk = 1 OR atk = 3</span></code></pre><ul><li>Aggregation (Cross-row operation)</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- SELECT &lt;columns> FROM &lt;table> WHERE &lt;condition> ORDER BY &lt;order> can only refer to one row</span><span class="token comment">-- We check one row and decides whether to keep it</span><span class="token comment">-- Aggregate functions check</span><span class="token comment">-- SUM, MAX, SUM, AVG</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>atk<span class="token punctuation">)</span> <span class="token keyword">as</span> max_raw_atk<span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span> <span class="token keyword">as</span> min_raw_def <span class="token keyword">FROM</span> players<span class="token punctuation">;</span><span class="token comment">-- The max and the min of course does not occur in the same row; but this works!</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>atk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> atk<span class="token punctuation">)</span> <span class="token keyword">FROM</span> players<span class="token punctuation">;</span><span class="token comment">-- The aggregate functions also will select a row; sometimes they are meaningful</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>atk<span class="token punctuation">)</span><span class="token punctuation">,</span> player <span class="token keyword">FROM</span> players<span class="token punctuation">;</span> <span class="token comment">-- It tells you the player with max atk is Marisa</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>atk<span class="token punctuation">)</span><span class="token punctuation">,</span> player <span class="token keyword">FROM</span> players<span class="token punctuation">;</span> <span class="token comment">-- Which one? There are two mins</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>atk<span class="token punctuation">)</span><span class="token punctuation">,</span> player <span class="token keyword">FROM</span> players<span class="token punctuation">;</span> <span class="token comment">-- Does not make sense</span></code></pre><ul><li>Grouping</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- SELECT &lt;columns> FROM &lt;table> GROUP BY &lt;expressions> HAVING &lt;expressions></span><span class="token comment">-- GROUP BY allows grouping. Aggregate operators are performed on individual groups.</span><span class="token comment">-- HAVING is used to filter the groups.</span><span class="token keyword">SELECT</span> race<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span> <span class="token keyword">FROM</span> players <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> race<span class="token punctuation">;</span><span class="token keyword">SELECT</span> race<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> population <span class="token keyword">FROM</span> players <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> race <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">AVG</span><span class="token punctuation">(</span>atk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> atk<span class="token operator">/</span>def<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> players <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> atk<span class="token operator">/</span>def <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- only wants groups that have more than 1 member</span><span class="token keyword">SELECT</span> def<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>atk <span class="token operator">-</span> def<span class="token punctuation">)</span> <span class="token keyword">FROM</span> players <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> def <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> atk<span class="token punctuation">;</span></code></pre><h2 id="LINQ-Equivalence"><a href="#LINQ-Equivalence" class="headerlink" title="LINQ Equivalence"></a>LINQ Equivalence</h2><p>Probably one of the most powerful tool in C# (and one of the important reasons why I prefer it over the purely OOP Java) is LINQ.</p><pre class="language-cs" data-language="cs"><code class="language-cs">&#x2F;&#x2F; Linq supports both method syntax and sql syntaxint[] scores &#x3D; new int[] &#123;1, 3, 5, 6, 98, 99, 101&#125;;&#x2F;&#x2F; Usually we use var anywaysIEnumerable&lt;int&gt; greatScores &#x3D;  FROM score in scores  WHERE score &gt; 80  SELECT score&#x2F;&#x2F; This is the same asvar greatScores_alt &#x3D; scores.Where(x &#x3D;&gt; x &gt; 80);&#x2F;&#x2F; Note that the previous lines are never evaluated until you use them&#x2F;&#x2F; For example, toList() or foreach</code></pre>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extra Parentheses in Scheme - A Reminder for OOP Programmers</title>
      <link href="/2021/11/09/Some-Scheme-Reminders/"/>
      <url>/2021/11/09/Some-Scheme-Reminders/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>I am surprised that you cannot just use <a href="https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/parentheses.html">parentheses</a> anywhere you want.</p><span id="more"></span><p>Parentheses are good friends of us when we don’t want to memorize the evaluation order of operators (Pop quiz: In C, what does <code>0 | 1 &amp; 1</code> evaluates to?). In Scheme, however, there is no such need. The order of operation is self-obvious with all syntax-required parentheses already in place.</p><p>In lots of programming languages you could just insert extra parentheses, sometimes just for the sake of clarity. However, the catch in Scheme is that extra parentheses would not just be ignored. For example:</p><p>In C#,</p><pre class="language-cs" data-language="cs"><code class="language-cs">if (((n &#x3D;&#x3D; 1) &amp;&amp; (x !&#x3D; 9) || (n &lt; 1)) || (y &gt; 7)) &#x2F;&#x2F;This is fine.  return 1;if((((((((true)))))))) &#x2F;&#x2F;This is fine.  return 1;</code></pre><p>But in Scheme,</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme"><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">=</span> x <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">;this is fine.</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">=</span> x <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">;this is not fine</span>Error: bool is not callable: <span class="token boolean">#t</span></code></pre><p>Why? And why this error message? Let’s see the simplest comparison example:</p><p>In Python,</p><pre class="language-py" data-language="py"><code class="language-py">&gt;&gt;&gt; 44&gt;&gt;&gt; (4)4</code></pre><p>In C#,</p><pre class="language-cs" data-language="cs"><code class="language-cs">&gt; csi &#x2F;&#x2F;Enters C# interactive mode in VS CMD 2019&gt; 44&gt; (4)4</code></pre><p>But in Scheme,</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token number">4</span><span class="token number">4</span>scm> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>Error: int is not callable: <span class="token number">4</span></code></pre><p>We get a similar error message!</p><p>You realize that when you surround something in a pair of parentheses, Scheme no longer considers it as an expression but rather would try to call it. Indeed, Scheme would interpret parentheses as procedure calls or pairs. In this case Scheme thinks you are calling the procedure <code>4</code> with no argument, but what you want is an expression <code>4</code>.</p><p>Now, for a more complicated example.</p><p>In C#,</p><pre class="language-cs" data-language="cs"><code class="language-cs">&gt; Func&lt;int,int&gt; cube &#x3D; x &#x3D;&gt; x * x * x;&gt; cube(2);8&gt; Func&lt;int,int&gt; cube &#x3D; (x) &#x3D;&gt; x * x * x;&gt; cube(2);8</code></pre><p>In Python,</p><pre class="language-py" data-language="py"><code class="language-py">&gt;&gt;&gt; cube &#x3D; lambda x : x**3&gt;&gt;&gt; cube(2)8&gt;&gt;&gt; cube &#x3D; lambda (x) : (x**3)  File &lt;string&gt;, line 1    cube &#x3D; lambda (x) : (x**3)                  ^SyntaxError: invalid syntax &gt;&gt;&gt; cube &#x3D; lambda x : (x**3)&gt;&gt;&gt; cube(2)8</code></pre><p>In Scheme,</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">(</span><span class="token keyword">define</span> identity <span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token lambda-parameter">x</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>Error: argument <span class="token number">0</span> of LambdaProcedure has wrong type <span class="token punctuation">(</span><span class="token function">symbol</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token keyword">define</span> identity <span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token lambda-parameter">x</span><span class="token punctuation">)</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>identityscm> <span class="token punctuation">(</span><span class="token keyword">define</span> identity <span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">)</span><span class="token punctuation">)</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>identityError: non-symbol: <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token function">identity</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">0</span>scm> <span class="token punctuation">(</span><span class="token keyword">define</span> identity <span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token lambda-parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">; This will pass, but it is wrong!</span>identityscm> <span class="token punctuation">(</span><span class="token function">identity</span> <span class="token number">0</span><span class="token punctuation">)</span>Error: int is not callable: <span class="token number">0</span></code></pre><p>Can you figure out why Scheme behaves this way? How come Scheme now does want parentheses?</p><p>Hint: First argument of lambda should be a symbol type instead of an expression type; first expression of an if should be an expression type. </p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scheme List</title>
      <link href="/2021/11/09/Scheme-List/"/>
      <url>/2021/11/09/Scheme-List/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>I wish I could, some day, eventually understand why (())))(()(())))) is “the only computer language that is beautiful” (Neal Stephenson).</p><span id="more"></span><div class="admonition info"><p class="admonition-title">Tools</p><p>Visualize list using <a href="https://code.cs61a.org/scheme/">CS 61A Code</a> with <code>(autodraw)</code> command.</p></div><p>List is the core in Scheme, a dialect of Lisp - but its nesting relationship can be really frustrating. This post aims to address the issue about the list.</p><h2 id="List-Constructor"><a href="#List-Constructor" class="headerlink" title="List Constructor"></a>List Constructor</h2><p>So, apparently these four options:</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">4</span> nil<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>scm> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token keyword">quote</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><p>all do the same thing.</p><ul><li>You cannot do <code>(cons 1 2)</code> or <code>(cons 1 2 3)</code>. <span class="hint--info hint--rounded hint--top" data-hint="Actually, not really. If you pass an element as the second element you get  pair. `(cons 2 3)` gives you `(2 . 3)`" ontouchstart>`cons` only accepts two argument and the second has to be either `nil` or another list.</span></li><li><code>(list 2 3 4)</code> is somewhat like the syntax sugar for the linked-list-styled constructor <code>cons</code>.</li><li>The last two work because of symbol types (I would write a separate post on <a href="/2021/11/08/Understanding-Symbol-Type-in-Scheme/" title="Scheme Symbol Type">Scheme Symbol Type</a>). But for our purpose here all we need to know is that they work. You could use them as regular list - for example, storing them as variable:</li></ul><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">(</span><span class="token keyword">define</span> lst <span class="token punctuation">(</span><span class="token keyword">quote</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lstscm> lst<span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><p>Next up, nesting:</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token keyword">quote</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">2</span> nil<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">4</span> nil<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">5</span> nil<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>Really, no new rule to be said - if you walk through these codes you would find that they just obey everything we said above in the non-nesting case. Just be really careful about the parentheses, and avoid the insane <code>cons</code> as far as possible.</p><p>One more thing: be careful when you mix and match:</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token builtin">cons</span> <span class="token number">2</span> nil<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">;this is ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span>scm> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">;this is not ok - the quote would quote the whole thing</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><h2 id="Element-Retrieve"><a href="#Element-Retrieve" class="headerlink" title="Element Retrieve"></a>Element Retrieve</h2><p>We could use <code>car</code> and <code>cdr</code>. No indexing.</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">(</span><span class="token keyword">define</span> lst <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lst<span class="token comment">;car returns the first element</span>scm> <span class="token punctuation">(</span><span class="token builtin">car</span> lst<span class="token punctuation">)</span><span class="token number">1</span><span class="token comment">;cdr returns a list, which contains all elements from the rest of the list, even if the rest of the list only has one element or is empty.</span>scm> <span class="token punctuation">(</span><span class="token builtin">cdr</span> lst<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">;These still work on an one-element list</span>scm> <span class="token punctuation">(</span><span class="token keyword">define</span> a <span class="token punctuation">(</span><span class="token builtin">cdr</span> lst<span class="token punctuation">)</span><span class="token punctuation">)</span>ascm> <span class="token punctuation">(</span><span class="token builtin">car</span> a<span class="token punctuation">)</span><span class="token number">2</span>scm> <span class="token punctuation">(</span><span class="token builtin">cdr</span> a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token keyword">define</span> b <span class="token punctuation">(</span><span class="token builtin">cdr</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token comment">;They don't work on an empty list</span>scm> <span class="token punctuation">(</span><span class="token builtin">car</span> b<span class="token punctuation">)</span> <span class="token comment">;Error: argument 0 of car has wrong type (nil)</span>scm> <span class="token punctuation">(</span><span class="token builtin">cdr</span> b<span class="token punctuation">)</span> <span class="token comment">;Error: argument 0 of cdr has wrong type (nil)</span><span class="token comment">;So, test empty list with this:</span>scm> <span class="token punctuation">(</span><span class="token builtin">null?</span> b<span class="token punctuation">)</span><span class="token boolean">#t</span></code></pre><p>Those are the basics for <code>car</code> and <code>cdr</code> (Seriously, <a href="https://en.wikipedia.org/wiki/CAR_and_CDR">why don’t we just call them “first” and “rest”?</a>).</p><p>Here comes the ugly part:</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">(</span><span class="token keyword">define</span> nest <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nest<span class="token comment">;ok, how do you get 3 out?</span>scm> <span class="token punctuation">(</span><span class="token builtin">cdr</span> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">cdr</span> nest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">cdr</span> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">cdr</span> nest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">cdr</span> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">car</span> <span class="token punctuation">(</span><span class="token builtin">cdr</span> nest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3</span> <span class="token comment">;finally!</span></code></pre><p>Again, no new rules. Just nesting. Just be careful with parentheses. Also - think clearly about whether you are getting a one-element list or the element.</p><h2 id="List-Modifications"><a href="#List-Modifications" class="headerlink" title="List Modifications"></a>List Modifications</h2><pre class="language-scheme" data-language="scheme"><code class="language-scheme"><span class="token comment">; set-car! and set-cdr! do what you think they do</span>scm> <span class="token punctuation">(</span><span class="token keyword">define</span> a <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ascm> <span class="token punctuation">(</span><span class="token builtin">set-car!</span> a <span class="token number">4</span><span class="token punctuation">)</span>scm> a<span class="token punctuation">(</span><span class="token number">4</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span>scm> <span class="token punctuation">(</span><span class="token builtin">set-cdr!</span> a <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scm> a<span class="token punctuation">(</span><span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>Remember to pass in a list or nill for <code>set-cdr</code>! Again, if you pass an element as the second element you get a pair. <code>(set-car a 5)</code> gives you <code>(4 . 5)</code>.</p><p>Now, pay close attention to <code>append</code> procedure:</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme">scm> <span class="token punctuation">(</span><span class="token builtin">append</span> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">)</span></code></pre><p><code>append</code> should be called on two lists. <code>(append 2 3)</code> gives you an error; <code>(append (list 2) 3)</code> gives you a pair <code>(2 . 3)</code>.</p><p>More importantly - the Scheme <code>append</code> is not Python <code>append</code>. Rather, it is Python <code>extend</code>. How do you do a Python <code>append</code>? Use <code>cons</code>!</p><h2 id="Other-List-Procedures"><a href="#Other-List-Procedures" class="headerlink" title="Other List Procedures"></a>Other List Procedures</h2><p>“Procedure” in scheme is “function” in Python.</p><pre class="language-scheme" data-language="scheme"><code class="language-scheme"><span class="token comment">;We talked about this before</span>scm> <span class="token punctuation">(</span><span class="token builtin">null?</span> nil<span class="token punctuation">)</span><span class="token boolean">#t</span><span class="token comment">;Same as Python len()</span>scm> <span class="token punctuation">(</span><span class="token builtin">length</span> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">5</span>scm> <span class="token punctuation">(</span><span class="token builtin">length</span> <span class="token punctuation">'</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">4</span> <span class="token comment">;only checks down one layer</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding Symbol Type in Scheme</title>
      <link href="/2021/11/09/Understanding-Symbol-Type-in-Scheme/"/>
      <url>/2021/11/09/Understanding-Symbol-Type-in-Scheme/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><div class="admonition error"><p class="admonition-title">Construction Ongoing</p><p>This is not a finished post. The final version may have drastic differences as compared to this draft.</p></div><span id="more"></span><p>Hmm I feel symbol in Scheme is a bit like enum.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Common C# Collection Types</title>
      <link href="/2021/10/03/Common-CSharp-Collection-Type/"/>
      <url>/2021/10/03/Common-CSharp-Collection-Type/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>There are two genres of collection types in C#: that which is based off <code>ICollection</code> (or <code>IList</code>, which implements <code>ICollection</code>), or that which is based off <code>IDictionary</code>.</p><span id="more"></span><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String are not collection types but the operations are quite similar. Really, a string can just be seen as a char array.</p><pre class="language-cs" data-language="cs"><code class="language-cs">&#x2F;&#x2F;String from and to charletters &#x3D; new char[]&#123;&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;d&#39;,&#39; &#39;,&#39;~&#39;&#125;;var strFromChar &#x3D; new string(&#39;c&#39;,3); &#x2F;&#x2F;&quot;ccc&quot;strFromChar &#x3D; new string(letters);strFromChar &#x3D; new string(letters, 0, 3);var charArr &#x3D; strFromChar.ToCharArray();var charAt1 &#x3D; strFromChar[1];Print(strFromChar.Length);&#x2F;&#x2F;Inspect stringsstring str1 &#x3D; &quot;abcdeFG12&quot;;str1.Contains(&#39;5&#39;);         &#x2F;&#x2F;Falsestr1.IndexOf(&#39;d&#39;);          &#x2F;&#x2F;4str1.CompareTo(&quot;ab312FJ&quot;);  &#x2F;&#x2F;1 , lexi comparestr1.StartsWith(&#39;b&#39;);str1.EndsWith(&#39;2&#39;);         &#x2F;&#x2F;TruePrint(string.IsNullOrEmpty(str1));&#x2F;&#x2F;Insert, Remove, Replace, Slicevar str2 &#x3D; str1.Insert(0,&quot;A&quot;);  &#x2F;&#x2F;Insert an A in frontstr2 &#x3D; str2.Remove(2);          &#x2F;&#x2F;Remove everything from index 2 to the endstr2 &#x3D; str2.Replace(&#39;a&#39;,&#39;b&#39;);   &#x2F;&#x2F;Replace all occurrencesvar sub &#x3D; str1.Substring(1,4);  &#x2F;&#x2F;Slice&#x2F;&#x2F;Join and Splitvar str3 &#x3D; string.Join(&quot; &quot;,    new string[]&#123;str1,str2&#125;);   &#x2F;&#x2F;Join two strings with sepvar strArr &#x3D; str3.Split(    new char[]&#123;&#39; &#39;&#125;);           &#x2F;&#x2F;Split using separator&#x2F;&#x2F;Formatstr2 &#x3D; str2.ToLower();str1 &#x3D; str1.ToUpper();str2 &#x3D; str2.PadLeft(10);        &#x2F;&#x2F;str2 &#x3D; &quot;        ab&quot;str2 &#x3D; str2.Trim();             &#x2F;&#x2F;str2 &#x3D; &quot;ab&quot;</code></pre><h2 id="ICollection"><a href="#ICollection" class="headerlink" title="ICollection"></a>ICollection</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>Don’t use ArrayList. Use array which supports generic type.<br>There are also this thing called multidimensional array <code>int[,]</code> in contrast to our normal jagged array <code>int[][]</code>. I am not sure yet how it is useful. Its performance is worse and it does not allow jagged list.</p><pre class="language-cs" data-language="cs"><code class="language-cs">&#x2F;&#x2F;Constructorvar arr &#x3D; new int[5];arr &#x3D; new int[]&#123;1,2,3&#125;;Print(arr.Length);var list &#x3D; arr.ToList();&#x2F;&#x2F;Think Fill as &quot;Replace&quot;Array.Fill(arr,3);      &#x2F;&#x2F;3,3,3Array.Fill(arr,4,0,1);  &#x2F;&#x2F;4,3,3&#x2F;&#x2F;Clear, not Clean!; Must supply start and length argumentArray.Clear(arr,0,arr.Length);&#x2F;&#x2F;0,0,0arr &#x3D; new int[]&#123;3,2,3,4,5,3,7,8,3&#125;;&#x2F;&#x2F;Return the index of a value, if foundPrint(arr.Contains(3));Print(Array.BinarySearch(arr,3)); &#x2F;&#x2F;2, the one closer to middlePrint(Array.IndexOf(arr,3));      &#x2F;&#x2F;0, the firstPrint(Array.LastIndexOf(arr,3));  &#x2F;&#x2F;8, the last&#x2F;&#x2F;See if this array has such an element, and find its index&#x2F;&#x2F;You can also put in start and length constraint&#x2F;&#x2F;There is also FindLastIndexPrint(Array.Exists(arr, x &#x3D;&gt; x &gt; 10)); &#x2F;&#x2F;FalsePrint(Array.FindIndex(arr, x &#x3D;&gt; x &gt; 5)); &#x2F;&#x2F; 5Print(Array.FindIndex(arr, 7, 1, x &#x3D;&gt; x &gt; 5)); &#x2F;&#x2F; 7&#x2F;&#x2F;ForEach!&#x2F;&#x2F;The second argument is Action (must return void)Array.ForEach(arr, x &#x3D;&gt; x &#x3D; x + 1);&#x2F;&#x2F;ResizeArray.Resize(ref arr, 5);&#x2F;&#x2F;truncateArray.Resize(ref arr, 10);&#x2F;&#x2F;extra size filled with empty element&#x2F;&#x2F;ReverseArray.Reverse(arr, 3, 6);&#x2F;&#x2F;start, lengthArray.Reverse(arr);&#x2F;&#x2F;SortArray.Sort(arr, 3, 6);&#x2F;&#x2F;start, lengthArray.Sort(arr);var scores &#x3D; new int[]&#123;2,4,1,7,5&#125;;var letters &#x3D; new char[]&#123;&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;&#125;;Array.Sort(scores,letters);&#x2F;&#x2F;letters becomes C A B E D</code></pre><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List can do what arrays can do, with some added functionality.<br>List is internally implemented with a self-expanding array.</p><pre class="language-cs" data-language="cs"><code class="language-cs">&#x2F;&#x2F;Basic operationsvar li &#x3D; new List&lt;int&gt;();Print(li.Count);li &#x3D; new List&lt;int&gt;&#123;-1,1,2,4,5,9&#125;;li.Add(0);li.AddRange(new int[]&#123;4,2&#125;);li.Insert(0,99);li.RemoveAt(0);li.Remove(9);li.RemoveAll(x &#x3D;&gt; x &lt; 0);li.RemoveRange(0,3);li.Clear();&#x2F;&#x2F;List can do everything arrays canli &#x3D; new List&lt;int&gt;&#123;1,2,3,4,5,0&#125;;li.Contains(5);li.IndexOf(5);li.Exists(x &#x3D;&gt; x &lt; 0);li.Reverse();li.Sort();&#x2F;&#x2F;... and more</code></pre><h3 id="Stack-Queue"><a href="#Stack-Queue" class="headerlink" title="Stack, Queue"></a>Stack, Queue</h3><pre class="language-cs" data-language="cs"><code class="language-cs">Queue&lt;string&gt; numbers &#x3D; new Queue&lt;string&gt;();numbers.Enqueue(&quot;one&quot;);numbers.Enqueue(&quot;two&quot;);var obj &#x3D; numbers.Dequeue();var top &#x3D; numbers.Peek();Print(numbers.Count);Stack&lt;string&gt; myStack &#x3D; new Stack&lt;string&gt;();myStack.Push(&quot;Hello&quot;);myStack.Push(&quot;World&quot;);obj &#x3D; myStack.Pop();top &#x3D; myStack.Peek();Print(myStack.Count);&#x2F;&#x2F;You can iterate queue, stack with foreach&#x2F;&#x2F;You can use Contains with queue and stack</code></pre><p>Like Dictionary, they also have methods like <code>TryDequeue</code>/<code>TryPeek</code>.</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><h2 id="IDictionary"><a href="#IDictionary" class="headerlink" title="IDictionary"></a>IDictionary</h2><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><p>Equivalent to a hashmap.</p><pre class="language-cs" data-language="cs"><code class="language-cs">&#x2F;&#x2F;Constructorvar dict &#x3D; new Dictionary&lt;string, int&gt;();arr &#x3D; new int[]&#123;0, 2, 4, 8, 12, 9&#125;;dict &#x3D; arr.ToDictionary(x&#x3D;&gt;x.ToString(), x&#x3D;&gt;x+1);dict.Count();var key &#x3D; dict.Keys.ToList();var value &#x3D; dict.Values.ToList();&#x2F;&#x2F;Basic operationsdict.TryAdd(&quot;a&quot;,1);dict.Add(&quot;z&quot;,2);dict.ContainsKey(&quot;z&quot;);dict.ContainsValue(1);int val;if(dict.TryGetValue(&quot;a&quot;,out val))    dict[&quot;a&quot;] &#x3D; val + 1;dict.Remove(&quot;z&quot;);dict.Clear();&#x2F;&#x2F;Iterateforeach(KeyValuePair&lt;string,int&gt; kvp in dict)&#123;&#x2F;&#x2F;just use var will do    &#x2F;&#x2F;...do something&#125;</code></pre><h3 id="SortedList-SortedDictionary"><a href="#SortedList-SortedDictionary" class="headerlink" title="SortedList, SortedDictionary"></a>SortedList, SortedDictionary</h3><h2 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h2><h3 id="LINQ-Extension-Methods"><a href="#LINQ-Extension-Methods" class="headerlink" title="LINQ Extension Methods"></a>LINQ Extension Methods</h3><p>It works for all IEnumerable, we use a list as example.</p><pre class="language-cs" data-language="cs"><code class="language-cs">import System.Linq;var num &#x3D; new List&lt;int&gt;()&#123;2,5,8,1,4,2,9,0,-1&#125;;var positive &#x3D; num.Where(x &#x3D;&gt; x &gt; 0);var stringify &#x3D; num.Select(x &#x3D;&gt; x + &quot;+&quot;);&#x2F;&#x2F;we also have skip and takevar max &#x3D; num.Max(x &#x3D;&gt; x - 3); &#x2F;&#x2F;Min, Average, Sumvar ord &#x3D; num.OrderBy(x&#x3D;&gt;Math.Abs(x)).ThenByDescending(x&#x3D;&gt;x);num.First();num.FirstOrDefault();num.Last();num.LastOrDefault();num.Prepend(1);num.Append(2);num.ElementAt(3);var dis &#x3D; num.Distinct(); &#x2F;&#x2F;remove all repeatvar ecp &#x3D; num.Except(new int[]&#123;5,8&#125;);&#x2F;&#x2F;Will remove all repeats too; Union, IntersectPrint(ecp.SequenceEqual(dis)); &#x2F;&#x2F;Compare equality elementwisePrint(ecp.All(dis.Contains) &amp;&amp; ecp.Count() &#x3D;&#x3D; dis.Count()); &#x2F;&#x2F;if all elements are the same (order not important)Enumerable.Range(1,99); &#x2F;&#x2F;start, lengthEnumerable.Repeat(&quot;c&quot;,100);Enumerable.Any(num,x&#x3D;&gt;x&gt;0); &#x2F;&#x2F;Allvar collection &#x3D; new int[4][];var flattened &#x3D; collection.SelectMany(x&#x3D;&gt;x);</code></pre><h3 id="Useful-Extensions-I-wrote"><a href="#Useful-Extensions-I-wrote" class="headerlink" title="Useful Extensions I wrote"></a>Useful Extensions I wrote</h3><pre class="language-cs" data-language="cs"><code class="language-cs">namespace ExtensionMethods&#123;    using System;    using System.Collections.Generic;    public static class collectionExt    &#123;        &#x2F;&#x2F;Lazy way to print all elements in a list        public static void Show&lt;T&gt;(this ICollection&lt;T&gt; list)&#123;          foreach(T ele in list)              Console.Write(&quot;&#123;0&#125; &quot;, ele);          Console.WriteLine();        &#125;        &#x2F;&#x2F;Lazy way to print all elements in a dict        public static void Show&lt;T1,T2&gt;(this IDictionary&lt;T1,T2&gt; list)&#123;          foreach(KeyValuePair&lt;T1,T2&gt; ele in list)              Console.Write(&quot;&#123;0&#125;:&#123;1&#125; &quot;, ele.Key, ele.Value);          Console.WriteLine();        &#125;        &#x2F;&#x2F;Lazy way to do foreach iteration        public static void ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; list, Action&lt;T&gt; f)&#123;          foreach (T ele in list)            f(ele);        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Cheat Sheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Touhou Blooming Chaos 2 - A Memorial</title>
      <link href="/2021/08/29/TBC2-Memorial/"/>
      <url>/2021/08/29/TBC2-Memorial/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>So here I am - landed on the continent of North America, settled the majority of administration work, had a taste of all registered courses, and now typing in front of my tiny laptop which takes 5 minutes to enter Unity3D Play Mode.</p><span id="more"></span><p>It is high time, or so I think, to pen down my experience of these months of developing TBC2, despite the easy yet tedious multi-variable calculus assignment.</p><p>In a spring afternoon, I stepped into my office in this city to which I have never been, right on the second day of interviewing at US embassy for my F-1 visa. </p><p>Everything just happened so quickly - I saw the hiring information of the indie Game Studio that always produces Touhou Game (I am big, big fan of Touhou Project), sent in my resume, got some phone interviews, and we decided that I flew to Shenzhen and started working. This is something I always wanted, but parents disagreed against my decision - I have debated, with both my parents and myself, whether I should go. The debate did not end until the last day of departure.</p><p>I took a 2-hour train from Guangzhou, where the US embassy locates, to Shenzhen. I hope to propose my own project - a 2D scroll-view game featuring Cirno I planned long ago, but in this office I was welcomed by a piece of shocking news: The developer, previously in charge of TBC2, sexually harassed our illustration artist, punched my boss in his face, and left Shenzhen. </p><p>That was a complicated story that involves lawsuits - but the simple aftermath is that he left this unfinished project hanging in the air for several months already. The original Steam release date long passed, TBC2 forever stays at its EA stage.</p><p>My boss hoped that I could take over ASAP. This is also why, two months ago, he suddenly asked me whether I could come earlier.</p><p>So I did. Forget about Cirno, I told myself. There would be another chance that I could make this game, eventually, I told myself. It is not your first suspended project, I told myself.</p><p>Maybe because that I have played TBC2 EA demo before, or perhaps thanks to my years of Unity3D development experience, TBC2’s codes were not difficult to understand. I started from implementing tiny feature requests and fixing trivial bugs to familiarize myself with its design architecture, and gradually moved to more bottom-layer structures. I progressed fast yet steadily.</p><p>To be frank, there are parts that are elegant, and parts that are ugly; I fixed a lot, but also learned a lot. The best part, I think, is the implementation of buff system which does not rely blindly on Unity3D’s <code>Coroutine</code> but instead abstracts a <code>ScheduledFunction</code> that checks status regularly every 0.5s, greatly improving performance.</p><p>But, in all honesty, many classes are not done well (in the sense of blatant violation of Object-oriented design). There are too many Singletons, the <code>Bullet</code> class are too “omnipotent”, the ways that art resources are loaded is not <code>async</code>… For some of these, I let it be. It is too costly and dangerous to rewrite some classes. However, whereever I feel a must, I re-implement the feature. Simply changing the way the art resources are loaded to asynchronous (by using Unity3D’s Asset Bundle) saves several Gigabytes of run-time memory!</p><p>While fixing stuff, I create new stuff too. The csv parser for loading in-game data, the inventory system (backpack, store, items), the Steam DLC manager (how to check purchase of DLCs, load character unlock information, prevent players from getting DLCs for free), several new dungeons (the one-blood mode, the all-star mode, and the endless mode - the last is deceivingly difficult to implement), and many, many other modules.</p><p>Working with a team of artists, designer and the PM is not always easy. Do not get this wrong - they are the most friendly. However, as the youngest teammate and the only programmer in this project, I felt pressured. This might be too self-centralizing - but I felt that I was that pillar. I felt that they held me in high expectations. I could not break, or the project is over.</p><p>Fortunately, I did well and fast. After the game is done, I even had ample time to create 5 character DLC packs containing 20+ new playable characters, each with five skills and unique attribute, on top of the 12 base characters. I relied on some previous developer’s work in the base game, but DLCs are all my independent work. Our base game, up to today, sold 50k+ copies on Steam, and my DLC packs sold 10k+ copies. (I seem to repeat these figures a lot these days as I am submitting application essays and resumes.) Brilliant, unbelievable success, said my boss. We are a indie studio, and 95% of the indie games in China are not making money. Out of the 5%, selling 1k copies is standard, selling 10k copies is rare, but - TBC2 sold 15k copies just in the first month of release. </p><p>“Write about this success on your resume. Tell your story to your future employer.” My boss said.</p><p>He was greatly satisfied with my work, and was prepared to write recommendation letters. He knew that I would not stay in an indie studio forever.</p><p>I still remember that, the first week in Shenzhen, they brought me out for a dinner. The restaurant impressed me with its unreasonably long queue and unreasonably lofty price. Even with a reservation, we still waited outside for half an hour. The food was good and yet, I think, does not worth the price or the wait. Perhaps because of my four years of regularly interacting with Korean food in Singapore, I remained unamazed by the army stew. However, I did still enjoy the food. On the table, Men were talking, about real estate, about politics and about cars. Women - including our head artist - could not interject, and thus concentrated on the food mainly. I was sitting the middle, both physically and psychologically, not sure about which group to belong to. It was a bit awkward, but that was perfectly normal. Who paid the bill? I think it was our boss. </p><p>Several of us went back to the office that night, including me, my boss and another developer in charge of another project. It is that night, I think, I first introduced myself fully - not the introduction I gave on the first day. I told my stories, and they shared theirs. I remembered that I pondered over something deep and philosophical, but now I cannot recall what that was.</p><p>If this were a mere, standard, normal internship, I could have ended this several paragraphs ago. It was not. It was a unique opportunity that did not reject me because I had not been to college yet, and in this job I assumed heavier a role than many college interns. It was a group of Touhou fans who attracted me, as another Touhou fan, and we were making Touhou games - it is my dream, but also their dreams. I could not imagine working with this group of nice people, and I never dare to envision such a happy period of time. My future internship or work will never, I think, have these style of interpersonal relation.</p><p>I am not sure whether the word “friendship” is suitable for our relation - probably not. Our boss and his wife brought us to his home for dinner. His house (or, his parent’s house?) has his game consoles and his home province’s specialty cuisine. I was told the story of ever-leaking air-conditioner in the office. I learnt about eye caring from our artist. We went to the swimming pool several times. I went to hospital for my right knee twice. I remembered the pie in the front of the hospital. I night run once in Bao’an Park while texting them.</p><p>And my personal memories in those months: The Changfen breakfast just besides our studio. Cooking in my 2000-RMB-per-month hostel room. Staying awake until 1:00PM on the bed. Playing Mole’s World with my friends. Not much actually - I spent almost my entirety in the studio.</p><p>This evening I called my boss up, discussing future collaboration possibilities. Here I was at 9pm, he 12pm the next day. I am busy, so he is. Many things happened. The studio was relocated. The other developer also left the studio to continue his college education in the US. The new game, Mystia’s Izakaya, is about to release in a few months. We both sound tired and excited.</p>]]></content>
      
      
      <categories>
          
          <category> Non-technical </category>
          
          <category> Mood </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>My Notes on CS61A</title>
      <link href="/2021/08/28/CS61A-Notes/"/>
      <url>/2021/08/28/CS61A-Notes/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>I take notes here when I learn CS61A: Structure and Interpretation of Computer Programs.</p><span id="more"></span><h2 id="Language-Elements"><a href="#Language-Elements" class="headerlink" title="Language Elements"></a>Language Elements</h2><ul><li>Expression: Describes a computation and evaluates to a value.<ul><li>Primitive expression: a single evaluation step - look up the value of a name or take the literal value. For example, <code>2</code>, <code>max</code>, <code>&quot;Hello!&quot;</code>.</li><li>Call (compound) expression: expression that involve a call to some function.</li></ul></li><li>Statement: Execute some action.<ul><li>Simple statement: one line, one action. Like <code>=</code> assignment, <code>return</code>, etc.</li><li>Compound statement: a statement composed of other statements, like <code>def</code>, <code>if</code> etc.<blockquote><p>  Compound statements typically span multiple lines and start with a one-line header ending in a colon, which identifies the type of statement. Together, a header and an indented suite of statements is called a clause (header + suite = clause). A compound statement consists of one or more clauses:</p><pre class="language-py" data-language="py"><code class="language-py">&lt;header&gt;:  &lt;statement&gt;  &lt;statement&gt;  ...&lt;separating header&gt;:  &lt;statement&gt;  &lt;statement&gt;  ......</code></pre><footer><strong>John DeNero, Composing Programs</strong><cite><a href="http://composingprograms.com/pages/15-control.html">Chapter 1.5 Control</a></cite></footer></blockquote></li></ul></li><li>Language Elements<ul><li>primitive expressions and statements, which represent the simplest building blocks that the language provides</li><li>means of combination, by which compound elements are built from simpler ones</li><li>means of abstraction, by which compound elements can be named and manipulated as units</li></ul></li><li>Function type<ul><li>Pure function: Only produces a return value, always evaluates to the same results given the same argument values.</li><li>Non-pure function: may produce side effects, may evaluates to different results given the same inputs, and may change the environment (print in console, render an image etc.) <code>print</code> is a non-pure function.</li></ul></li><li>Evaluation Order<ul><li>Normal order: evaluate leftmost, outmost functions first (evaluate function before its argument) may result in doing extra work by requiring function arguments to be evaluated more than once</li><li>Applicative order: evaluate function arguments before this function is applied; may result in programs that do not terminate</li><li>In practice, most functional programming languages uses lazy evaluation. With lazy evaluation, we evaluate a value when it is needed, and after evaluation all copies of that expression are updated with the new value. In effect, a parameter passed into a function is stored in a single location in memory so that the parameter need only be evaluated once. That is, we remember all the locations where we a certain argument will be used, and when we evaluate a function, we replace the argument with the value.</li><li>Importantly, in Python (and many other languages), the arguments of functions are evaluated first before being passed into the function. Compare:<pre class="language-py" data-language="py"><code class="language-py"># This prints 0x &#x3D; 0if x &#x3D;&#x3D; 0:  print(0)else  print(1&#x2F;x)# This results in an errordef if_func(cond, true_rlt, false_rlt):  if cond:    print true_rlt  else    print false_rltif_func(x, 0, 1&#x2F;x)</code></pre></li><li><a href="https://inst.eecs.berkeley.edu/~cs61a/fa11/61a-python/content/section_notes/week3/notes03_sol.pdf">Expression Tree</a></li></ul></li><li>First-class element<blockquote><p>In general, programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have first-class status. Some of the “rights and privileges” of first-class elements are:</p><ul><li>They may be bound to names.</li><li>They may be passed as arguments to functions.</li><li>They may be returned as the results of functions.</li><li>They may be included in data structures.<br>Python awards functions full first-class status, and the resulting gain in expressive power is enormous.</li></ul><footer><strong>John DeNero, Composing Programs</strong><cite><a href="http://composingprograms.com/pages/15-control.html">Chapter 1.5 Control</a></cite></footer></blockquote></li></ul><h2 id="Environment-Diagram"><a href="#Environment-Diagram" class="headerlink" title="Environment Diagram"></a><a href="https://cs61a.org/lab/lab02/">Environment Diagram</a></h2><h3 id="How-to-Do-It"><a href="#How-to-Do-It" class="headerlink" title="How to Do It?"></a>How to Do It?</h3><ul><li>Start with the global diagram and work line by line</li><li>Constants: (numbers, strings, etc), they are self-evaluating so don’t do any work.</li><li>Assignment (<code>=</code>,<code>def</code> or <code>import</code> a function):<ul><li>Primitives: evaluates the assigned value creates a binding between the name and the value in the current frame.</li><li>Objects (including functions)<ol><li>Draw an binding arrow from the name in the current frame pointing to the value. The value, for function, is the function signature (e.g., for functions defined with <code>def</code> use <code>func &lt;name&gt;(&lt;formal parameters&gt;) [parent = &lt;label&gt;]</code>)</li><li>Specify the parent frame in Rectangular bracket besides the function signature.</li><li>If two names are associated to the same object - make sure do not make a new copy of the object; instead, let both of the names point to the same object.</li></ol></li></ul></li><li>Call expression (skip this for built-in functions like <code>max</code>)<ol><li>Creates a new frame that extends the current frame. Draw a new box, name it with the original function name (no matter what name it currently is referred to).</li><li>Indicate its parent in the rectangular bracket. (The parent is always where the function is defined.)</li><li>Create binding for passed in parameters (See the assignment section above).</li><li>Work through each lines of the function, working in the new local frame.</li><li>Indicate the return value, even it is <code>None</code>. All non-global frames should have a return value indicated.</li></ol></li><li>List: represented on the object heap as a row of indexed boxes - one box per element<ul><li>each box contains either a primitive value, or points to a compound value/function/object</li></ul></li></ul><h3 id="Special-Cases"><a href="#Special-Cases" class="headerlink" title="Special Cases"></a>Special Cases</h3><ul><li>Nested Functions<ul><li>Remember, if a function is defined in another function, then its parent frame should be that function’s frame, not global. The parent is always where the function is defined.</li><li>Follow the evaluation order. Once the function is done, go back to the frame from which you made the function call.</li></ul></li><li>Lambda<ul><li>Use a Greek letter λ as function name and annotates it line number when presenting it in the object pile.</li><li>Assigning a lambda to a variable is simply giving the lambda an alias. It does not give it an intrinsic name. So, when called, the frame this lambda created would be known as λ, not that variable name; the parent of the frame is also the frame where this lambda is defined, not where it is assigned to a variable.</li></ul></li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>Calling a lambda with a given name.</li></ul><iframe width="800" height="350" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=n%20%3D%209%0Adef%20make_adder%28n%29%3A%0A%20%20%20%20return%20lambda%20k%3A%20k%20%2B%20n%0Aadd_ten%20%3D%20make_adder%28n%2B1%29%0Aresult%20%3D%20add_ten%28n%29&codeDivHeight=400&codeDivWidth=350&cumulative=true&curInstr=10&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D"> </iframe><ul><li>Defining and calling a usual function.</li></ul><iframe width="800" height="350" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=a%20%3D%203%0Adef%20square%28x%29%3A%0A%20%20%20%20y%20%3D%20x%20**%202%0A%20%20%20%20return%20y%0Aa2%20%3D%20square%28a%29&codeDivHeight=400&codeDivWidth=350&cumulative=true&curInstr=7&heapPrimitives=true&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe><ul><li>Defining and chaining-calling a function that returns itself.</li></ul><iframe width="800" height="550" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=def%20print_all%28x%29%3A%0A%20%20%20%20print%28x,%20end%3D%20%22%20%22%29%0A%20%20%20%20return%20print_all%0A%0Aprint_all%281%29%282%29%283%29&codeDivHeight=400&codeDivWidth=350&cumulative=true&curInstr=14&heapPrimitives=true&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe><ul><li>Defining and chaining-calling a nested function that, along with its parent, return each other.</li></ul><iframe width="800" height="850" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=def%20sum_and_print%28x%29%3A%0A%20%20%20%20print%28x,%20end%20%3D%20%22%20%22%29%0A%20%20%20%20def%20next_print_maker%28y%29%3A%0A%20%20%20%20%20%20%20%20return%20sum_and_print%28x%20%2B%20y%29%0A%20%20%20%20return%20next_print_maker%0A%0Asum_and_print%283%29%284%29%285%29&codeDivHeight=400&codeDivWidth=350&cumulative=true&curInstr=23&heapPrimitives=true&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe><ul><li>Calling a Curried Function</li></ul><iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=def%20curry2%28h%29%3A%0A%20%20%20%20def%20f%28x%29%3A%0A%20%20%20%20%20%20%20%20def%20g%28y%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20h%28x,%20y%29%0A%20%20%20%20%20%20%20%20return%20g%0A%20%20%20%20return%20f%0A%0Amake_adder%20%3D%20curry2%28lambda%20x,%20y%3A%20x%20%2B%20y%29%0Aadd_three%20%3D%20make_adder%283%29%0Aadd_four%20%3D%20make_adder%284%29%0Afive%20%3D%20add_three%282%29&codeDivHeight=400&codeDivWidth=350&cumulative=true&curInstr=23&heapPrimitives=false&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe><ul><li>List</li></ul><iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=pair%20%3D%20%5B1,%202,%203,%204,%205%5D%0A%0Anested_list%20%3D%20%5B%200,%20%5B1,%202%5D,%20%5B%5D,%0A%20%20%20%20%5B%20%5B3,%20False,%20None%5D,%0A%20%20%20%20%20%20%5B4,%20lambda%3A%205%5D%20%5D%0A%20%20%20%20%5D%0A%0Aslice1%20%3D%20pair%5B1%3A3%5D%0Aslice2%20%3D%20pair%5B1%3A%3A2%5D%0Aslice3%20%3D%20pair%5B1%3A-1%5D%0A%0Amystr%20%3D%20%22hello%22%0Aslice4%20%3D%20mystr%5B2%3A%3A2%5D%0Aslice5%20%3D%20mystr%5B%3A%3A-1%5D%0A&codeDivHeight=400&codeDivWidth=350&cumulative=true&curInstr=10&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D"> </iframe><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul><li>In Python, function is a first class element.</li><li>Higher-order functions are those that return or take in as argument(s) other functions, or both.</li><li>Utilize higher-order functions can reduce code repetition (think about the calculate area example).</li></ul><h3 id="Why-Nesting"><a href="#Why-Nesting" class="headerlink" title="Why Nesting?"></a>Why Nesting?</h3><ul><li>The concept of private functions - some small functions are never used in other places other than as a helper for a bigger function. These functions should be nested - to reduce name collision, to be more elegant etc.</li><li>Some helper function needs to have access to variables in its main function - then this helper should be nested to access the variables instead of passing the variable by argument into the helper.</li><li>Great example at <a href="http://composingprograms.com/pages/16-higher-order-functions.html">DeNero 1.6.3</a></li></ul><h3 id="Function-Currying"><a href="#Function-Currying" class="headerlink" title="Function Currying"></a><a href="https://en.wikipedia.org/wiki/Currying">Function Currying</a></h3><p>Currying is the practice of transforming a multi-argument function into a single higher-order function.</p><pre class="language-py" data-language="py"><code class="language-py">from operator import adddef curry2(f):  def g(x):    def h(y):      return f(x,y)    return h  return g# Alternative way using lambdacurry2_alt &#x3D; lambda f: lambda x: lambda y: f(x, y)adder_maker &#x3D; curry2(add)three_adder &#x3D; adder_maker(3)add(3,4) #7three_adder(4) #7curry2(add)(3)(4) #7print(three_adder) # &lt;function h&gt;# Usually this is simply done via functoolsimport functoolsfour_adder &#x3D; functools.partial(add, 4)four_adder(5) # 9</code></pre><h3 id="Self-Reference"><a href="#Self-Reference" class="headerlink" title="Self-Reference"></a>Self-Reference</h3><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><ul><li>Call order in recursion. Here is a beautifully constructed example:</li></ul><img src="InverseCascade.png" alt="A Picture Showing the Inverse Cascade Algorithm" loading="lazy"><ul><li><p>Relation between recursion and iteration:</p><ul><li>Iteration is a special case of recursion.</li><li>Conversion can be tricky.<ul><li>Recursive algorithms conserve and pass on the state of last loop by arguments, and update them by calling the function with the new arguments again.</li><li>Iterative algorithms conserve and the state of last loop in variables, and update them by running a while loop.</li></ul></li></ul></li><li><p>Some variants of recursion</p><ul><li>Mutual recursion: when two functions calls each other.</li><li>Tree recursion: when a function calls itself more than one time.</li></ul></li><li><p>Recursion equation - when order does and does not matter:</p><ul><li>Partition model: when order does not matter. In this case, <code>f(n,k) = f(n-k,k) + f(n,k-1)</code>.</li><li>Stairway model: when order does matter. In this case, <code>g(n,k)=g(n-1,k)+g(n-2,k)...+g(n-k,k)</code>.</li></ul></li><li><p>Recursion on different data types</p></li></ul><table><thead><tr><th align="center">Type</th><th align="center">Base Case</th><th align="center">Current Item</th><th align="center">Recursive Case</th></tr></thead><tbody><tr><td align="center">int</td><td align="center"><code>== 0</code>, <code>== 1</code></td><td align="center"><code>n % 10</code></td><td align="center"><code>n // 10</code></td></tr><tr><td align="center">list</td><td align="center"><code>== []</code></td><td align="center"><code>li[0]</code></td><td align="center"><code>li[1:]</code>,<code>li[:-1]</code></td></tr><tr><td align="center">str</td><td align="center"><code>==&#39; &#39;</code>, <code>len(s) == 1</code></td><td align="center"><code>s[0]</code></td><td align="center"><code>s[1:]</code>,<code>s[:-1]</code></td></tr><tr><td align="center">Tree</td><td align="center"><code>t.is_leaf()</code></td><td align="center"><code>t.label</code></td><td align="center"><code>t.branches</code></td></tr><tr><td align="center">Link</td><td align="center"><code>t == Link.empty</code></td><td align="center"><code>t.first</code></td><td align="center"><code>t.rest</code></td></tr></tbody></table><h2 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h2><h3 id="Constructor-and-Selector"><a href="#Constructor-and-Selector" class="headerlink" title="Constructor and Selector"></a>Constructor and Selector</h3><h3 id="Example-Implement-Tree-and-Rationals"><a href="#Example-Implement-Tree-and-Rationals" class="headerlink" title="Example: Implement Tree and Rationals"></a>Example: Implement Tree and Rationals</h3>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming Principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Notes on R</title>
      <link href="/2021/08/25/R-Collections/"/>
      <url>/2021/08/25/R-Collections/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>I take notes here as I learn R.</p><span id="more"></span><div class="admonition warning"><p class="admonition-title">Fragmented Content</p><p>This post content may appear fragmented or disjointed for I only noted down things I think I need to look at a second time. Therefore, this post is primarily meant for personal consumption.</p></div><ul><li><p>Modulo is <code>%%</code> instead of <code>%</code></p></li><li><p>Like Python, <code>/</code> in R also returns a float.</p></li><li><p>Assignment: <code>var-name &lt;- value</code>. For example: <code>x &lt;- 42</code>, <code>a_maker &lt;- function() &#123; a &lt;&lt;- 1 &#125;</code>. <a href="https://stackoverflow.com/questions/1741820/what-are-the-differences-between-and-assignment-operators-in-r">Difference as compared to <code>=</code></a>.</p></li><li><p>Global assignment: use <code>&lt;&lt;-</code> instead. Usually used inside functions to perpetuate variables to a global environment.</p></li><li><p>“floats” are called “numerics”, booleans are called “logical”. All texts are called “characters”.</p></li><li><p>R is a vectorized language; stand-alone numbers or characters are implicitly length-one vectors:</p></li><li><p>Logical are  <code>TRUE</code> <code>FALSE</code>; Numbers are by default numerics; <code>L</code> suffix is to specify an integer.</p></li><li><p>Single and double quotes can be used interchangeably but double quotes are preferred (and character constants are printed using double quotes). Single quotes are normally only used to delimit character constants containing double quotes.</p></li><li><p>Evaluating R assignment in interactive mode does not print its value by default. To print: type the name of the variable again or surround the expression with braces like <code>(x &lt;- 5 + 3)</code></p></li><li><p>Checks the data type: <code>class()</code> or <code>str()</code>.</p></li><li><p>Vectors (atomic vectors) are defined with <code>c()</code> like <code>c(1, 2, 3)</code>, <code>c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code>.</p></li><li><p>Vectors that have a continuous sequence of integer can be specified using <code>:</code>. Like <code>1:20</code>.</p></li><li><p>Vectors that have a continuous sequence of numerics can be specified using <code>seq()</code>, such as <code>seq(0, 1, .1)</code>(the last parameter is step), <code>seq(0, 1, length.out = 5)</code> (the last parameter is count).</p></li><li><p>Repetitive vectors can be made by <code>rep()</code>. Like <code>rep(c(&quot;a&quot;, &quot;b&quot;), 5)</code> ( <code>&quot;a&quot; &quot;b&quot; &quot;a&quot; &quot;b&quot; &quot;a&quot; &quot;b&quot; &quot;a&quot; &quot;b&quot; &quot;a&quot; &quot;b&quot;</code>) and <code>rep(c(&quot;a&quot;, &quot;b&quot;), each = 5)</code> (<code>&quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot;</code>). </p></li><li><p><code>length()</code> returns the length of a vector. Standalone numbers and characters have length 1. <code>logical(0)</code>, <code>integer(0)</code>, <code>numeric(0)</code> and <code>character(0)</code> are length-zero vectors.</p></li><li><p>Named vectors: <code>c(first = 1, second = 2, third = 3)</code> or </p><pre class="language-r" data-language="r"><code class="language-r">x <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span>names<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span></code></pre></li><li><p>Matrix: matrices are populated by column by default.</p><pre class="language-r" data-language="r"><code class="language-r">matrix<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> nrow <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> ncol <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#       [,1] [,2] [,3]</span><span class="token comment"># [1,]  1     3     5</span><span class="token comment"># [2,]  2     4     6</span>A <span class="token operator">&lt;-</span> diag<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># diagonal matrix</span>rownames<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>colnames<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span>A<span class="token comment">#   A B C</span><span class="token comment"># a 1 0 0</span><span class="token comment"># b 0 2 0</span><span class="token comment"># c 0 0 3</span>diag<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># identity matrix</span><span class="token comment">#     [,1] [,2] [,3]</span><span class="token comment"># [1,]  1   0   0</span><span class="token comment"># [2,]  0   1   0</span><span class="token comment"># [3,]  0   0   1</span></code></pre></li><li><p>Array:</p><pre class="language-r" data-language="r"><code class="language-r">array<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># , , 1</span><span class="token comment">#</span><span class="token comment">#     [,1] [,2]</span><span class="token comment"># [1,]  1   2</span><span class="token comment">#</span><span class="token comment"># , , 2</span><span class="token comment">#</span><span class="token comment">#     [,1] [,2]</span><span class="token comment"># [1,]  3   4</span><span class="token comment">#</span><span class="token comment"># , , 3</span><span class="token comment">#</span><span class="token comment">#     [,1] [,2]</span><span class="token comment"># [1,]  5   6</span></code></pre></li><li><p>Vectors and matrices must have the same types of elements. If not, upcasting happens (logical &lt; integer &lt; double &lt; character).</p></li><li><p>Lists are vectors whose elements (1) can be any kinds of objects and (2) don’t have to be the same kind of object: <code>list(TRUE, 1:3, rnorm(3), data.frame(a = 1:2, b = 3:4))</code>. Lists can be given names in the same way vectors and data frames can be given names.</p></li><li><p>A data frame is like a matrix, but its columns can have different types (thus allowing spreadsheet-like data). Under the hood data frames are lists whose elements are vectors of the same<br>length.</p><pre class="language-r" data-language="r"><code class="language-r">data.frame<span class="token punctuation">(</span>ints <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> chars <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#   ints chars</span><span class="token comment"># 1  1    a</span><span class="token comment"># 2  2    b</span>names<span class="token punctuation">(</span>df<span class="token punctuation">)</span> <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token string">"index"</span><span class="token punctuation">)</span>df<span class="token comment">#     num index</span><span class="token comment"># 1    1    a</span><span class="token comment"># 2    2    b</span></code></pre></li><li><p>Install packages: <code>install.package(&quot;devtools&quot;)</code>, <code>install.packages(c(&quot;devtools&quot;, &quot;dplyr&quot;, &quot;tidyr&quot;))</code>, and <code>install_github(&quot;name/repo&quot;)</code>.</p></li><li><p>Import packages: <code>library(mpoly)</code> or <code>require(mpoly)</code>.</p></li><li><p>Specify the package from which a function is used: <code>mpoly::permutations(3)</code>. Do not use a dot.</p></li><li><p>Help: <code>?lm</code>, <code>help(lm)</code>, <code>help.search(&quot;generalized linear models&quot;)</code>, <code>sos::findFn(&quot;eastic net&quot;)</code>.</p></li><li><p><code>ls()</code>: lists all the variables in the global environment.</p></li><li><p><code>rm()</code>: removes variable from memory. To remove all, <code>rm(list = ls())</code>.</p></li><li><p><code>rnorm()</code> generates pseudo-random numbers from the normal distribution.</p></li><li><p><code>identical(x,y)</code> to test equality.</p></li></ul><p><a href="https://static1.squarespace.com/static/574311933c44d81acd102b0c/t/5752fd7f8a65e246000c4318/1465056644610/R-Crash-pdf.pdf">https://static1.squarespace.com/static/574311933c44d81acd102b0c/t/5752fd7f8a65e246000c4318/1465056644610/R-Crash-pdf.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
            <tag> Data Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Notes on Python - Phase 1</title>
      <link href="/2021/08/12/Python-Collections/"/>
      <url>/2021/08/12/Python-Collections/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>I take notes here as I learn Python (Phase 1).</p><span id="more"></span><p>!!! warning Fragmented Content<br>This post content may appear fragmented or disjointed for I only noted down things I think I need to look at a second time. Therefore, this post is primarily meant for personal consumption.</p><h2 id="Start-Python"><a href="#Start-Python" class="headerlink" title="Start Python"></a>Start Python</h2><ul><li>Type <code>python.exe</code> to start Python interpreter, which turns the current terminal into a Python terminal.<ul><li><code>start python.exe</code> to open a Python terminal it in a new window. For method of starting exe, check <a href="/2021/08/05/Common-CMD-Commands/" title="my other post on CMD Commands">my other post on CMD Commands</a>.</li><li>If <code>python.exe</code> does not work and PATH is correct, <a href="https://stackoverflow.com/questions/40914108/bash-python3-command-not-found-windows-discord-py">try <code>py</code>, <code>python</code>, <code>python3</code></a>.</li><li>Use <code>-O</code> or <code>-OO</code> switches on the Python command to reduce the size of a compiled module. The <code>-O</code> switch removes <code>assert</code> statements, the <code>-OO</code> switch removes both <code>assert</code> statements and <code>__doc__</code> strings.</li></ul></li><li>Type an end-of-file character (Ctrl-Z on Windows) or <code>quit()</code> at the primary prompt causes the interpreter to exit with a zero exit status.</li><li>Run a Python command after starting an interpreter by <code>python -c command [arg] ...</code></li><li>Run any source code file with <code>python &lt;file-name.py&gt;</code>; Yes, run directly from the source code.<ul><li>Use <code>-i</code> to run the script and after that open an interactive shell, which is usually what we want. That is, <code>python -i &lt;file-name.py&gt;</code>.</li><li>Use <code>-v</code> to show how <code>doctest</code> are run verbosely, which is usually what we want. That is <code>python -m doctest -v &lt;file-name.py&gt;</code>. (They will run automatically and silently. Usually, if nothing shows up, all tests are passed.)</li><li>Python is an interpreted language. For difference between compiler and interpreted languages, see <a href="https://www.bbc.co.uk/bitesize/guides/zgmpr82/revision/2">here</a>.</li></ul></li><li>By default, Python source files are treated as encoded in UTF-8. The standard library only uses ASCII characters for identifiers.<ul><li>That means you can choose to use characters beyond ASCII - but do not do that! It is a convention that any identifiers should use ASCII characters.</li><li>Change the encoding method by adding this as the first line of the source code file: <code># -*- coding: xxx -*-</code>. (UNIX “shebang” line should come even before that, if any)</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py"># This works fine - but not recommended.# Use ASCII only.にほんご &#x3D; 0我的数组 &#x3D; [&#39;एक&#39;,にほんご,4.99,(&quot;σ&quot;,&quot;α&quot;)]for вещь in 我的数组: print(вещь)</code></pre><ul><li>Besides the <code>print</code> calls, the Interactive Shell always prints the <strong>final</strong> returned value of each expression (not including evaluated results halfway; If the final returned value is a string, enclose them in quotes). If that value is <code>None</code> then nothing showed - but if you <code>print(None)</code> then a <code>None</code> is printed.</li></ul><h2 id="Behind-the-Hood"><a href="#Behind-the-Hood" class="headerlink" title="Behind the Hood"></a>Behind the Hood</h2><ul><li>Python evaluates a call expression with three steps:<ul><li>Evaluate the operator (operator are also expression that needs evaluation)</li><li>Evaluate the operands (left to right)</li><li>Apply the operator (a function) to the evaluated operands (arguments)</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">add(add(6, mul(4,6)), mul(3,5))- add(add(6,24),mul(3,5))- add(30,mul(3,5))- add(30,15)- 45</code></pre><ul><li><p>Python evaluates an assignment statement with two steps:</p><ul><li>Evaluate the expression at RHS and get its value</li><li>Check to see if the variable name at LHS currently exists in the current frame.<ul><li>If it does, then do re-bind the variable to the new value.</li><li>Otherwise, create a new variable in this frame, and set it to the given value.</li></ul></li></ul></li><li><p>Python interprets a function call in three steps:</p><ul><li>Create a new frame(local frame) in the environment</li><li>Bind the argument passed in to the parameters’ names, which live on the new frame</li><li>Execute the body of the function, in the new frame</li></ul></li><li><p>Python handles a for loop:</p></li></ul><pre class="language-py" data-language="py"><code class="language-py">for &lt;name&gt; in &lt;expression&gt;:  &lt;suite&gt;</code></pre><ul><li><p>Evaluate <code>&lt;expression&gt;</code>, which must returns a iterable value.</p></li><li><p>For each element in that iterable, do:</p><ul><li>Bind <code>&lt;name&gt;</code> to that element in the current frame (no new frame!)</li><li>Run <code>&lt;suite&gt;</code></li></ul></li><li><p>Scope</p><ul><li><p>A function is always evaluated in the same environment it was <strong>defined</strong> in, not where it is <strong>called</strong>.</p><ul><li>The function remembers the original frame it was defined in.</li><li>Upon running and encountering a name, Python searches in the local frame first, and if not found it goes to search the parent frame. The parent frame is the frame it is defined but not where it is called.<ul><li>In other words, it searches names in the current environment. An environment is a sequence of frame, starting from the local frame propagating up along its parent frame chain, all the way up to the global frame.</li></ul></li><li>In terms of nested function definitions, this evaluation method allows the inner functions to see variables defined by the enclosing function.</li></ul><pre class="language-py" data-language="py"><code class="language-py">x &#x3D; 10def f1():  x &#x3D; 5  f2()def f2():  print(x)def f3():  x &#x3D; 5  def f4():    print(x)    f2()f1() # 10f3() # 5</code></pre><ul><li><code>global</code>: access/create global variables (or even functions, classes or other objects) in a local context.</li><li><code>nonlocal</code>: access/create a variable of local scope from inside a nested function.</li></ul></li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py"># globalx &#x3D; 50z &#x3D; 50def bar():  global x,y  x &#x3D; 10  y &#x3D; 10  z &#x3D; 10  return (x,y,z)x1,y1,z1 &#x3D; bar()print(x1,y1,z1) #10 10 10print(x,y,z)    #10 10 50# non-localdef some_fun():  my_var1 &#x3D; 10  my_var2 &#x3D; 20  def some_nested_fun():    nonlocal my_var2    my_var1 &#x3D; 30    my_var2 &#x3D; 40  print(my_var1, my_var2) # 10, 40</code></pre><ul><li>Python searches for identifier in this order:<ul><li>Search in the local frame, and if not found</li><li>Search in the parent frame, and if not found, search a higher level parent frame</li><li>Until Python reaches the global frame. If the identifier is still not found, throw <code>NameError</code>.</li></ul></li></ul><h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><h3 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h3><ul><li>Variables and functions are named with all lowercase letters, separated with underscores <code>_</code>. (<code>name</code>, <code>test</code>, <code>do_this</code>).<ul><li>Lead one underscore for internal methods and instance variables (<code>_my_protected_method</code>).</li><li>Lead one underscore for private methods variables (<code>__my_private_method</code>).</li></ul></li><li>Functions that perform comparisons and return boolean values typically begin with is, not followed by an underscore (<code>isfinite</code>, <code>isdigit</code>, <code>isinstance</code>).</li><li>Class and Error names should normally use the CapWords convention. (<code>MyClass</code>, <code>Error</code>)</li><li>Module names should be all lowercase, without underscores. (<code>mymath.py</code>)</li></ul><h3 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h3><ul><li><code>import</code> statement should be at the front of the file, just behind any module comment and docstring, and before module globals and constants.</li><li>Separate different module on different lines.</li><li>Keep names in the same module at the same line.</li></ul><pre class="language-py" data-language="py"><code class="language-py">import sysimport osfrom types import StringType, ListType</code></pre><ul><li>Order imported module declaration using this order, and separate each with a blank line.<ul><li>Standard lib imports</li><li>Related major package imports</li><li>Application-specific imports</li></ul></li></ul><h3 id="Line-Break"><a href="#Line-Break" class="headerlink" title="Line Break"></a>Line Break</h3><ul><li>One line break:<ul><li>Separate functions in a class</li><li>Separate logical sections in a function (rarely)</li></ul></li><li>Two line breaks<ul><li>Separate groups of related functions</li></ul></li><li>No line breaks:<ul><li>Between a bunch of related one-liners.</li><li>Between a bunch of c</li></ul></li></ul><h3 id="White-Spaces"><a href="#White-Spaces" class="headerlink" title="White Spaces"></a>White Spaces</h3><ul><li>Yes:<ul><li>After commas, semicolons or colons</li><li>Around an arithmetic/boolean/comparison or assignment operator (<code>+</code>, <code>=</code>, <code>&lt;</code>, <code>and</code>, <code>not</code>, <code>:=</code>)</li></ul></li><li>No:<ul><li>Before commas, semicolons or colons</li><li>Inside parentheses, brackets or braces</li><li>Do not surround <code>=</code> with white space when it is indicating keyword arguments or default parameter values.</li></ul></li></ul><h3 id="Line-Indentation"><a href="#Line-Indentation" class="headerlink" title="Line, Indentation"></a>Line, Indentation</h3><ul><li><a href="https://stackoverflow.com/questions/1125653/python-using-4-spaces-for-indentation-why">4 spaces, or 2 spaces, or Tab?</a></li><li>Max 72 characters (never exceed 79 characters) for one line.<ul><li>Use line break <code>\</code>.</li></ul></li><li>No two expression on the same line</li></ul><h3 id="Comments-Docstring-Doctest"><a href="#Comments-Docstring-Doctest" class="headerlink" title="Comments, Docstring, Doctest"></a>Comments, Docstring, Doctest</h3><ul><li>Block comments<ul><li>Should start with <code># </code> (# and a space).</li><li>Have the same indentation level.</li><li>Paragraphing is allowed in block comments. (Just put a <code>#</code> without other stuff for a line.)</li><li>Surround block comments by a blank line above and below.</li></ul></li><li>In-line comments<ul><li>Should start with <code># </code> (# and a space).</li><li>Should be separated by at least two spaces from the statement they apply to.</li></ul></li><li>Docstring<ul><li>Write docstrings for all public modules, functions, classes, and methods.</li><li>Docstring is not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the “def” line.</li></ul></li><li>One-line Docstring:<ul><li>The opening and closing “”” are on the same line.</li><li>There is no blank line either before or after the docstring.</li><li>Describes the function or method’s effect as a command (“Do this”, “Return that”), not as a description.</li></ul></li><li>Multi-line Docstring:<ul><li>The <code>&quot;&quot;&quot;</code> that ends a multiline docstring should be on a line by itself.</li><li>Script: The docstring for a script should be usable as its “usage” message. It should document the script’s function, the command line syntax, and the environment variables.</li><li>Module: The docstring for a module should generally list the classes, exceptions and functions (and any other objects) that are exported by the module, with a one-line summary of each.</li><li>Class:<ul><li>The docstring for a class should summarize its behavior and list the public methods and instance variables.</li><li>If the class is intended to be subclassed, and has an additional interface for subclasses, this interface should be listed separately.</li><li>If a class subclasses another class and its behavior is mostly inherited from that class, its docstring should mention this and summarize the differences.</li><li>The class constructor should be documented in the docstring for its <code>__init__</code> method.</li><li>Insert a blank line before and after any docstring that document a class.</li></ul></li><li>Function or method:<ul><li>The docstring should summarizes its behavior and document its arguments, return value, side effects, exceptions raised, and restrictions on when it can be called.</li><li>Optional arguments should be indicated.</li><li>Use the verb “override” to indicate that a subclass method replaces a superclass method and does not call the superclass method; use the verb “extend” to indicate that a subclass method calls the superclass method.</li><li>The docstring should contain a summary line, followed by a blank line, followed by a more elaborate description.</li></ul></li></ul></li></ul><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><h3 id="Numericals-Booleans"><a href="#Numericals-Booleans" class="headerlink" title="Numericals, Booleans"></a>Numericals, Booleans</h3><ul><li>Quick facts<ul><li>Python does not have <code>double</code> or <code>char</code>. The <code>float</code> is in double precision.</li><li><code>/</code> division returns a float; <code>//</code> floor division returns an integer. Use the <code>**</code> operator to calculate powers.</li><li>In interactive mode, the last printed expression is assigned to the variable <code>_</code>.</li><li>Boolean literals are <code>True</code> and <code>False</code> (instead of <code>true</code> <code>false</code>).</li><li>Logical operations are <code>and</code> <code>or</code> and <code>not</code> instead of <code>&amp;&amp;</code> <code>||</code> and <code>!</code> - BUT ‘does not equal to’ is still <code>!=</code>.</li><li><code>and</code> and <code>or</code> does not return <code>True</code> or <code>False</code>; it returns the first operand that determines the result; <code>not</code>, however, always returns a boolean value.</li><li>Any object can be tested for truth value (put as an <code>if</code> condition). The following are considered <code>False</code>: <code>None</code>, any numerical zero, any empty sequence/mapping (<code>&quot;&quot;,[]</code>etc), and any instances of user-defined class when <code>__len__()</code> is defined and returns <code>0</code> (integer), or when <code>__nonzero__()</code> is defined and returns <code>False</code>. Any other values are true.</li><li>Bitwise operators are still <code>&amp;</code> <code>|</code> <code>~</code> and <code>^</code>.</li><li>Use <code>**</code> for exponents instead of <code>^</code>.</li><li>No <code>char</code> or <code>long</code>.</li><li>Use <code>#</code> to lead a line comment, triple quotes to surround a multi-line comment.</li><li>Chain comparison operators like this: <code>1&lt;x&lt;5&lt;x**2</code></li><li>Ternary (<code>exp ? a : b</code> in many other languages) is <code>a if exp else b</code> in Python.</li><li>Conversion can be done easily: <code>float(&#39;12&#39;)</code>,<code>bool([])</code>,<code>str(12312)</code> etc.</li><li>All numerical types support <code>max()</code>,<code>min()</code>,<code>abs()</code>,<code>round()</code> and <code>pow()</code>. For <code>sqrt()</code>, you have to import <code>math</code>.</li><li>The <code>operator</code> module has functions that corresponds to an operator.(e.g. <code>add</code> <code>mul</code> <code>truediv</code> <code>floordiv</code>); <code>pow</code> is the only one already available.</li><li>Use <code>bin()</code> to get bit-string for numbers. For example, <code>bin(3)</code> returns <code>&#39;0b11&#39;</code></li></ul></li><li>Complex: Python support natively <code>complex</code> type.</li></ul><pre class="language-py" data-language="py"><code class="language-py">my_complex &#x3D; 4.22 + 20jmy_complex &#x3D; complex(4.22, 20)</code></pre><ul><li>Fraction: Python has a library from fractions.</li></ul><pre class="language-py" data-language="py"><code class="language-py">from fractions import Fractionhalf &#x3D; Fraction(1,2)</code></pre><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><ul><li>String supports slicing, <code>+</code>, <code>*</code>, and membership test. Two or more string literals (not variables or expressions) next to each other are automatically concatenated.</li></ul><pre class="language-py" data-language="py"><code class="language-py">p &#x3D; &#39;Py&#39; &#39;thon&#39;print(p) # Pythonprint(p + p) #PythonPythonprint(p * 3) #PythonPythonPythonlongstr &#x3D; (&#39;Put several strings within parentheses &#39;         &#39;to have them joined together.&#39;)print(&quot;234&quot; in &quot;12345&quot;) #True</code></pre><ul><li>String supports indexing and slicing. Attempting to use an index that is too large will result in an error, but out of range slice indexes are handled gracefully (with modulo operation) when used for slicing.<ul><li>There is no <code>char</code>. Indexer returns a string.</li></ul></li><li>Use <code>r</code> to lead non-escaped raw string literals (like <code>@</code> in C#, e.g., <code>r&#39;New lines are marked by \n&#39;</code>).</li><li>Use <code>u</code> to lead a Unicode string literal (e.g., <code>u&#39;Hello\u0020World !&#39;</code> is <code>Hello World !</code>).</li><li>Use <code>&quot;&quot;&quot; &quot;&quot;&quot;</code> (or <code>&#39;&#39;&#39; &#39;&#39;&#39;</code>) to surround a string that spans multiple lines.</li><li>Strings are immutable; all methods that seem to modify string do not actually modify the original strings but return a new string.</li><li><a href="https://stackoverflow.com/questions/2220699/whats-the-difference-between-eval-exec-and-compile"><code>eval</code> and <code>exec</code></a></li></ul><pre class="language-py" data-language="py"><code class="language-py">myStr &#x3D; &quot;012345abcde_WASD&quot;print (myStr.startswith(&#39;01&#39;) and myStr.endswith(&#39;D&#39;)) # prints Trueprint (&#39;W&#39; in myStr or &#39;w&#39; not in myStr) # prints Trueprint (myStr.find(&#39;a&#39;)) # prints 6;# the find() method can take in two optional arguments for start and end index to search# same as Java&#x2F;C# IndexOf; returns -1 if not found# there is also a index() method which behaves the same but throw an error when not foundstr2 &#x3D; &quot;this is string example....wow!!! this is really string&quot;print str2.replace(&quot;is&quot;, &quot;was&quot;) # thwas was string example....wow!!! thwas was really stringprint str2.replace(&quot;is&quot;, &quot;was&quot;, 3) # thwas was string example....wow!!! thwas is really string# the third optional argument limits the number of replacementdelimiter &#x3D; &#39;*-*&#39;myList &#x3D; [&#39;Me&#39;,&#39;My&#39;,&#39;I&#39;]print(delimiter.join(myList)) # prints Me*-*My*-*Itxt &#x3D; &quot;Google#Taobao#Facebook&quot;print(txt.split(&quot;#&quot;)) # [&#39;Google&#39;, &#39;Taobao&#39;, Facebook&#39;]print(txt.split(&quot;#&quot;,1)) # [&#39;Google&#39;, &#39;Taobao#Facebook&#39;]# the second optional argument limits the number of split# for multiple delimiters: import re and use regexprint (&quot;My name is %s and weight is %d kg!&quot; % (&#39;Zara&#39;, 21))print (&quot;My name is &#123;0&#125; and weight is &#123;1&#125; kg!&quot;.format(&#39;Zara&#39;, 21))# Both prints &quot;My name is Zara and weight is 21 kg!&quot;# String literals can be used as variables directly.print(len(my_string)) # Returns the length of a stringprint(ord(&quot;c&quot;)) # 99 # Returns a Unicode of a characterprint(chr(ord(&quot;c&quot;))) # c # Returns Converted the Unicode to a character</code></pre><ul><li><p>String Formatting</p><ul><li><p><a href="https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings">Formatted string literals(“f-string”)</a>: String literals that have embedded expressions.</p><ul><li>f strings uses <code>str()</code> to evaluate each expression</li></ul><pre class="language-py" data-language="py"><code class="language-py">from fractions import Fractionprint(f&quot;half &#x3D; &#123;Fraction(1,2)&#125;&quot;)# half &#x3D; 1&#x2F;2</code></pre><ul><li>expressions are evaluated in current environment</li></ul><pre class="language-py" data-language="py"><code class="language-py">s &#x3D; -3x &#x3D; f&quot;abs(s)&#x3D;&#123;abs(s)&#125;&quot;print(x) #abs(s)&#x3D;3abs &#x3D; floatprint(f&quot;abs(s)&#x3D;&#123;abs(s)&#125;&quot;) #abs(s)&#x3D;-3.0print(x) #abs(s)&#x3D;3</code></pre><ul><li>Remember this may have side-effects.</li></ul><pre class="language-py" data-language="py"><code class="language-py">s &#x3D; [1,2,3]print(f&quot;last element is &#123;s.pop()&#125;&quot;)# now s only have two elements left</code></pre></li><li><p><a href="https://docs.python.org/3.9/library/string.html#formatstrings">Format String Syntax</a>: Information about string formatting with <code>str.format()</code>.</p></li><li><p><a href="https://docs.python.org/3.9/library/stdtypes.html#old-string-formatting"><code>printf</code>-style String Formatting</a>: The old formatting operations invoked when strings are the left operand of the % operator are described in more detail here.</p></li><li><p><a href="https://docs.python.org/3.9/library/stdtypes.html#string-methods">Style-making methods</a> (stripping empty spaces, capitalization, justification and padding)</p><ul><li><code>strip()</code>, <code>upper()</code>, <code>lower()</code>, <code>swapcase()</code>. All these return a modified string without changing the original string</li></ul></li></ul></li><li><p>Encoding</p></li></ul><pre class="language-py" data-language="py"><code class="language-py">from unicodedata import name, lookupprint(name(&#39;A&#39;)) # LATIN CAPITAL LETTER Alookup(&#39;WHITE SMILING FACE&#39;) #☺print(&#39;A&#39;.encode()) #b&#39;A&#39;print(lookup(&#39;BABY&#39;).encode()) #b&#39;\xed\xa0\xbd\xed\xb1\xb6&#39;</code></pre><h3 id="Related-Built-in-functions"><a href="#Related-Built-in-functions" class="headerlink" title="Related Built-in functions"></a>Related Built-in functions</h3><pre class="language-py" data-language="py"><code class="language-py"># type() Returns the class_name of an object.a &#x3D; &quot;What?&quot;print(type(a)) # strb &#x3D; 1+1jprint(type(b)) # complex# isinstance() Checks if a object is an instance of a particular class. Returns True&#x2F;False.a &#x3D; 23print(isinstance(a, int)) # Trueprint(isinstance(a, float)) # Falseprint(isinstance(a, str)) # False# id() Returns object id (int) of a object.my_float &#x3D; 50.0# object id wil differ each time with programprint(id(my_float)) # 1875526208176# is Keyword# &#x3D;&#x3D; tests for value equality. Use it when you would like to know if two objects have the same value.## &#x3D;&#x3D; does as what you think it does for strings and lists## &#x3D;&#x3D; uses the __eq__() method to compare two objects (if not defined, &#x3D;&#x3D; check memory location equality)## implementing __eq__() automatically makes instances of your class unhashable, which means they can&#39;t be stored in sets and dicts.# is tests for reference equality. Use it when you would like to know if two references refer to the same object.a, b &#x3D; list, list[:]print(a &#x3D;&#x3D; b) #Trueprint(a is b) #False</code></pre><h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><h3 id="Quick-facts"><a href="#Quick-facts" class="headerlink" title="Quick facts"></a>Quick facts</h3><ul><li>Python is a dynamically typed (type safety is checked at runtime). Variables are not declared as a certain type but are instead given a value directly.</li><li>Do not need any semicolon at the end of the expression (you can add one if you want); but if multiple expressions are on the same line, separate them with a semicolon (this is a bad practice).</li><li>Multiple assigment at the same time: <code>x, y = y, x + y</code>.<blockquote><p>This order of events – evaluating everything on the right of <code>=</code> before updating any bindings on the left – is essential for correctness…</p><footer><strong>John DeNero, Composing Programs</strong><cite><a href="http://composingprograms.com/pages/15-control.html">Chapter 1.5 Control</a></cite></footer></blockquote></li><li>De-construct assignment</li></ul><pre class="language-py" data-language="py"><code class="language-py">(a, (b, c)) &#x3D; (1, (2, 3))first, *middles, last &#x3D; range(5)foo,bar &#x3D; bar,foo</code></pre><ul><li>Use <code>\&lt;newline&gt;</code> to split an expression to multiple lines. For example:</li></ul><pre class="language-py" data-language="py"><code class="language-py">i &#x3D; \5</code></pre><h3 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h3><ul><li>Python use indentation instead of <code>&#123;&#125;</code> to mark code blocks. (This is because Python is an interpreter language?)<ul><li>Python doesn’t mind whether you use two spaces or four spaces (or any other number of spaces) as long as you are consistent.</li><li>Inconsistent indentation results in <code>IndentationError: unindent does not match any outer indentation level</code>.</li></ul></li><li><code>if</code> and <code>while</code> use <code>:</code> instead of <code>()</code>.</li><li><code>for</code> iterates over the items of any iterable in the order that they appear in the iterable. (Somewhat like the <code>foreach</code> in C#).<ul><li>Unlike <code>foreach</code>, code that modifies a collection while iterating over that same collection is allowed but error-prone. It is usually more straight-forward to loop over a copy of the collection or to create a new collection.</li></ul></li><li><code>pass</code> is used as a placeholder to empty expression. It is used when a statement is required syntactically but you do not want any command or code to execute. Think of <code>pass</code> as an empty block.</li><li><code>for</code> and <code>while</code> can be followed by an <code>else</code> (the codes in <code>else</code> will be run after the <code>for</code> is finished, unless the program runs into a <code>break</code>).</li></ul><pre class="language-py" data-language="py"><code class="language-py">#ifif guess &#x3D;&#x3D; number:  print(&quot;Yes&quot;)elif guess &lt; number:  print(&quot;Too small&quot;)else:  print(&quot;Too large&quot;)if (guess &#x3D;&#x3D; number): print(&quot;Ok&quot;) # in one line only# Faster ways to test numbersif 3 &lt;&#x3D; x &lt; 9:  passif x in tange(3,8):  pass#whilewhile True:  print(&quot;True&quot;)while chunk :&#x3D; fp.read(200): # Assignment expressions using the walrus operator :&#x3D; assign a variable in an expression   print(chunk)total &#x3D; 0while k &lt;&#x3D; n: # Compress the code  total, k &#x3D; total + k, k + 1#forfor i in range(1,5):  print(i) # 1,2,3,4for _ in range(1,3): # When index is not important, use _  print(&quot;Hi!&quot;)for j in reversed(range(1,6,2)):  print(j) # 5,3,1for num in numbers: # numbers is a tuple or list  print(num)for i, item in enumerate(iterable): # To access index, use enumerate()  print i, itemfor x,y in [[1,2],[4,5],[0,9]]: # Unpack list in for  print(x, y)# Here is another example:questions &#x3D; [&#39;name&#39;, &#39;quest&#39;, &#39;favorite color&#39;]answers &#x3D; [&#39;lancelot&#39;, &#39;the holy grail&#39;, &#39;blue&#39;]for q, a in zip(questions, answers):#To loop two lists simultaneously, use zip()    print(&#39;What is your &#123;0&#125;?  It is &#123;1&#125;.&#39;.format(q, a))#for and elsefor i in foo:    if i &#x3D;&#x3D; 0:        breakelse:    print(&quot;i was never 0&quot;)#passif 3 &gt; 5: passelse:  print(&quot;Why?&quot;)</code></pre><h3 id="Define-a-function"><a href="#Define-a-function" class="headerlink" title="Define a function"></a>Define a function</h3><ul><li><p>Return type is not specified at signature; by default <code>return None</code>.</p></li><li><p>Return multiple values by passing out a tuple.</p></li><li><p><strong>Keyword arguments</strong></p><ul><li>Must not be followed by positional arguments (positionally accessed arguments). Never.</li><li>Limit the ways that functions can be called with <code>/</code> and <code>*</code>. This feature cannot be used together with variadic parameters.</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">def standard_arg(arg):    print(arg)def pos_only_arg(arg, &#x2F;):    print(arg)def kywd_only_arg(*, arg):    print(arg)def combined_example(pos_only, &#x2F;, standard, *, kywd_only):    print(pos_only, standard, kywd_only)</code></pre><ul><li><strong>Parameters with default value</strong><ul><li>Must not be followed by non-default parameters, except variadic positional parameters.</li><li>Mutable default arguments are dangerous!</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">def foo(a, b &#x3D; 1): # b as standard parameter  passdef foo2(a, *, b &#x3D; 1): # b as keyword-only parameter  passdef foo3(a, b &#x3D; 1, &#x2F;): # b as positional-only parameter  passfoo(1,2)     # okfoo(1,b&#x3D;2)   # okfoo2(1,2)    # TypeError: foo2() takes 1 positional argument but 2 were givenfoo2(1,b&#x3D;2)  # okfoo3(1,2)    # okfoo3(1,b&#x3D;2)  # TypeError: foo3() got some positional-only arguments passed as keyword arguments: &#39;b&#39;## Mutable default arguments are dangerous!def f(s &#x3D; []):    s.append(5)    return len(s)f() # 1f() # 2f() # 3</code></pre><ul><li><strong>Variadic parameter</strong>: use <code>*args</code> or <code>**kwargs</code>.<ul><li>Any formal parameters which occur after the <code>*args</code> parameter are considered ‘keyword-only’ arguments - these arguments have to be passed in by keywords.</li><li>Cannot have more than one <code>*</code> or more than one <code>**</code>.</li><li><code>**kwargs</code> must not be followed by any parameter.</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">def total(a &#x3D; 1, *numbers, **phonebook):  print(&#39;a &#x3D; &#123;0&#125;&#39;.format(a))total(100,1,2,3,4,Jack&#x3D;123,Mike&#x3D;357,b&#x3D;15) # a &#x3D; 100</code></pre><ul><li>Variadic arguments will be last in the list of formal parameters.<ul><li>You cannot have any formal argument following a variadic dictionary argument.</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">def sumPow(*nums,pow&#x3D;2):  sum &#x3D; 0  for num in nums:    sum +&#x3D; num ** pow  return sumprint(sumPow(3,4,5)) #50 &#x3D; 9+16+25print(sumPow(3,4,pow&#x3D;5)) #1267 &#x3D;3^5+4^5def bar(arg, kywd_arg &#x3D; 0, *pos_vari_arg, **kywd_vari_arg):  print(arg, kywd_arg, pos_vari_arg, kywd_vari_arg)bar(0,1,2,3,4,foo&#x3D;5, test&#x3D;6)#0 1 (2, 3, 4) &#123;&#39;foo&#39;: 5, &#39;test&#39;: 6&#125;bar(0,1,2,3,4,foo&#x3D;5, test&#x3D;6, default_arg &#x3D; 99)#TypeError: bar() got multiple values for argument &#39;default_arg&#39;def bar2(arg, *vari_arg, default_arg &#x3D; 99, **vari_kwarg):  print(arg, default_arg, vari_arg, vari_kwarg)bar2(0,1,2,3,4,foo&#x3D;5, test&#x3D;6)#0 99 (1, 2, 3, 4) &#123;&#39;foo&#39;: 5, &#39;test&#39;: 6&#125;</code></pre><ul><li>De-construct arguments</li></ul><pre class="language-py" data-language="py"><code class="language-py">def showPow(x, y):    print(x**y)point_foo &#x3D; (3, 4)point_bar &#x3D; &#123;&#39;y&#39;: 3, &#39;x&#39;: 2&#125;showPow(*point_foo) # 81showPow(**point_bar) # 8</code></pre><ul><li>Anonymous functions<ul><li>If using Lambda: syntactically restricted to a single expression.</li><li><code>def</code> is a statement, while <code>lambda</code> is an expression. Evaluating a <code>def</code> statement will have a side-effect, namely it creates a new function binding in the current environment. On the other hand, evaluating a <code>lambda</code> expression will not change the environment unless we do something with the function created by the <code>lambda</code>. For instance, we could assign it to a variable or pass it as a function argument (most of the time we actually do those).</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py"># Lambda: only a single expression as body (no statement!), and it will return that expressioncube &#x3D; lambda x: x ** 3print(cube(3)) # 125print(len)     # &lt;built-in function len&gt;print(cube)    # &lt;function &lt;lambda&gt;&gt;# It does not have a intrinsic name! &quot;cube&quot; is just a way to refer to this func objectdef make_repeater(n):    return lambda x: x * ntwice &#x3D; make_repeater(2)print(twice(&#39;word&#39;))print(twice(5))</code></pre><ul><li>Function Annotations: You can annotate the parameters and return type and access it with the function’s <code>__annotation__</code> field. This is completely optional and has no effect on function’s functionality.</li></ul><pre class="language-py" data-language="py"><code class="language-py">def f(ham: str, eggs: str &#x3D; &#39;eggs&#39;) -&gt; str:    return &#39;breakfast!&#39;print(f.__annotations__)# This prints &#123;&#39;ham&#39;: &lt;class &#39;str&#39;&gt;, &#39;return&#39;: &lt;class &#39;str&#39;&gt;, &#39;eggs&#39;: &lt;class &#39;str&#39;&gt;&#125;</code></pre><ul><li>Rebinding functions</li></ul><p>Just define a second function with the same signature below will override the first function/originally imported function. You can also assign value to a already existing function name.</p><pre class="language-py" data-language="py"><code class="language-py">from operator import addprint(pow(2,3)) # 8def pow(x,y):    return &quot;H!&quot;print(pow(2,3)) # H!pow &#x3D; addprint(pow(2,3)) # 5</code></pre><p>Note that functions are also objects. Assignment and identity test are done on a reference level.</p><pre class="language-py" data-language="py"><code class="language-py">f &#x3D; max # both max and f points to the built-in max objectmax &#x3D; min # the built-in max object has its no. of handle -1, because &#39;max&#39; now points to the built-in min objectprint(max(3,4))       # prints 3print(f(3,4))         # prints 4print(max &#x3D;&#x3D; min)     # prints Trueprint(max &#x3D;&#x3D; f)       # prints False (max now references the built-in min object)print(min &#x3D;&#x3D; f)       # prints False</code></pre><ul><li>Decorator</li></ul><pre class="language-py" data-language="py"><code class="language-py">def trace(fn):  def wrapped(x):    print(&#39;&#123;&#125; is called on argument &#123;&#125;&#39;.format(fn,x))    return fn(x)  return wrappeddef cube(x):  return x ** 3cube &#x3D; trace(cube)@trace  # This achieves basically the same effect as abovedef square(x):  return x * x</code></pre><h3 id="Define-a-Class"><a href="#Define-a-Class" class="headerlink" title="Define a Class"></a>Define a Class</h3><ul><li>Constructors work the same way as in C#/Java. If a user-defined constructor is supplied, the parameterless argument will not be added by the compiler.</li><li><code>self</code> in Python is like <code>this</code> in C#/Java. You need a <code>self</code> as the first argument for every class method.</li><li>All variables are public. Inside a class, use “_“ underscore for protected, and “**” double underscore for private (e.g., <code>**name</code>).</li><li>Refer <a href="https://diveintopython3.net/special-method-names.html">here</a> for special method names.</li></ul><pre class="language-py" data-language="py"><code class="language-py">class Person: # Define a class    &quot;&quot;&quot;Represents a person&quot;&quot;&quot;    population &#x3D; 0 # Static variable for the class    # Variables declared inside the class definition, but not inside a method are class or static variables    # Note that you can access this from instance level, too. So print(jack.population) works.    # You could have another &quot;population&quot; variable defined in instances as well!!!    @classmethod    def report_population(cls):        return cls.population    @staticmethod    def report_population_2():        return Person.population    # Both class method can static method can be called by instance or from class level    # The difference is class method takes in the current class as an argument    def __init__(self, name, age &#x3D; 18): # Constructor        self.name &#x3D; name # Instance variable - no need to declare beforehand        self.age &#x3D; age        Person.population +&#x3D; 1 # Access the static variable        print(name + &#39; joined!&#39;)    def sayHi(self): # Any method defined in class should have the first argument: self        &quot;&quot;&quot;Give a greeting&quot;&quot;&quot;        print(&#39;Hello, I am &#123;0&#125;. How are you?&#39;.format(self.name))    def __del__(self): # Destructor; Called when an instance is garbage collected        Person.population -&#x3D; 1        if Person.population &#x3D;&#x3D; 0:            print(&#39;I am the last one.&#39;)        else:            print(self.name + &#39; left!&#39;,end&#x3D;&quot; &quot;)            print(&#39;There are still %d people left.&#39; % Person.population)    def __str__ (self):        return &#39;I am a simple person named &#39; + self.name    # You can overwrite repr() too    def __lt__(self,other): # implement &lt; operator        return self.name &lt; other.name    # The other operators to implement: le, gt, ge, eq, ne, pos, neg, add&#x2F;radd, sub&#x2F;rsub, pow, mod, divmod, mul, and, or, xor, iadd(+&#x3D;), isub(-&#x3D;), lshift, rshift    # you can do __radd__ &#x3D; __add__ if the add is commutative    def __bool__(self):        return self.age &gt;&#x3D; 18    # This is invoke when you try to convert a person object to bool.    # It is also used when you pass this object into if condition    # The other conversion methods can be: float, int    def __getitem__(self, key): # indexer        return name[key]    # you can have a __setitem__(self, key, value), __missing__(nonexistent_key) too    def __len__(self) # override len        return len(self.name)    def __call__(self, k):        print(k)    # If __call__ is defined, you could use this object like a function. It becomes callable.Mike &#x3D; Person(&#39;Mike&#39;) # Mike joined!Sarah &#x3D; Person(&quot;Sarah&quot;) # Sarah joined!Sarah.sayHi() # Hello, I am Sarah. How are you?Sarah &#x3D; Mike # Sarah left! There are still 1 people left.class StudyMixin: # Another class, acts as interface    passclass Student(Person, StudyMixin): # Define a child class that inherits two parents    &quot;&quot;&quot;Represents a student; a child class of Person&quot;&quot;&quot;    def __init__(self, name, age, sch):        super().__init(name, age) # Use super()        self.school &#x3D; sch</code></pre><ul><li>Documentation Strings<ul><li>Declared using triple quotes just below the class, method declaration, or at the beginning of each source file(module), before the <code>import</code> statements.</li><li>Accessed by <code>__doc__</code> or <code>help()</code>.</li><li>The doc string line should begin with a capital letter and end with a period.</li><li>The first line should be a short description.</li><li>If there are more lines in the documentation string, the second line should be blank; the following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.</li><li>There are various formats to write doc strings. Check <a href="https://realpython.com/documenting-python-code/#docstring-formats">here</a>.</li><li>The lines that begin with <code>&gt;&gt;&gt;</code> are called doctest. Recall that when using the Python interpreter, you write Python expressions next to <code>&gt;&gt;&gt;</code> and the output is printed below that line. Doctests explain what the function does by showing actual Python code.</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">class SimpleClass:    &quot;&quot;&quot;Class docstrings go here.&quot;&quot;&quot;    def say_hello(self, name: str):        &quot;&quot;&quot;Class method docstrings go here.        This method says hello!        &gt;&gt;&gt; say_hello(&quot;Mike&quot;)        Hello Mike        &quot;&quot;&quot;        print(f&#39;Hello &#123;name&#125;&#39;)print(demo.__doc__)help(demo)</code></pre><ul><li>Enum</li></ul><pre class="language-py" data-language="py"><code class="language-py">from enum import Enumclass Color(Enum):    RED &#x3D; 1 #member values can be anything    GREEN &#x3D; 2    BLUE &#x3D; 3    FF0000 &#x3D; 1 #Values can be repeated; they act as aliasesprint(Color(1) &#x3D;&#x3D; Color[&#39;RED&#39;]) # Trueprint(Color.RED is Color.RED) #Trueprint(Color.RED.name) # REDprint(Color.RED.value) # 1print(Color.RED) # this gives Color.REDtype(Color.RED) # &lt;enum &#39;Color&#39;&gt;isinstance(Color.GREEN, Color) # Truefor col in Color: print(col) # prints all colors#Flag enumclass Perm(IntFlag):    R &#x3D; 4    W &#x3D; 2    X &#x3D; 1    RWX &#x3D; 7</code></pre><ul><li>Related built-in functions</li></ul><pre class="language-py" data-language="py"><code class="language-py"># string representation# For most object types, eval(repr(statement)) &#x3D; calling the statement# In interactive shell, the result is print(repr(result))&gt;&gt;&gt; 12e121200000000000.0&gt;&gt;&gt; print(repr(12e12))1200000000000.0&gt;&gt;&gt; s &#x3D; &quot;Hello&quot;&gt;&gt;&gt; s&#39;Hello&#39;&gt;&gt;&gt; repr(s)&quot;&#39;Hello&#39;&quot;&gt;&gt;&gt; print(repr(s))&#39;Hello&#39;&gt;&gt;&gt; print(s)Hello&gt;&gt;&gt; str(s)&#39;Hello&#39;&gt;&gt;&gt; print(str(s))Hello&gt;&gt;&gt; eval(repr(s))&#39;Hello&#39;&gt;&gt;&gt; repr(repr(repr(s)))&#39;\&#39;&quot;\\\&#39;Hello\\\&#39;&quot;\&#39;&#39;&gt;&gt;&gt; eval(s)Error# str(), repr() can only be called at a class level; any instance calling is still the same as calling at the class level. This means: str(a) is actually type(a).__str__(a) and not a.__str__()# calling str() when there is no __str__ would use __repr__class Bear:    def __init__(self):        self.__repr__ &#x3D; lambda: &#39;override repr&#39;        self.__str__ &#x3D; lambda: &#39;override str&#39;    def __repr__(self):        return &#39;repr&#39;    def __str__(self):        return &#39;str&#39;&gt;&gt;&gt; oski &#x3D; Bear()&gt;&gt;&gt; oskirepr&gt;&gt;&gt; print(oski)str&gt;&gt;&gt; str(oski)&#39;str&#39;&gt;&gt;&gt; repr(oski)&#39;repr&#39;&gt;&gt;&gt; str(Bear)&quot;&lt;class &#39;__main__.Bear&#39;&gt;&quot;&gt;&gt;&gt; repr(Bear)&quot;&lt;class &#39;__main__.Bear&#39;&gt;&quot;&gt;&gt;&gt; oski.__repr__()&#39;override repr&#39;&gt;&gt;&gt; oski.__str__()&#39;override str&#39;# dot operatorhasattr()setattr()</code></pre><h3 id="Iterator-Generator"><a href="#Iterator-Generator" class="headerlink" title="Iterator/Generator"></a>Iterator/Generator</h3><ul><li>An iterable (Like <code>IEnumerable</code> in C#) is an object where we can go through its elements one at a time (e.g., can be iterated with <code>for</code>). Specifically, we define an iterable as any object where calling the built-in <code>iter</code> function on it returns an iterator; It must have an<code>__iter__()</code> method that returns an iterator object (like <code>GetEnumerator()</code> in C# that returns an <code>IEnumerator</code> object), or defines a <code>__getitem__()</code> method that can take sequential indexes starting from zero (and raises an <code>IndexError</code> when the indexes are no longer valid).</li><li>An iterator (Like <code>IEnumerator</code> in C#) is another type of object which can iterate over an iterable by keeping track of which element is next in the iterable. You can also call <code>iter</code> on the iterator itself, which will just return the same iterator without changing its state. This class can be thought as a helper class which should implement <code>__next()__</code> (and raises <code>StopIteration</code> upon running out). In C#, a helper <code>IEnumerator</code> class which has <code>Current</code> <code>MoveNext()</code> <code>Reset()</code> must be implemented.<ul><li>Usually, we let the <code>__iter__()</code> return <code>this</code> and write the <code>__next__()</code> method inside the same class, instead of making two classes.</li></ul></li><li>Analogy: An iterable is like a book (one can flip through the pages) and an iterator for a book would be a bookmark (saves the position and can locate the next page). Calling <code>iter</code> on a book gives you a new bookmark independent of other bookmarks, but calling <code>iter</code> on a bookmark gives you the bookmark itself, without changing its position at all. Calling <code>next</code> on the bookmark moves it to the next page, but does not change the pages in the book. Calling <code>next</code> on the book wouldn’t make sense semantically. We can also have multiple bookmarks, all independent of each other.</li></ul><pre class="language-py" data-language="py"><code class="language-py"># Call iter() on a iterable to get an iteratoriterator &#x3D; iter(iterable)try:    while True:        elem &#x3D; next(iterator)        # do somethingexcept StopIteration:    pass# This would return itself, with the state unchanged.iter_copy &#x3D; iter(iterator)# This returns a new, fresh iteratoranother_iter &#x3D; iter(iterable)# Iterator can be used as an iterable in forlist_iter &#x3D; iter([4, 3, 2, 1])for e in list_iter:     print(e)# but you cannot do for a second time on this# This is because iterator is exhaustedlist(another_iter)# This would also exhaust an iterator# Generally, any attempt to &quot;list&quot; the iterator exhaust it# Calling for loop on an exhausted iterator won&#39;t throw an error; it just does nothing# iterator of an iterable always tracks the latest update of the iterableli &#x3D; [3,4]it &#x3D; iter(li)print(next(it)) # 3print(next(it)) # 4li.append(5)print(next(it)) # 5print(next(it)) # StopIteration# For dictionary however, adding&#x2F;removing elements makes all its iterator invalid# You don&#39;t have this problem with listdict &#x3D; &#123;&quot;one&quot;:1, &quot;two&quot;:2, &quot;three&quot;:3&#125;it &#x3D; iter(dict) # same as iter(dict.keys); for values&#x2F;kvp, use &#96;values&#96;&#x2F;&#96;items&#96;print(next(it))dict[&quot;four&quot;] &#x3D; 4 # RuntimeError: dictionary changed size during iterationprint(next(it))# use hasattr to check if some object has some particular functionprint(hasattr(my_iter, &quot;__iter__&quot;)) # Trueprint(hasattr(list, &#39;__iter__&#39;)) # Trueprint(hasattr(tuple, &#39;__iter__&#39;)) # True# Make a class both an iterable and an iteratorclass SquareIterator: # Both an iterable and an iterator  &quot;&quot;&quot;SquareIterator takes items and returns item&#39;s square upon call&quot;&quot;&quot;  def __init__(self, *args):    self.args &#x3D; args    self.iter_len &#x3D; len(args)-1  def __iter__(self):    &quot;&quot;&quot;This method is used to initialize a iterator, it returns an iterator object.&quot;&quot;&quot;    self.idx &#x3D; -1 # we initialize index    return self  def __next__(self):    &quot;&quot;&quot;This method is used to fetch next value, it can be called or loops do call it automatically.&quot;&quot;&quot;    self.idx +&#x3D; 1    if self.idx &gt; self.iter_len:      raise StopIteration    return self.args[self.idx]**2my_iter &#x3D; SquareIterator(10,20,30,40,50)my_iter &#x3D; iter(my_iter) # initialize iteratorprint(next(my_iter)) # 100print(my_iter.__next__()) # 400for v in my_iter: print(v) # for loop call __iter__ and __next__ functions on a iterable</code></pre><ul><li>Generator: A method has at least one <code>yield</code> statement and returns a generator object when we call it, without evaluating the body of the generator function itself. When we first call <code>next</code> on the returned generator, then we will begin evaluating the body of the generator function until an element is yielded or the function otherwise stops (such as if we <code>return</code>). The generator remembers where we stopped, and will continue evaluating from that stopping point on the <code>next</code> time we call next.</li></ul><pre class="language-py" data-language="py"><code class="language-py">def count_three():# generator without loop  yield 1  yield 2  yield 3for a in count_three():  print(a)def countdown(n):    print(&quot;Beginning countdown!&quot;)    while n &gt;&#x3D; 0:        yield n        n -&#x3D; 1    print(&quot;Blastoff!&quot;)c1, c2 &#x3D; countdown(3), countdown(3) # Does not print anythingprint(c1 is iter(c1)) # True, a generator object is an iteratorprint(c1 is c2) # Not the same iteratornext(c1) # Beginning countdown! 2def my_generator(*args): # generator with a loop  for a in args:    yield agenerator &#x3D; my_generator(10,20,30,40,50)generator &#x3D; (a for a in [10,20,30,40,50]) # or using comprehensionprint(type(generator)) # &lt;class &#39;generator&#39;&gt;print(next(generator)) # 10for a in generator:  print(a) # loop over all valuesdef gen_list(lst): # You can do yield from an iterator or iterable.  yield from lstdef gen_list2(lst):  yield from iter(lst)# mix return and yielddef f(x):  yield x  yield 1  return x + 1 # not yielded using next(); returned value lost  yield 2 # never reacheddef h(x):  y &#x3D; yield from f(x)  yield y # in this way you can get the returned value# Recursive generatordef primes_gen(n):  &quot;&quot;&quot;Generates primes in decreasing order.  &gt;&gt;&gt; pg &#x3D; primes_gen(7)  &gt;&gt;&gt; list(pg)  [7, 5, 3, 2]  &quot;&quot;&quot;  if n &lt; 2:    return  if is_prime(n):    yield n  yield from primes_gen(n-1)  # Do not just do yield primes_gen(n-1)# Some examples:def prefixed(s):    &quot;&quot;&quot;Generates prefixes of a word.    &gt;&gt;&gt; list(prefixes(&#39;both&#39;))    [&#39;b&#39;,&#39;bo&#39;,&#39;bot&#39;,&#39;both]    &quot;&quot;&quot;    if s:      yield from prefixes(s[:-1])      yield sdef substrings(s):    if s:      yield from prefixes(s)      yield from substrings(s[1:])</code></pre><h3 id="Code-Structure"><a href="#Code-Structure" class="headerlink" title="Code Structure"></a>Code Structure</h3><ul><li><code>import</code><ul><li>If you <code>import math</code> you can use <code>math.sqrt()</code>.</li><li>You can also do <code>from math import *</code> or even <code>from math import *</code> to call this method by just <code>sqrt()</code> (A bit like the static import in Java and C# - not a good practice).</li><li>If a built-in module like <code>sys</code> (they are compiled) is imported, Python knows where to get it; if not, Python searches from the <code>sys.path</code> directory, and once found will run those imported codes at run time, before running codes in this file.<ul><li>sys.path is initialized from these locations: The directory containing the input script (or the current directory when no file is specified).PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH). The installation-dependent default.</li></ul></li><li><code>.pyc</code> files (Byte-Compiled files) are created by the Python interpreter when a .py file is imported. They contain the “compiled bytecode” of the imported module/program so that the “translation” from source code to bytecode (which only needs to be done once) can be skipped on subsequent imports if the .pyc is newer than the corresponding .py file, thus speeding startup a little. But it’s still interpreted. Once the _.pyc file is generated, there is no need of _.py file, unless you edit it.</li><li>Easter Egg: <code>import this</code>, <code>import antigravity</code>, <code>from __future__ import braces</code>.</li></ul></li><li>A module is just a Python source file. It has these attributes:<ul><li><code>__doc__</code>: discussed above. The function <code>help()</code> has the same effect.</li><li><code>__file__</code>: holds the name and path of the module file from which it is loaded.</li><li><code>__name__</code>: ttribute: By default, is the file name (if imported by another module) or <code>__main__</code> (if invoked directly), unless this string is changed in file by code (e.g., <code>__name__</code> = <code>my own name</code>). Hence, we use the following codes to check whether a module is imported:</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print (&quot;Executed when invoked directly&quot;)else:    print (&quot;Executed when imported&quot;)</code></pre><ul><li><p><code>__dict__</code>: return a dictionary object of module attributes, functions and other definitions and their respective values. The function <code>dir()</code> has the same effect.</p></li><li><p>A package is a collection of Python modules: while a module is a single Python file, a package is a directory of Python modules containing an additional <code>__init__.py</code> file at the root folder (The <code>__init__.py</code> distinguishes a package from a directory that just happens to contain a bunch of Python scripts.).</p><ul><li>A package can contain other package folder (sub-packages), too (in those folder there will be separate <code>__init__.py</code> files). Packages can be nested to any depth.</li><li>The distinction between module and package seems to hold just at the file system level. When you import a module or a package, the corresponding object created by Python is always of type module.</li><li>When you import a package, only variables/functions/classes in the <code>__init__.py</code> file of that package are directly visible, not sub-packages or modules. To access variables/functions/classes in its sub-package/contained modules, call it behind the package name, e.g., <code>math.sqrt()</code> after <code>import math</code>; Directly calling <code>sqrt()</code> will not work.<ul><li>You could import and give an alias to a package at the same time using <code>import cPickle as p</code>.</li></ul></li></ul></li></ul><h2 id="Sequences"><a href="#Sequences" class="headerlink" title="Sequences"></a>Sequences</h2><h3 id="Sequences-in-general"><a href="#Sequences-in-general" class="headerlink" title="Sequences in general"></a>Sequences in general</h3><ul><li>Common Operations</li></ul><pre class="language-py" data-language="py"><code class="language-py">## All sequences support indexing operationsmyList &#x3D; [1, 2, 4]myTuple &#x3D; (&#39;tom&#39;,&#39;jerry&#39;)phonebook &#x3D; &#123;  &#39;john&#39;: &#39;88888888&#39; # keys can only be immutable types (numbers, strings, tuples)  &#39;mike&#39;: &#39;99999999&#39;&#125;print(myList[0])print(phonebook[&#39;mike&#39;])# This is a syntax suger of operator.getitemfrom operator import getitemprint(getitem(myList, 0))## All sequences support slicing operationsprint(myList[0:-1])print(myList[::-1]) # get a reversed string or list like thisprint(myList[99:999]) # you can do things out of bound; it will not show errors but simply give you [] or &quot;&quot;# Slicing does create a new iterable, but it is only a shallow copy. It simply bundle reference to each element# together and put them in a new iterable.b &#x3D; a[:]print(a is b) # Falseprint[a[0] is b[0]) # True## All sequences are iterablefor number in myList:  print(number)## All sequences support membership testprint(3 in [1, 2, 3]) # Trueif &#39;mike&#39; in phonebook:  print(phonebook[&#39;mike&#39;])# in will only search for the first layer element# [1,2] in [1,2,3] -- False# 1 in [[1,2],3] -- False## Sequences may support lenprint(len(myList)) # prints 3## Sequences can be converted to one anothermy_list &#x3D; list((1,2,3,4,5)) # tuple to listmy_list &#x3D; list(&#123;1,2,3,4,5&#125;) # set to listmy_list &#x3D; list(rang(1,6)) # range to listmy_tuple &#x3D; tuple([1,2,3,4,5]) # list to tuplemy_tuple &#x3D; tuple(&#123;1,2,3,4,5&#125;) # set to tuplemyDict &#x3D; dict.fromkeys(myList) #myDict is &#123;1:None, 2:None, 4:None&#125;myDict &#x3D; dict.fromkeys(myTuple,10) # myDict is &#123;&#39;tom&#39;:10, &#39;jerry&#39;:10&#125;myDict &#x3D; dict([(3, 9), (4, 16), (5, 25)]) #myDict is &#123;3: 9, 4: 16, 5: 25&#125;my_set &#x3D; set(my_list) # this unpacks items from list to set# also if my_list contained a list inside it, TypeError: unhashable type: &#39;list&#39; is raisedmy_set &#x3D; set((1,2,3,4,5)) # tuple to setkeys &#x3D; [1,2]values &#x3D; [2,3]my_dict &#x3D; dict([keys, values]) # list to dictmy_dict &#x3D; dict(((1,2), (2,3))) # tuple to dict## Sequence objects typically may be compared using lexicographical orderingprint([1,2,3] &#x3D;&#x3D; [1,2,3]) # Trueprint([1,2,3,4] &lt; [1,2,4]) # Trueprint((1, 2, 3) &#x3D;&#x3D; (1.0, 2.0, 3.0)) # Trueprint(&#39;ABC&#39; &lt; &#39;C&#39; &lt; &#39;Pascal&#39; &lt; &#39;Python&#39;) # Trueprint((1, 2, (&#39;aa&#39;, &#39;ab&#39;)) &lt; (1, 2, (&#39;abc&#39;, &#39;a&#39;), 4)) # True## List, tuples, strings support count()my_list.count(2) # returns number of appearance of 2## You can print sequences nicely without a foreach</code></pre><ul><li><a href="https://docs.python.org/3/library/functions.html">Built-in Functions</a></li></ul><p>Related built-in functions:</p><pre class="language-py" data-language="py"><code class="language-py">nums &#x3D; [-1, 0, 1, 2, 3, 4, 5]# range(start, stop[, step])# Returns a sequence of consecutive integers separated by step.# Follows a similar syntax to that of slicingrange(4) # 0, 1, 2, 3range(1,5) # 1, 2, 3, 4range(1,5,2) # 1, 3# range is immutable# sum(iterable,&#x2F;,start&#x3D;0)# start from start, applies &quot;+&quot; to each element in the iterable and the previous result, returns the final result# sum takes at most 2 arguments!sum(nums)# returns 14sum(nums, [3, 4]) #[3, 4] is the start parameter# returns [3, 4, -1, 0, 1, 2, 3, 4, 5]sum([&quot;hi&quot;,&quot;I&quot;,&quot;ih&quot;])# TypeError: unsupported operand type(s) for + : &#39;int&#39; and &#39;str&#39;sum([&quot;hi&quot;,&quot;I&quot;,&quot;ih&quot;],[])# TypeError: can only concatenate list (not &quot;str&quot;) to listsum([[&quot;hi&quot;,&quot;I&quot;,&quot;ih&quot;]],[])# [&#39;hi&#39;, &#39;I&#39;, &#39;ih&#39;]sum([[&#39;2&#39;,&#39;3&#39;],[&#39;5&#39;],[&#39;9&#39;]],[])# [&#39;2&#39;,&#39;3&#39;,&#39;5&#39;,&#39;9&#39;]sum([[1,[&quot;3&quot;],(3,4),2,3],[&quot;!&quot;,[4]],[]],[])# [1, [&#39;3&#39;], (3, 4), 2, 3, &#39;!&#39;, [4]]sum([(1,),(2,),[3,]],())# TypeError: can only concatenate list (not &quot;list&quot;) to list# max(), min()# max(iterable, *[, key, default])# max(arg1, arg2, *args[, key])# key and default are keyword-only argument; The key argument specifies a one-argument ordering function like that used for list.sort(), and  The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised.# If multiple items are maximal, the function returns the first one encountered.max(range(5)) # If one positional argument is provided, it should be an iterable.max(0, 2, 4) # cannot mix up iterables and valuesmax(range(10), key &#x3D; lambda x: 7 - (x - 4) * (x - 2)) # Get max point on a parabola, returns 3max(range(0), default &#x3D; &quot;!&quot;) # return &quot;!&quot;max(range(0)) # ValueError: max() arg is an empty sequence# Strings are compared lexicographicallymax(&quot;Hi&quot;,&quot;There&quot;,&quot;a&quot;)# &#39;a&#39;# any(), all()# any() returns True if any element of the iterable is true. If the iterable is empty, returns False.# all() returns True if all elements of the iterable are true (or if the iterable is empty).any(True, 0, &#39;&#39;) # Trueall(range(5)) # False (there is a zero)all([x &lt; 5 for x in range(5)&gt;]) # True, because all elements in the list are true# sorted(iterable)# Creates a sorted list containing all the elements in the input iterable# It is the same as calling li &#x3D; list(iterable) and then sort it by li.sort()</code></pre><p>Lazy evaluation functions: acts like an iterator</p><pre class="language-py" data-language="py"><code class="language-py"># enumerate(iterable, start&#x3D;0)# Takes in an iterable and returns an iterator that yield a tuple each time. Each tuple consists of an index and its actual content.seasons &#x3D; [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]it &#x3D; enumerate(seasons)next(it) # (0, Spring)list(enumerate(seasons, start&#x3D;1))# [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]# zip(iterable*)# Returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together, and then the second item in each passed iterator are paired together etc.# Any extra element from any iterable would simply be ignoreda &#x3D; (&quot;John&quot;, &quot;Charles&quot;, &quot;Mike&quot;)b &#x3D; (&quot;Jenny&quot;, &quot;Christy&quot;, &quot;Monica&quot;, &quot;Vicky&quot;)for each in zip(a, b):    print(each)# Result:# (&#39;John&#39;, &#39;Jenny&#39;)# (&#39;Charles&#39;, &#39;Christy&#39;)# (&#39;Mike&#39;, &#39;Monica&#39;)# filter(f, iterable)# Creates iterator over x for each x in iterable if f(x).# Take note of the double lazy evaluationdef double(x):  print(&quot;&#123;&#125; is doubled&quot;.format(x))  return x + xt &#x3D; filter(lambda x: x &gt; 10, map(double, range(0,10)))next(t)# You will see:# 0 is doubled# 1 is doubled# 2 is doubled# 3 is doubled# 4 is doubled# 5 is doubled# 6 is doubled# Because it keeps evaluating until it hits the first element that doubles to be more than 10# map(f, iterable*)# Takes in a function and a (or many) iterable(s), apply the function to every element and return an iterator# map() returns an iterator (a map object), and you need list() to convert that to a listthis_is_iter &#x3D; map(lambda x: x + 10, range(5))next(this_is_iter) # 10# map() is written in C and is highly optimized, its internal implied loop can be more efficient than a regular Python for loop# In some cases, computing a list of the values in this iterable will give us the same result as [func(x) for x in iterable]. However, it&#39;s important to keep in mind that iterators can potentially have infinite values because they are evaluated lazily, while lists cannot have infinite elements.nums_abs &#x3D; list(map(int,[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])) # let int() parses every element to an intthe_powers &#x3D; [4, 5, 6, 7]pow_list &#x3D; list(map(pow, nums_abs, the_powers))  # [1, 32, 729]# reversed(iterable)# Creates iterator over all the elements in the input iterable in reverse order.# Take not its lazy evaluation!mynum &#x3D; [1,2,3,2,1]rev &#x3D; reversed(mynum)print(rev &#x3D;&#x3D; mynum) # False! An iterator !&#x3D; a list# import reduce from functools# reduce(f, iterable)# Apply function of two arguments f cumulatively to the items of iterable, from left to right, so as to reduce the sequence to a single value.</code></pre><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>Lists are mutable. List operations, such as <code>remove</code>,<code>pop</code>,<code>sort</code>, does not return a sorted list; instead, change the original list.</li></ul><pre class="language-py" data-language="py"><code class="language-py">shopping &#x3D; [&#39;apple&#39;,&#39;rice&#39;,&#39;washboard&#39;,&#39;rice&#39;,&#39;triangle&#39;,&#39;house&#39;,3,4,5] # elements can have different typesshopping.append(&#39;milk&#39;) # append; return None[1]shopping.insert(3,&#39;porridge&#39;)shopping.extend([&#39;egg&#39;,&#39;bread&#39;,&#39;potato&#39;]) # append the whole listcopy &#x3D; shopping.copy() # or use Slicing to copy a list, see belowcopy2 &#x3D; shopping[:] # or [::]; they are the samedel copy2[2:4] # delete by continuous indexprint(shopping.count(&#39;rice&#39;)) # (this prints 2) get number of appearances of a certain value in listdel shopping[0], shopping[2] # remove by index (it removes one by one! The second item to remove may have its positive moved)shopping.remove(&#39;rice&#39;) # remove by value; will remove the first occurence only; returns None# Use filter or list comprehension to remove all occurencedel copy, copy2print(shopping.pop()) # pop the last element - stack behaviourprint(shopping.popleft()) # pop the last element - queue behaviourshopping.pop(1) # pop by index, would return the removed elementshopping.sort()shopping.reverse() # this changes the original listrevCopy &#x3D; shopping[::-1] # this returns a reversed list (works for strings too)myList &#x3D; [1, 2, 3, 4]print(max(myList)) # prints 4 (note that all elements must be of the same type for comparison)addList &#x3D; [1, 2, 3] + [4, 5, 6]addList +&#x3D; [7]mulList &#x3D; [&#39;Hi&#39;] * 4 # mulList is [&#39;Hi&#39;,&#39;Hi&#39;,&#39;Hi&#39;,&#39;Hi&#39;]# The same effect can bes achieved by add(), mul() method# But there is no subtraction or division defined for list# More dimensionmatrix &#x3D; [    [1, 2, 3, 4],    [5, 6, 7, 8],    [9, 10, 11, 12],]for a, b, c, d in matrix:# unpacking  print(a, b, c, d)# List comprehension# Take a existing sequence and build a new list from it.# LIST &#x3D; [function(ITEM) for ITEM in ITERABLE_OBJ if condition(ITEM)]# This picks all ITEM that satisfies condition from ITERABLE_OBJ, and apply a function to them, and put them into LISTlist1 &#x3D; [0 for _ in range(10)] # ten zeros in the listlist2 &#x3D; [2*i for i in (2,3,4) if i &gt; 2]list3 &#x3D; [(x, y) for x in [1,2,3] for y in [3,1,4] if x !&#x3D; y]list4 &#x3D; [str(round(pi, i)) for i in range(1, 6)] # [&#39;3.1&#39;, &#39;3.14&#39;, &#39;3.142&#39;, &#39;3.1416&#39;, &#39;3.14159&#39;]# Take note the referencechild &#x3D; [1,2]parent &#x3D; [child, child[:], list(child) 3]child.append(3)print(parent) # [[1, 2, 3], [1, 2], [1, 2], 3]# This is because:print(child is child[:]) # Falseprint(child is list(child)) # False# List seems to be passed by reference!# In env diag they point to the same object, too.def pops(orig):    orig.pop()list &#x3D; [1,2,3,4]pops(list)print(list) # [1,2,3]</code></pre><ul><li>Very elegant explanation on <a href="https://stackoverflow.com/questions/18072759/list-comprehension-on-a-nested-list">nested list comprehension</a>.</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set represents a mathematical set (with no repeated element). Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</p><pre class="language-py" data-language="py"><code class="language-py">basket &#x3D; &#123;&#39;orange&#39;, &#39;apple&#39;, &#39;banana&#39;&#125;empty &#x3D; set() # cannot do &#123;&#125;; this is a dicta &#x3D; set(&#39;abracadabra&#39;)b &#x3D; &#123;&#39;a&#39;,&#39;l&#39;,&#39;a&#39;,&#39;c&#39;,&#39;m&#39;,&#39;a&#39;,&#39;z&#39;&#125;c &#x3D; set([&#39;orange&#39;, &#39;apple&#39;, &#39;banana&#39;])d &#x3D; &#123;x for x in &#39;abracadabra&#39; if x not in &#39;abc&#39;&#125;print(b - a) # in b but not in a: &#123;&#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;print(b | a) # union: &#123;&#39;d&#39;, &#39;z&#39;, &#39;l&#39;, &#39;b&#39;, &#39;c&#39;, &#39;m&#39;, &#39;a&#39;, &#39;r&#39;&#125;print(b &amp; a) # intersect: &#123;&#39;a&#39;, &#39;c&#39;&#125;print(a ^ b) # xor:&#123;&#39;d&#39;, &#39;m&#39;, &#39;z&#39;, &#39;l&#39;, &#39;b&#39;, &#39;r&#39;&#125;## Some methods of setsmy_set1 &#x3D; &#123;3,5,7,1,8&#125;my_set2 &#x3D; &#123;1,2,3,4,5&#125;# find intersection, or similar to &#39;my_set1 &amp; my_set2&#39;print(my_set1.intersection(my_set2)) # &#123;1, 3, 5&#125;# to find union, or similar to &#39;my_set1 | my_set2&#39;print(my_set1.union(my_set2)) # &#123;1, 2, 3, 4, 5, 7, 8&#125;my_copy &#x3D; my_set1.copy() # returns a copy of a setmy_copy.clear() # removes all members of set# checks if my_set2 is a subset of my_set1print(my_set1.issubset(my_set2)) # False# checks if my_set2 is a superset of my_set1print(my_set1.issuperset(my_set2)) # False</code></pre><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>Tuples are immutable. Cannot use <code>append</code> or <code>del</code>.</p><pre class="language-py" data-language="py"><code class="language-py">zoo &#x3D; (&#39;python&#39;,&#39;elephant&#39;,&#39;zebra&#39;) # Brackets are optional - but please use themparent_zoo &#x3D; (&#39;monkey&#39;,&#39;tiger&#39;,zoo) # Element does not have to be the same typesingleton &#x3D; (2,) # you need this commaempty_tuple &#x3D; ()print(zoo[0], parent_zoo[2][0]) # indexer accessdel zoo # you cannot delete an element, but you can delete the whole tupleprint(max(zoo)) # prints zebra (note that all elements must be of the same type for comparison)mulTuple &#x3D; (&#39;Hi!&#39;,) * 4 # mulTuple is (&#39;Hi&#39;,&#39;Hi&#39;,&#39;Hi&#39;,&#39;Hi&#39;)</code></pre><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><p>The class is <code>dict</code>. The object that uses <code>&#123;&#125;</code> to initialize is a <code>dict</code> object.</p><p>The order of items in dictionary is the order in which they were added (Python 3.6+). Historically items appeared in an arbitrary order.</p><pre class="language-py" data-language="py"><code class="language-py">phonebook &#x3D; &#123;  &#39;john&#39;: &#39;88888888&#39;, # keys can only be immutable types (numbers, strings, tuples); it must be hashable; if a tuple contains a list it becommes unhashable, too. This is because an immutable sequence might still change if it contains a mutable value.  &#39;mike&#39;: &#39;99999999&#39;,  333 : &#39;11111111&#39;, # keys can values can have different types  &#39;mike&#39;: 100 # if keys repeated, the one that comes later is used&#125;my_dict &#x3D; &#123;i: i * i for i in range(3,6)&#125; # faster setup for &#123;3: 9, 4: 16, 5: 25&#125;print(phonebook[&#39;mike&#39;]) # prints 100phonebook[&#39;fido&#39;] &#x3D; &#39;00000000&#39;copy &#x3D; phonebook.copy() # shallow copydel phonebook[&#39;john&#39;]copy.clear() # clean the dictdel copy # delete the dictphonebook2 &#x3D; &#123;  &#39;nancy&#39;: &#39;44444444&#39;,  &#39;john&#39;: &#39;22222222&#39;&#125;phonebook.update(phonebook2) # include the second dict into the first, override any repeated keyprint(phonebook.pop(&#39;john&#39;)) # prints 22222222; &#39;john&#39; is then deletedphonebook.pop(&#39;mary&#39;,&#39;Not Found&#39;) # prints &#39;Not Found&#39;phonebook.popitem() # returns a tuple (containing the last key-value pair)phonebook.keys() # returns a fake list containing all keys)list(phonebook) # returns a list of keys; same as calling keys()iter(phonebook)iter(phonebook.keys) # these two lines are the same; both return an iterator of dictionary keysiter(phonebook.values)iter(phonebook.items) # Kvpphonebook.values() # returns a fake list of valuesfor name, number in phonebook:  print(&#39;call &#123;&#125; at &#123;&#125;&#39;.format(name,number))if &#39;mike&#39; in phonebook:  print(phonebook[&#39;mike&#39;])print(phonebook.get(&#39;tom&#39;,&#39;No such person&#39;)) # try get, if no such key then return the value specified as the second argument (None by default)print(phonebook.setdefault(&#39;jerry&#39;,&#39;00000000&#39;)) # try get, if no such key then create a key with the value specified as the second argument (None by default)</code></pre><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ul><li><code>print()</code><ul><li>It appends a <code>\n</code> by default. To print without changing line, use <code>print(...,end=&#39;&#39;)</code>.</li></ul></li><li><a href="https://docs.python.org/3/library/pprint.html"><code>pprint()</code></a></li><li><code>input()</code><ul><li>The type of the value stored is always string.</li><li><code>raw_input()</code> is only used in Python 2.x.</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">val1 &#x3D; input(&quot;Enter the name: &quot;)print(type(val1)) # &lt;class &#39;str&#39;&gt;print(val1)val2 &#x3D; input(&quot;Enter the number: &quot;)print(type(val2)) # &lt;class &#39;str&#39;&gt;val2 &#x3D; int(val2)print(type(val2))print(val2)</code></pre><ul><li><code>file</code> Class<ul><li>There are many other modes like <code>a</code> For appending. Use <code>help(file)</code> to learn more.</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">poem &#x3D; &#39;&#39;&#39;Programming is funWhen the work is doneif you wanna make your work also fun:        use Python!&#39;&#39;&#39;f &#x3D; file(&#39;poem.txt&#39;, &#39;w&#39;) # open for &#39;w&#39;ritingf.write(poem) # write text to filef.close() # close the filef &#x3D; file(&#39;poem.txt&#39;)# if no mode is specified, &#39;r&#39;ead mode is assumed by defaultwhile True:    line &#x3D; f.readline()    if len(line) &#x3D;&#x3D; 0: # Zero length indicates EOF        break    print(line, end&#x3D;&quot;&quot;) # Print a line includes printing the linefeed at the end of the line; hence, avoid adding a line break automaticallyf.close() # close the file# with keyword in Python is like using keyword in C#with open(&quot;poem.txt&quot;) as f:    for line in f:        print(line, end&#x3D;&quot;&quot;)</code></pre><ul><li><code>cPickle</code> Class<ul><li><code>cPickle</code> is done by C and thus is 100 times faster than <code>pickle</code> and they have the same functionalities.</li><li>They can serialize <strong>any</strong> Python objects.</li></ul></li></ul><pre class="language-py" data-language="py"><code class="language-py">import cPickle as p#import pickle as p (this is slower)shoplistfile &#x3D; &#39;shoplist.data&#39;# the name of the file where we will store the objectshoplist &#x3D; [&#39;apple&#39;, &#39;mango&#39;, &#39;carrot&#39;]# Write to the filef &#x3D; file(shoplistfile, &#39;w&#39;)p.dump(shoplist, f) # dump the object to a filef.close()del shoplist # remove the shoplist# Read back from the storagef &#x3D; file(shoplistfile)storedlist &#x3D; p.load(f)print storedlist</code></pre><ul><li><code>BytesIO</code> and <code>StringIO</code></li></ul><pre class="language-py" data-language="py"><code class="language-py">import io</code></pre><h2 id="Error-Testing"><a href="#Error-Testing" class="headerlink" title="Error, Testing"></a>Error, Testing</h2><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>Like in many OOP languages, exceptions are objects. They have classes with contructors and you can define customized exceptions.<br>They enable non-lcoal contintuations of control: If f calls g and g calls h, exceptions can shift control from h directly back to f without waiting for g to return.<br>However, exception handling tends to be slow.</p><pre class="language-py" data-language="py"><code class="language-py"># Custom Exceptionclass MyOwnError(Exception):    &quot;&quot;&quot;My own error.&quot;&quot;&quot;    pass# throw an errorraise MyOwnError(&#39;HiThere&#39;)# try, catch, finally blocktry:    s &#x3D; int(input(&#39;Enter a number&#39;))except (RuntimeError, TypeError, NameError):    passexcept ValueError:    sys.exit() # exit the programexcept myOwnError as err:    print(err)except:    print(&#39;\nSome error&#x2F;exception occurred.&#39;)    # here, we are not exiting the programfinally: # the finally block always runs    print(&quot;Do clean-ups here!&quot;)</code></pre><p>Common types of errors:</p><ul><li>TypeError: wrong number/type of argument(s) passed into a function</li><li>NameError: a name wasn’t found</li><li>KeyError: a key wasn’t found in dict</li><li>RuntimeError: catch-all for troubles during interpretation</li></ul><p>Debugging tips:</p><ul><li>IndentationError/TabError: Check indentation inconsistency/misalignment; Check mixing tabs and spaces.</li><li>UnboundLocalError: This means a variable that is local to a frame used before assigned. Check whether you are using a using a variable from a parent frame.</li></ul><h3 id="Assertion"><a href="#Assertion" class="headerlink" title="Assertion"></a>Assertion</h3><p>Assertion in Python are designed pretty much the same as in other OOP languages. They usually serves as sanity checks during development and helps to rule out very basic errors in earlier stages.</p><pre class="language-py" data-language="py"><code class="language-py"># assert (if assertion fails, an AssertionError is thrown)mylist &#x3D; [&#39;item&#39;]assert len(mylist) &gt;&#x3D; 1# You can customize error message to be shown, too.# assert &lt;expression&gt;, &lt;string&gt;mylist.pop()assert len(mylist) &gt;&#x3D; 2, &#39;Length of myList should &gt;&#x3D; 2!&#39;# AssertionError: Length of myList should &gt;&#x3D; 2!</code></pre><p>If Python is run with the <code>-O</code> flag (O for optimize) then all assertion checks are ignored. They can also be gloablly turned on or off by toggling the bool <code>__debug__</code>, and running python with <code>-O</code> will toggle the <code>__debug__</code> to be <code>False</code>.</p><h3 id="Run-Doctest"><a href="#Run-Doctest" class="headerlink" title="Run Doctest"></a>Run Doctest</h3><p>To test a specific function:</p><pre class="language-py" data-language="py"><code class="language-py">from doctest import run_docstring_examplesrun_docstring_examples(func_to_test, globals(), True)</code></pre><p>Or</p><pre class="language-py" data-language="py"><code class="language-py">from doctest import testmodtestmod(name &#x3D;&#39;func_to_test&#39;, verbose &#x3D; True)</code></pre><p>When writing Python in files, all doctests in a file can be run by starting Python with the doctest command line option: <code>python3 -m doctest _mytest.txt</code>.</p><ul><li>Yes. The file can just be a <code>.txt</code> that has all doctest with no python codes. Of course it can also be a <code>.py</code> file.</li><li>You can also add a <code>-v</code> for verbose.</li></ul><h3 id="Testing-in-Practice"><a href="#Testing-in-Practice" class="headerlink" title="Testing in Practice"></a>Testing in Practice</h3><p>When writing Python in files, rather than directly into the interpreter, tests are typically written in the same file or a neighboring file with the suffix _test.py.</p><h2 id="Other-Built-in-Modules"><a href="#Other-Built-in-Modules" class="headerlink" title="Other Built-in Modules"></a>Other Built-in Modules</h2><h3 id="operator"><a href="#operator" class="headerlink" title="operator"></a><code>operator</code></h3><ul><li>This module has operators for you to import so you can perform operations like a function call.</li></ul><pre class="language-py" data-language="py"><code class="language-py">from operator import add, sub, mul, truediv, floordiv, modsub(pow(3, truediv(365, 52)), 1) # same as (3 ** (365&#x2F;52)) - 1mod(floordiv(25, 4), truediv(25, 4)) # Q9: (25 &#x2F;&#x2F; 4) % (25 &#x2F; 4)</code></pre><h3 id="sys"><a href="#sys" class="headerlink" title="sys"></a><code>sys</code></h3><ul><li>This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. You have to <code>import sys</code> to use the following:</li><li><code>sys.exit()</code>: Exit from Python.<ul><li>Can pass in an optional argument as the exit status (0 by default, considered “successful termination”).<ul><li>Most systems require it to be in the range 0–127, and produce undefined results otherwise. Some systems have a convention for assigning specific meanings to specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors.</li></ul></li><li>This raises the SystemExit exception - it can be caught and intercepted at an outer level. It will only exit the process when called from the main thread, and the exception is not intercepted.<ul><li>Changed in version 3.6: If an error occurs in the cleanup after the Python interpreter has caught SystemExit (such as an error flushing buffered data in the standard streams), the exit status is changed to 120.</li></ul></li></ul></li><li><code>sys.argv</code>: The list of command line arguments passed to a Python script.<ul><li><code>argv[0]</code> is the script name (it is operating system dependent whether this is a full pathname or not).</li><li>If the command was executed using the <code>-c</code> command line option to the interpreter, <code>argv[0]</code> is set to the string <code>&#39;-c&#39;</code>.</li><li>If no script name was passed to the Python interpreter, <code>argv[0]</code> is the empty string.</li></ul></li><li><code>sys.stdxxx</code>: Read <a href="https://stackoverflow.com/questions/31420317/how-to-understand-sys-stdout-and-sys-stderr-in-python">this</a> and <a href="https://stackoverflow.com/questions/3263672/the-difference-between-sys-stdout-write-and-print">this</a>.</li></ul><h3 id="os-and-os-path"><a href="#os-and-os-path" class="headerlink" title="os and os.path"></a><code>os</code> and <code>os.path</code></h3><ul><li>This module represents generic operating system functionality. This module is especially important if you want to make your programs platform-independent (Linux and Windows).</li><li><code>os.name</code> string specifies which platform you are using, such as <code>&#39;nt&#39;</code> for Windows and <code>&#39;posix&#39;</code> for Linux/Unix users.</li><li><code>os.getcwd()</code>: gets the current working directory i.e. the path of the directory from which the curent Python script is working.</li><li><code>os.getenv()</code> and <code>os.putenv()</code>: get and set environment variables respectively.</li><li><code>os.listdir()</code>: returns the name of all files and directories in the specified directory.</li><li><code>os.remove()</code>: delete a file.</li><li><code>os.system()</code>: run a shell command.</li><li><code>os.linesep</code> string gives the line terminator used in the current platform (e.g., Windows uses <code>&#39;\r\n&#39;</code>, Linux uses <code>&#39;\n&#39;</code> and Mac uses <code>&#39;\r&#39;</code>.)</li><li><code>os.sep</code>: The character used by the operating system to separate pathname components (e.g. <code>&#39;/&#39;</code> for POSIX and <code>&#39;\\&#39;</code> for Windows). This is not sufficient to parse or concatenate pathnames; use the following two:</li><li><code>os.path.split()</code>: returns the directory name and file name of the path.</li><li><code>os.path.join()</code>: joins the folder names with the correct separator in the current platform.</li><li><code>os.path.exists()</code>: checks whether a path exists.</li><li><code>os.path.isfile()</code> and <code>os.path.isdir()</code>: check whether the path is a file or a directory.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.python.org/3/reference/index.html#reference-index">The official Python Documentation</a></li><li><a href="https://python.swaroopch.com/">A Byte of Python (3rd Edition) by Swaroop C. H.</a></li><li><a href="http://www.composingprograms.com/">Composing Programs (2nd Edition) by John Denero</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python Tutorial from Liao Xuefeng (in Chinese)</a></li><li><a href="https://item.jd.com/54690397547.html">ISBN: 9787218136172 (in Chinese)</a></li><li><a href="https://www.runoob.com/python/">Python Tutorial from RUNOOB (in Chinese)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Different Systems of Escape</title>
      <link href="/2021/08/11/Different-Systems-of-Escape/"/>
      <url>/2021/08/11/Different-Systems-of-Escape/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>This post compares escape character in various systems: Java, C, and more…</p><span id="more"></span><div class="admonition note"><p class="admonition-title">Update Ongoing</p><p>This list will be updated.</p></div><h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><table><thead><tr><th align="center">DES</th><th align="center">DEC</th><th align="center">HEX</th><th align="center">C/C++</th><th align="center">C#</th><th align="center">Java</th><th align="center">Python</th><th align="center">JSON</th></tr></thead><tbody><tr><td align="center">Alert (Bell, Beep)</td><td align="center">7</td><td align="center">7</td><td align="center"><code>\a</code></td><td align="center"><code>\a</code></td><td align="center"></td><td align="center"><code>\a</code></td><td align="center"></td></tr><tr><td align="center">Back Space</td><td align="center">8</td><td align="center">8</td><td align="center"><code>\b</code></td><td align="center"><code>\b</code></td><td align="center"><code>\b</code></td><td align="center"><code>\b</code></td><td align="center"><code>\b</code></td></tr><tr><td align="center">New Page (Form Feed)</td><td align="center">12</td><td align="center">C</td><td align="center"><code>\f</code></td><td align="center"><code>\f</code></td><td align="center"><code>\f</code></td><td align="center"><code>\f</code></td><td align="center"><code>\f</code></td></tr><tr><td align="center">New Line (Line Feed)</td><td align="center">10</td><td align="center">A</td><td align="center"><code>\n</code></td><td align="center"><code>\n</code></td><td align="center"><code>\n</code></td><td align="center"><code>\n</code></td><td align="center"><code>\n</code></td></tr><tr><td align="center">Ignore New Line</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><code>\&lt;newline&gt;</code></td><td align="center"></td></tr><tr><td align="center">Carriage Return</td><td align="center">13</td><td align="center">D</td><td align="center"><code>\r</code></td><td align="center"><code>\r</code></td><td align="center"><code>\r</code></td><td align="center"><code>\r</code></td><td align="center"><code>\r</code></td></tr><tr><td align="center">Horizontal Tab</td><td align="center">9</td><td align="center">9</td><td align="center"><code>\t</code></td><td align="center"><code>\t</code></td><td align="center"><code>\t</code></td><td align="center"><code>\t</code></td><td align="center"><code>\t</code></td></tr><tr><td align="center">Vertical Tab</td><td align="center">11</td><td align="center">B</td><td align="center"><code>\v</code></td><td align="center"><code>\v</code></td><td align="center"></td><td align="center"><code>\v</code></td><td align="center"></td></tr></tbody></table><ul><li>HTML represents all ASCII character with <code>&amp;#ddd</code> where <code>ddd</code> is the three-digit ASCII code in base-10.</li><li>For how to use the “Ignore New Line” in Python, see <a href="https://stackoverflow.com/questions/48693600/what-does-the-newline-escape-sequence-mean-in-python">here</a>.</li><li><a href="https://stackoverflow.com/questions/3456138/this-program-sounds-the-bell">What does the bell do?</a></li><li><a href="https://stackoverflow.com/questions/25065608/what-does-backward-slash-b-do-in-python">What does the backspace do?</a></li><li><a href="https://stackoverflow.com/questions/3091524/what-are-carriage-return-linefeed-and-form-feed">What is CR, LF, FF?</a></li></ul><h2 id="Punctuations"><a href="#Punctuations" class="headerlink" title="Punctuations"></a>Punctuations</h2><table><thead><tr><th align="center">DES</th><th align="center">DEC</th><th align="center">HEX</th><th align="center">C/C++</th><th align="center">C#</th><th align="center">Java</th><th align="center">Python</th><th align="center">JSON</th></tr></thead><tbody><tr><td align="center"><code>\</code></td><td align="center">48</td><td align="center">30</td><td align="center"><code>\\</code></td><td align="center"><code>\\</code></td><td align="center"><code>\\</code></td><td align="center"><code>\\</code></td><td align="center"><code>\\</code></td></tr><tr><td align="center"><code>/</code></td><td align="center">92</td><td align="center">5C</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><code>\/</code></td></tr><tr><td align="center"><code>&#39;</code></td><td align="center">39</td><td align="center">27</td><td align="center"><code>\&#39;</code></td><td align="center"><code>\&#39;</code></td><td align="center"><code>\&#39;</code></td><td align="center"><code>\&#39;</code></td><td align="center"></td></tr><tr><td align="center"><code>&quot;</code></td><td align="center">34</td><td align="center">22</td><td align="center"><code>\&quot;</code></td><td align="center"><code>\&quot;</code></td><td align="center"><code>\&quot;</code></td><td align="center"><code>\&quot;</code></td><td align="center"><code>\&quot;</code></td></tr><tr><td align="center"><code>?</code></td><td align="center">63</td><td align="center">3F</td><td align="center"><code>\?</code></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>Escape of special punctuations for Regex depends on implementation. See <a href="https://stackoverflow.com/questions/399078/what-special-characters-must-be-escaped-in-regular-expressions">here</a>.</li></ul><h2 id="Numerical-value-for-character-Reference"><a href="#Numerical-value-for-character-Reference" class="headerlink" title="Numerical value for character Reference"></a>Numerical value for character Reference</h2><table><thead><tr><th align="center">DES</th><th align="center">C/C++/C#</th><th align="center">Java</th><th align="center">Python</th><th align="center">JSON</th></tr></thead><tbody><tr><td align="center">octal</td><td align="center"><code>\ooo</code></td><td align="center"><code>\ooo</code></td><td align="center"><code>\ooo</code></td><td align="center"></td></tr><tr><td align="center">hexadecimal</td><td align="center"><code>\uhhhh</code><br><code>\Uhhhhhhhh</code><br><code>\xhh..</code></td><td align="center"><code>\uhhhh</code></td><td align="center"><code>\uhhhh</code><br><code>\Uhhhhhhhh</code><br><code>\xhh</code><br><code>\N&#123;name&#125;</code></td><td align="center"><code>\uhhhh</code></td></tr><tr><td align="center">Null(<code>&amp;#000;</code>)</td><td align="center"><code>\0</code></td><td align="center"><code>\0</code></td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>How interpreters deals with exceeding digits (e.g. <code>\1004</code>) and a number that exceeds range (<code>\xFFFFFFFFFF</code>) and even the range itself depends on implementation.</li><li>How octal/hexadecimal numbers are mapped to characters depends on language implementation.</li><li><code>\x</code> can be followed by any number of hexadecimal digits, and only stop when it meets the first non-dex digit.</li><li><code>\0</code> = <code>\00</code> = <code>\000</code> = octal escape for null character.</li><li><a href="https://stackoverflow.com/questions/27834410/purpose-of-using-octal-for-ascii">What are octal/hexadecimal ASCII codes for?</a></li><li>For a complete list of ASCII characters, see <a href="https://www.ascii-code.com/">here</a>; for UNICODE, see <a href="https://home.unicode.org/">here</a>; for UNICODE Name aliases, see <a href="https://www.unicode.org/Public/UCD/latest/ucd/NameAliases.txt">here</a>.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://en.wikipedia.org/wiki/Escape_sequences_in_C">C</a>, <a href="https://docs.microsoft.com/en-us/previous-versions/6aw8xdf2(v=vs.140)?redirectedfrom=MSDN">C++</a>, <a href="https://docs.oracle.com/javase/tutorial/java/data/characters.html">Java</a>, <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/">C#</a>, <a href="https://docs.python.org/3.6/reference/lexical_analysis.html?highlight=literals#index-18">Python</a>, <a href="https://www.json.org/json-en.html">JSON</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Cheat Sheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Escape Character </tag>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Notes on Java SE</title>
      <link href="/2021/08/11/Java-Collections/"/>
      <url>/2021/08/11/Java-Collections/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>I take notes here as I learn Java SE. Some of these are really, really basic, while some are more advanced.</p><span id="more"></span><div class="admonition warning"><p class="admonition-title">Fragmented Content</p><p>This post content may appear fragmented or disjointed for I only noted down things I think I need to look at a second time. This post is primarily meant for personal consumption, but some snippets might interest you.</p></div><h2 id="About-Java"><a href="#About-Java" class="headerlink" title="About Java"></a>About Java</h2><ul><li><a href="https://www.javatpoint.com/history-of-java">History of Java</a></li><li>When Java developed from v1.1 to v1.2, the changes were great so they named it as Java 2; when it went from 1.4 to 1.5, they believed that this is another significant version so named it as Java 5. So, Java 2 refers to 1.2 to 1.4; Java 5 is 1.5; there is no Java 3 or 4.</li><li>The first Java version is Java 1.02.</li></ul><h2 id="Value-Types"><a href="#Value-Types" class="headerlink" title="Value Types"></a>Value Types</h2><ul><li><code>int</code> cannot be used directly as boolean value; that is, <code>while(1)</code> is wrong (You cannot do that in C#, either; is this only allowed in C?).</li><li>Boolean value has its class name as <code>boolean</code> (it is <code>bool</code> in C#).</li><li>A <code>byte</code> value has 1 byte, a <code>char</code> and a <code>short</code> value have 2 bytes, <code>int</code> <code>float</code> 4 bytes, and <code>long</code> <code>double</code> 8 bytes (the same as C#). </li><li>Like other numerical type, <code>byte</code> is signed. It represents -128 to 127 (but <code>byte</code> is unsigned in C#, representing 0 to 255, which is quite an exception).<ul><li>You can check the max and min value of each numeric type using the <code>MIN_VALUE</code> and <code>MAX_VALUE</code> of their wrapper classes (<code>java.lang.Byte</code>,<code>java.lang.Character</code> etc.).</li></ul></li></ul><h2 id="Reference-Types"><a href="#Reference-Types" class="headerlink" title="Reference Types"></a>Reference Types</h2><ul><li>We do not know how large a reference type variable is, or how it is implemented; indeed this varies from VM to VM - but on the same VM all reference types should have the same size.</li><li>We cannot perform calculation on reference types (unlike in C).</li><li>Array is a reference type - but do not think of array as a pointer to its first element (unlike in C).</li><li>Java also have a Garbage Collector that can recycle memory occupied by objects without any reference (C# does the same; in C, if you lose track of an object, you have what is known as a ‘memory leak’. The memory will still be allocated to the program as a whole, but nothing will be able to use it if you’ve lost the last pointer to it.)</li><li>Java is always pass-by-value, exactly as in C. <ul><li>Passing an object in and out is really passing its reference (or pointer, or handle, or any term you like) in and out. <a href="http://www.javadude.com/articles/passbyvalue.htm">This is not called pass-by-reference</a>; we should say object references are passed by value.</li><li><code>==</code> compares values. When <code>==</code> is used on reference type it compares whether the two reference handles (Hash codes) are the same. Use <code>equals()</code> to compare reference types. You cannot overload operators in Java, either.</li></ul></li></ul><h2 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h2><ul><li>Conversion of primitive types</li><li>Boxing and Unboxing</li></ul><h2 id="Naming-Rules"><a href="#Naming-Rules" class="headerlink" title="Naming Rules"></a>Naming Rules</h2><ul><li>Follows basically the same naming rules in other language for your variables and functions in Java - but you can starts with <code>$</code> as well.</li><li>Do not capitalize the first letter for Java methods (unlike in C#) - use Camel Case instead.</li><li><a href="https://stackoverflow.com/questions/727844/javax-vs-java-package">Why some packages starts with <code>javax</code> instead of <code>java</code>?</a></li></ul><h2 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h2><ul><li><code>foreach</code> in Java looks like this: <code>for (TYPE name: nameArray) &#123;&#125;</code>. Just replace the <code>in</code> in C# with <code>:</code>.</li><li>All conditional statements (<code>if</code>,<code>switch</code>,<code>:?</code>) have the <a href="http://javacamp.org/javavscsharp/condition.html">same syntax</a> for Java and C#.</li></ul><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><ul><li>Method overriding is marked by <code>@override</code>; when overriding, the method is child classes cannot have an more public access modifier than do in the parent class.</li><li><code>Object</code> class has 4 methods: <code>hashCode()</code>, <code>getClass()</code> , <code>equals()</code> and <code>toString()</code> - you should override at least the last two.</li><li><code>Super()</code> and <code>This()</code><ul><li>If the child constructor does not call <code>super()</code> (with parameter or parameterless) in the first line, the compiler will add this line to call the default parameterless <code>super()</code>.<ul><li>Calling the constructor of a child class will cause: child constructor method enters the call stack -&gt; parent constructor method enters the call stack -&gt; parent constructor method is executed -&gt; child constructor method is executed.</li><li>If the parent class does not have a parameterless constructor, and if we do not specify any <code>super()</code> with parameters in the first line of child constructor, we get an error (<a href="https://stackoverflow.com/questions/7689742/base-class-doesnt-contain-parameterless-constructor">This is true for C# as well</a>).</li><li>As an alternative, you can call another constructor of the same class by putting <code>this()</code> at the first line. You cannot do both <code>this()</code> and <code>super()</code>. (In C#, this is much easier - all inheritance are marked with <code>:</code> - you also do not need to worry about the first line.)</li></ul></li></ul></li><li>Declare the constructor to be <code>private</code> for static classes to prevent an object from being initialized.</li></ul><h2 id="Nested-Class"><a href="#Nested-Class" class="headerlink" title="Nested Class"></a>Nested Class</h2><ul><li>Static nested class</li><li>Internal class</li></ul><h2 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h2><ul><li>Without IDE: save your source file as “.java”; compile it with <code>javac &lt;file-name&gt;</code> command in CMD; run the compiled file with <code>java &lt;file-name&gt;</code> command.<ul><li>Use <code>-encoding UTF-8</code> to switch encoding method to UTF-8.</li></ul></li><li>Source files:<ul><li>A source file can contain only one public class and many non-public class. The name of the source file should be the same as that of that public class.</li><li><code>package</code> statement should be the first row in a source file, if any; followed by <code>import</code> statement, if any. These two statement apply to all classes in the source file.</li></ul></li></ul><h2 id="Memory-Allocation"><a href="#Memory-Allocation" class="headerlink" title="Memory Allocation"></a>Memory Allocation</h2><ul><li>Static variables and Member variables (instance variables) are initialized with their default value (same as in C#), local variables are filled with garbage values and cannot be used without initialization.</li><li>You can limit the lifetime and scope of a local variable to just a block by surrounding a snippet of codes with <code>&#123;&#125;</code> (this is why local variables in <code>for</code> and <code>if</code> block is not accessible outside the block).<ul><li>Nested block: All the variables of the outer block are accessible by the inner block but the variables within inner block are not accessible by the outer block.</li></ul></li><li><a href="https://www.baeldung.com/java-stack-heap">JRE classes live on heap.</a></li></ul><h2 id="Execution-Order"><a href="#Execution-Order" class="headerlink" title="Execution Order"></a>Execution Order</h2><ul><li>Static variables are initialized once before the first call of the static method / constructor of the same class.</li><li>Static initializers are run once when the class is loaded, before the <code>Main()</code> is called. <ul><li>Overall order: parent class static block -&gt; child class static block -&gt; main starts -&gt; parent constructor -&gt; child constructor</li><li>All classes, including non-static ones, can have static variables and static blocks.</li><li>Cannot pass in our out anything, cannot use <code>this()</code> or <code>super()</code> in a static initializer. </li><li>Why bother using a static initializer? Check <a href="https://stackoverflow.com/a/30388953">this</a>.</li></ul></li><li>Non-static initializers are executed when the class is instantiated, immediately before the constructor code is executed, immediately after the invocation of the <code>super()</code> constructor. </li></ul><h2 id="Keywords-and-Operators"><a href="#Keywords-and-Operators" class="headerlink" title="Keywords and Operators"></a>Keywords and Operators</h2><ul><li>Variables marked with <code>final</code> must be initialized when declaring or in a static initializer - they cannot be initialized in a non-static initializer.</li><li>A variable marked <code>final</code> means its value cannot be changed once initialized; a method marked <code>final</code> cannot be overridden; a class marked <code>final</code> cannot be inherited. Do not need to mark all methods of a <code>final</code> class as <code>final</code> - it cannot be inherited in the first place.</li><li><code>instanceof</code> operator: <code>&lt;object&gt; instanceof &lt;class/interface&gt;</code> returns true iff there is any is-a relationship (the object is an instance of the class, its subclass, or a class that extends the interface). The object must not be a primitive type. Always use <code>instanceof</code> operator before down-casting.</li><li>Access modifier: <code>protected</code> is more public that the default access because it allows both in-package access and out-of-package access through inheritance.</li><li><code>assert</code> keyword: when the program runs to an assertion like <code>assert (boolean expression);</code> the boolean expression should always be true; or else, an <code>AssertionError</code> would be thrown.<ul><li>You could include some information for an assertion too: <code>assert (boolean expression):&quot;info&quot;;</code>.</li><li>This is for the dev/debug/test parts of the cycle, not for production.</li><li>To enable the <code>assert</code> when running, use <code>java -ea &lt;file-name&gt;</code>.</li></ul></li></ul><h2 id="Syntactic-Sugar"><a href="#Syntactic-Sugar" class="headerlink" title="Syntactic Sugar"></a>Syntactic Sugar</h2><ul><li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/static-import.html">Static import is frequently used with those static utility classes.</a></li><li>Do not forget to use Method Chaining (for String, StringBuilder operations, for example)!</li></ul><h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h2><ul><li><code>finally</code> block will run, even if there is a <code>return</code> in <code>try</code> or <code>catch</code> block.</li><li>There can be 0 or many <code>catch</code> blocks.<ul><li>If there is no <code>catch</code> block, a <code>finally</code> must follow the <code>try</code> block. In this case, the exception is still unhandled, and a <code>throws</code> must be used to delegate the exception.</li><li>If there are many <code>catch</code> blocks, the most specific exception type must be at the front.</li></ul></li><li>In Java, all checked exception must be handled(with a <code>try-catch</code> block).<ul><li>If do not want to handle a checked exception in a method A, <code>throws</code> this exception to <a href="https://rollbar.com/blog/how-to-use-the-throws-keyword-in-java-and-when-to-use-throw/">let the method B that calls method A to handle it</a>. </li><li><a href="https://stackoverflow.com/questions/3465465/how-to-use-java-style-throws-keyword-in-c">C# does not have <code>throws</code> keyword</a> as <a href="https://stackoverflow.com/questions/9371686/what-are-checked-exceptions-in-java-c">there is no checked exception in C#</a>.</li></ul></li></ul><h2 id="Numeric-literals"><a href="#Numeric-literals" class="headerlink" title="Numeric literals"></a>Numeric literals</h2><ul><li><code>0b</code> prefix for binary, <code>0</code> prefix for octal, and <code>0x</code> for hexadecimal numbers.</li><li>A literal integer has <code>int</code> type; a literal decimal number has <code>double</code> type (suffix it with <code>f</code> to declare it as <code>float</code>).</li></ul><h2 id="String-StringBuilder"><a href="#String-StringBuilder" class="headerlink" title="String, StringBuilder"></a>String, StringBuilder</h2><ul><li>StringBuffer and StringBuilder</li><li>string formatting: <a href="https://www.codejava.net/java-se/file-io/java-string-format-examples">https://www.codejava.net/java-se/file-io/java-string-format-examples</a></li></ul><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><ul><li>Each <code>enum</code> inherits from <code>java.lang.Enum</code> (in C#, each <code>enum</code> inherits from one of the integer numeric type.) Every enum constant represents an object, or a derived class of type enum.<ul><li>You can have constructors and methods in enum declaration, as it is essentially a class.</li><li>When specifying enum constant, you can pass in parameters needed for its constructors (think of each enum constant as an object of the class); you can also override methods (think of each enum constant as a derived class of the class).</li></ul></li></ul><div class="admonition warning"><p class="admonition-title">Untested Codes</p><p>This snippet of codes has not been tested yet and are thus for illustration of concepts only.</p></div><pre class="language-Java" data-language="Java"><code class="language-Java">public enum Weekdays&#123;  Monday(1),  Tuesday(2),  Wednesday(3),  Thursday(4),  Friday(5) &#123; public void shout() &#123; System.out.println(&quot;Yeah, weekend coming!&quot;)&#125;&#125;;  int index;  Weekdays(int dayIndex)&#123;    this.index &#x3D; dayIndex;  &#125;  public void shout()&#123;    System.out.println(&quot;I&#39;m %s whose index is %d.&quot;,this,this.index);  &#125;&#125;public static void Main(String[] args)&#123;  for(Weekdays day : Weekdays.values())&#123;    day.shout();  &#125;&#125;&#x2F;&#x2F;Output: &#x2F;&#x2F;I am Monday whose index is 1.&#x2F;&#x2F;I am Tuesday whose index is 2.&#x2F;&#x2F;I am Wednesday whose index is 3.&#x2F;&#x2F;I am Thursday whose index is 4.&#x2F;&#x2F;Yeah, weekend coming!</code></pre><h2 id="Collections-and-Generics"><a href="#Collections-and-Generics" class="headerlink" title="Collections and Generics"></a>Collections and Generics</h2><h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><ul><li>Use <code>-&gt;</code> instead of the <code>=&gt;</code> in C#.</li></ul><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h2 id="Date-Time"><a href="#Date-Time" class="headerlink" title="Date, Time"></a>Date, Time</h2><h2 id="I18N"><a href="#I18N" class="headerlink" title="I18N"></a>I18N</h2><h2 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h2><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h2 id="XML-and-JSON"><a href="#XML-and-JSON" class="headerlink" title="XML and JSON"></a>XML and JSON</h2><h2 id="Database-JDBC"><a href="#Database-JDBC" class="headerlink" title="Database (JDBC)"></a>Database (JDBC)</h2><h2 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h2><h2 id="Threading"><a href="#Threading" class="headerlink" title="Threading"></a>Threading</h2><h2 id="Networks"><a href="#Networks" class="headerlink" title="Networks"></a>Networks</h2><h2 id="GUI-Swing"><a href="#GUI-Swing" class="headerlink" title="GUI (Swing)"></a>GUI (Swing)</h2><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><h2 id="Project-Management-Maven"><a href="#Project-Management-Maven" class="headerlink" title="Project Management (Maven)"></a>Project Management (Maven)</h2><h2 id="Unit-Test-JUnit"><a href="#Unit-Test-JUnit" class="headerlink" title="Unit Test (JUnit)"></a>Unit Test (JUnit)</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.oracle.com/en/java/javase/16/docs/api/index.html">The official Java SE Documentation</a></li><li><a href="https://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208">Head First Java (2nd Edition) by Kathy Sierra and Bert Bates</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744">Java Tutorial from Liao Xuefeng (in Chinese)</a></li><li><a href="https://www.javatpoint.com/java-tutorial">Java Tutorial from javaTpoint</a></li><li><a href="https://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486">Thinking in Java (4th Edition) by Bruce Eckel</a></li><li><a href="https://www.amazon.com/Effective-Java-Joshua-Bloch/dp/0134685997">Effective Java (3rd Edition) by Joshua Bloch</a></li><li><a href="https://www.amazon.com/Core-Java-I-Fundamentals-11th-Horstmann/dp/0135166306/ref=sr_1_1?dchild=1&keywords=Core+Java:+Fundamentals&qid=1628675333&s=books&sr=1-1">Core Java Volume I: Fundamentals by Cay Horstmann</a></li><li><a href="https://www.amazon.com/Core-Java-II-Advanced-Features-Horstmann-ebook/dp/B07NCXJR1M/ref=sr_1_2?dchild=1&keywords=Core+Java:+Fundamentals&qid=1628675333&s=books&sr=1-2">Core Java Volume II: Advanced Features by Cay Horstmann</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular Expression, and Its Implementation in .NET and Python</title>
      <link href="/2021/08/10/Regular-Expression-and-Its-Implementation-in-NET/"/>
      <url>/2021/08/10/Regular-Expression-and-Its-Implementation-in-NET/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>My summary notes on how to use regular expression in C#.</p><span id="more"></span><p>!!! info Transplanted Post<br>After setting up this website I am gradually transferring all my previous blogs stored locally and in other blog system towards here. This is one of them. Thus, you should be aware that the date and time displayed on this blog is not accurate.</p><p>!!! warning “Expected Reader Experience: Intermediate”<br>This post is good for readers having reasonable mastery on the topic: <em>Regular Expression</em>. If you are uncertain, try <a href="https://github.com/ziishaned/learn-regex">this resource</a> for a beginner’s guide.</p><pre><code>Knowledge on the following is also especially helpful: _C# Basic Syntax_.</code></pre><h2 id="Regex-Basics-Cheat-Sheet"><a href="#Regex-Basics-Cheat-Sheet" class="headerlink" title="Regex Basics Cheat Sheet"></a>Regex Basics Cheat Sheet</h2><p>A quick look-through of my annotated Regex Cheat Sheet for review. This resource is from Microsoft.</p><div class="row">    <embed src="regex-cheat-sheet.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="Some-Confusing-Topics"><a href="#Some-Confusing-Topics" class="headerlink" title="Some Confusing Topics"></a>Some Confusing Topics</h2><h3 id="Lazy-and-Greedy-Matching"><a href="#Lazy-and-Greedy-Matching" class="headerlink" title="Lazy and Greedy Matching"></a>Lazy and Greedy Matching</h3><p>Quantifiers have lazy and greedy matching variants. Lazy matching asks the regex to match a pattern as short as possible, and greedy matching matches as long as possible.</p><p>Greedy Matching:</p><table><thead><tr><th align="center">Regex</th><th align="center">String</th><th align="center">Result</th></tr></thead><tbody><tr><td align="center"><code>5*</code></td><td align="center"><code>255555666</code></td><td align="center"><code>255555</code></td></tr><tr><td align="center"><code>.*at</code></td><td align="center"><code>The fat cat sat on the mat</code></td><td align="center"><code>The fat cat sat on the mat</code></td></tr></tbody></table><p>Lazy Matching:</p><table><thead><tr><th align="center">Regex</th><th align="center">String</th><th align="center">Result</th></tr></thead><tbody><tr><td align="center"><code>5*?</code></td><td align="center"><code>255555666</code></td><td align="center"><code>25</code></td></tr><tr><td align="center"><code>.*?at</code></td><td align="center"><code>The fat cat sat on the mat</code></td><td align="center"><code>The fat</code></td></tr></tbody></table><h3 id="Capturing-and-Non-capturing-Group"><a href="#Capturing-and-Non-capturing-Group" class="headerlink" title="Capturing and Non-capturing Group"></a>Capturing and Non-capturing Group</h3><p><code>()</code> in a Regex expression does not just create a logical area where the quantifiers act on - it creates a “grouping” which is returned by the matched instances as a “sub-match”.</p><table><thead><tr><th align="center">Regex</th><th align="center">String</th><th align="center">Result</th></tr></thead><tbody><tr><td align="center"><code>([a-z0-9_-])@([a-z])\.com</code></td><td align="center"><code>123abc@test.com</code></td><td align="center"><code>123@test.com</code> <br> group 1: <code>123abc</code>; group 2: <code>test</code></td></tr></tbody></table><p>You have access to the matched instance (in C#, via <code>Match.Value</code>) and all its groups (<code>Match.Groups</code> property, which is an array) - because you used <code>()</code> to capture and group them.</p><p>Of course this compromises performance. If you really do not need this grouping information, use a non-capturing group:</p><table><thead><tr><th align="center">Regex</th><th align="center">String</th><th align="center">Result</th></tr></thead><tbody><tr><td align="center"><code>(?:[a-z0-9_-])@(?:[a-z])\.com</code></td><td align="center"><code>123abc@test.com</code></td><td align="center"><code>123@test.com</code> <br> no group info (<code>Match.Groups.Count==0</code>)</td></tr></tbody></table><h3 id="Lookarounds"><a href="#Lookarounds" class="headerlink" title="Lookarounds"></a>Lookarounds</h3><p>Lookaround are special kinds of non-capturing groups. Sometimes, you want a pattern that is preceded/followed by another pattern, but do not want the second pattern to be included into the matched instances returned. In such cases, use lookarounds to not only exclude it from the match’s groups but also the match itself.</p><p>Take positive lookahead (use <code>?=</code>) for an example:</p><table><thead><tr><th align="center">Regex</th><th align="center">String</th><th align="center">Result</th></tr></thead><tbody><tr><td align="center"><code>[0-9]+(?=%)</code></td><td align="center"><code>It improves by 24%.</code></td><td align="center"><code>24</code></td></tr></tbody></table><p>The pattern <code>24%</code> is found, but the <code>%</code> character, which is placed in a positive lookahead, is not included in the match result.</p><p>Other kinds of lookaheads function similarly.</p><h3 id="Character-Escape"><a href="#Character-Escape" class="headerlink" title="Character Escape"></a><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions">Character Escape</a></h3><p>Characters <code>. $ ^ &#123; [ ( | ) * + ? \</code> must be escaped or place in a positive character set <code>[]</code>.</p><h3 id="Regex-Flags"><a href="#Regex-Flags" class="headerlink" title="Regex Flags"></a>Regex Flags</h3><p>Regex Flags controls options for regex operations (e.g., whether to do a case-sensitive match or a case-insensitive one). There are two ways to apply flag in C# which are both discussed below.</p><h2 id="Regex-in-Python"><a href="#Regex-in-Python" class="headerlink" title="Regex in Python"></a>Regex in Python</h2><pre class="language-py" data-language="py"><code class="language-py">import rere.search(pattern, string)    # returns a match object representing the first occurrence of pattern within stringre.sub(pattern, repl, string) # substitutes all matches of pattern within string with replre.fullmatch(pattern, string) # returns a match object, requiring that pattern matches the entirety of stringre.match(pattern, string)     # returns a match object, requiring that string starts with a substring that matches patternre.findall(pattern, string)   # returns a list of strings representing all matches of pattern within string, from left to right</code></pre><h2 id="Regex-in-C"><a href="#Regex-in-C" class="headerlink" title="Regex in C#"></a>Regex in C#</h2><p>!!! note Dependencies<br>Namespace: <code>System.Text.RegularExpressions</code></p><pre><code>Assembly: `System.Text.RegularExpressions.dll`</code></pre><h3 id="Important-Classes"><a href="#Important-Classes" class="headerlink" title="Important Classes"></a>Important Classes</h3><p>Classes:</p><ul><li><code>Regex</code> Class: the central class in regular expression operation.<ul><li><code>Match()</code> method and <code>Matches()</code> method: returns the first/all results of matching.</li><li><code>IsMatch()</code> method: return <code>true</code> if there is at least one match and <code>false</code> otherwise.</li><li><code>Split()</code> method: split the strings according to the delimiters specified in regular expression syntax.</li><li><code>Replace()</code> method: replace occurrences of one pattern, which is specified in regular expression syntax, with another string.</li></ul></li><li><code>Match</code> Class: a wrapper class used as the return type from methods of <code>Match()</code> method<ul><li><code>Success</code> property: <code>bool</code>, is the match successful</li><li><code>Value</code> property: <code>string</code>, the string matched.</li><li><code>Groups</code> property: <code>GroupCollection</code>, the captured groups.</li><li><code>Length</code>: <code>int</code>, the length of the string matched.</li><li><code>NextMatch()</code> method: get the next match, starting from the current match position.</li></ul></li><li><code>MatchCollection</code> Class: a wrapper class, a collection of Match objects, return by <code>Matches()</code> method.<ul><li><code>Count</code> property: <code>int</code>, the count of matches in the collection.</li><li><code>Item[int index]</code>: get an individual <code>Match</code> object in the collection with the specified index.</li><li>Usually we use <code>foreach</code> to get all <code>Match</code> object in the collection.</li></ul></li><li><code>Group</code> Class:<ul><li><code>Success</code> property: <code>bool</code>, is the match successful</li><li><code>Captures</code> property: <code>CaptureCollection</code>, a collection of all the captures matched by the capturing group</li><li><code>GroupCollection</code> Class has a collection of <code>Group</code> objects.</li></ul></li><li><code>Capture</code> Class:<ul><li><code>Value</code> property:<code>string</code>, the captured substring.</li><li><code>CaptureCollection</code> Class has a collection of <code>Capture</code> objects.</li></ul></li></ul><p>Enums:</p><ul><li>RegexOptions: a flagged enum storing regex options, commonly used flags are listed below:<ul><li><code>IgnoreCase</code>(1): Set to case-insensitive matching instead the case-sensitive by default.</li><li><code>Multiline</code>(2): Set to multiline mode, which changes the meaning of <code>^</code> and <code>$</code> so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string by default.</li><li><code>ExplicitCapture</code>(4): Specifies that the only valid captures are explicitly named or numbered groups of the form (<code>?&lt;name&gt;...</code>).</li><li><code>Singleline</code>(16): Set to singline mode, which changes meaning of the dot (<code>.</code>) so it matches every character, instead of every character except <code>\n</code> be default.</li><li><code>IgnorePatternWhitespace</code>(32): Eliminate unescaped white space from the pattern and enables comments marked with <code>#</code>.</li><li><code>RightToLeft</code>(64): Set to a right-to-left search, instead of searching from left to right by default.</li></ul></li></ul><h3 id="Use-Regex-Class"><a href="#Use-Regex-Class" class="headerlink" title="Use Regex Class"></a>Use Regex Class</h3><p>!!! warning Untested Codes<br>This snippet of codes has not been tested yet and are thus for illustration of concepts only.</p><pre class="language-cs" data-language="cs"><code class="language-cs">&#x2F;&#x2F;Test stringsstring str1 &#x3D; &quot;123_abc|ABC!789@a2K&quot;;&#x2F;&#x2F;A Regex object stores a regular expression pattern and regex options.&#x2F;&#x2F;If options are not specified, default options are used.&#x2F;&#x2F;Remember, RegexOptions is a flagged enum!Regex reg &#x3D; new Regex(@&quot;[a-b]+&quot;, RegexOptions.ExplicitCapture | RegexOptions.IgnoreCase);Match rlt &#x3D; reg.Match(str1);Console.WriteLine(rlt.Value); &#x2F;&#x2F;abc&#x2F;&#x2F;Regex options can also be specified inline:Regex reg2 &#x3D; new Regex(@&quot;(?:i)[a-b]+&quot;); &#x2F;&#x2F;case-insensitive matchRegex reg3 &#x3D; new Regex(@&quot;(?:-i)[a-b]+&quot;); &#x2F;&#x2F;case-sensitive match; the &quot;-&quot; inverses the meaningRegex reg4 &#x3D; new Regex(@&quot;(?-i)[a-z]+(?i)[k-n]+&quot;); &#x2F;&#x2F; case sensitive, then case-insensitive match (switch on and off)Regex reg5 &#x3D; new Regex(2&quot;(?is-m:expression)&quot;); &#x2F;&#x2F; set multiple options in one go&#x2F;&#x2F;You can also specify the character position in the input string at which to start the search.Match rlt2 &#x3D; reg.Match(str1, 7);Console.WriteLine(rlt2.Value); &#x2F;&#x2F;ABC&#x2F;&#x2F;Get the next matchMatch rlt3 &#x3D; rlt2.NextMatch();Console.WriteLine(rlt3.Value); &#x2F;&#x2F;a&#x2F;&#x2F;Use Matches to get and print all matchesMatchCollection allRlt &#x3D; reg.Matches(str1);foreach (Match rlt in allRlt)&#123;  Console.WriteLine(rlt.Value); &#x2F;&#x2F;prints abc, ABC, a, K&#125;&#x2F;&#x2F;Split strings, using the pattern as delimitersRegex reg &#x3D; new Regex(@&quot;[_|!@]&quot;, RegexOptions.ExplicitCapture);string[] strs &#x3D; reg.Split(str1);foreach (string rlt in strs)&#123;  Console.WriteLine(rlt); &#x2F;&#x2F;prints abc, ABC, a, K&#125;&#x2F;&#x2F;Replace all numbers with letter ZRegex reg &#x3D; new Regex(@&quot;[0-9]+&quot;);string newStr &#x3D; reg.Replace(str1);Console.WriteLine(newStr); &#x2F;&#x2F;Z_abc|ABC!Z@aZK</code></pre><p>The Regex Class can also be used as a static class. In such cases, pass the regular expression pattern and the regex options as parameters into the methods such as <code>Match()</code>.</p><pre class="language-cs" data-language="cs"><code class="language-cs">Match rlt_alt &#x3D; Regex.Match(str1,@&quot;[a-b]+&quot;, RegexOptions.ExplicitCapture | RegexOptions.IgnoreCase);Console.WriteLine(rlt_alt.Value); &#x2F;&#x2F;abc</code></pre><h3 id="Using-Groups"><a href="#Using-Groups" class="headerlink" title="Using Groups"></a>Using Groups</h3><p>!!! warning Not My Codes<br>This snippet of codes are not my work. They are modified from Microsoft’s <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.group?view=net-5.0">Official Documentation</a>.</p><pre class="language-cs" data-language="cs"><code class="language-cs">string pattern &#x3D; @&quot;(\b(\w+?)[,:;]?\s?)+[?.!]&quot;;string input &#x3D; &quot;This is one sentence. This is a second sentence.&quot;;Match match &#x3D; Regex.Match(input, pattern);if(!match.Success) return;Console.WriteLine(&quot;Match: &quot; + match.Value); &#x2F;&#x2F;Match: This is one sentence.int groupCtr &#x3D; 0;foreach (Group group in match.Groups)&#123;  groupCtr++;  Console.WriteLine(&quot;Group &#123;0&#125;: &#39;&#123;1&#125;&#39;&quot;, groupCtr, group.Value);  int captureCtr &#x3D; 0;  foreach (Capture capture in group.Captures)  &#123;    captureCtr++;    Console.WriteLine(&quot;   Capture &#123;0&#125;: &#39;&#123;1&#125;&#39;&quot;, captureCtr, capture.Value);  &#125;&#125;&#x2F;&#x2F;Prints:&#x2F;&#x2F;Group 1: &#39;This is one sentence.&#39;&#x2F;&#x2F;   Capture 1: &#39;This is one sentence.&#39;&#x2F;&#x2F;Group 2: &#39;sentence&#39;&#x2F;&#x2F;   Capture 1: &#39;This &#39;&#x2F;&#x2F;   Capture 2: &#39;is &#39;&#x2F;&#x2F;   Capture 3: &#39;one &#39;&#x2F;&#x2F;   Capture 4: &#39;sentence&#39;&#x2F;&#x2F;Group 3: &#39;sentence&#39;&#x2F;&#x2F;   Capture 1: &#39;This&#39;&#x2F;&#x2F;   Capture 2: &#39;is&#39;&#x2F;&#x2F;   Capture 3: &#39;one&#39;&#x2F;&#x2F;   Capture 4: &#39;sentence&#39;</code></pre><h3 id="When-to-Use-Which"><a href="#When-to-Use-Which" class="headerlink" title="When to Use Which?"></a>When to Use Which?</h3><ul><li>Use <code>String</code> Class when matching a specific string; use <code>Regex</code> Class when matching a pattern.</li><li>Use the static <code>Regex</code> Class if the regular expression and the associated options will only be used once; use a <code>Regex</code> object if it needs to be used multiple times.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Cheat Sheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Python </tag>
            
            <tag> Regular Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Conversion - Standard and Imperial</title>
      <link href="/2021/08/09/Unit-Conversion-Standard-and-Imperial/"/>
      <url>/2021/08/09/Unit-Conversion-Standard-and-Imperial/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Useful Conversions between standard and imperial unit system.</p><span id="more"></span><h2 id="Temperature"><a href="#Temperature" class="headerlink" title="Temperature"></a>Temperature</h2><h3 id="Literacy"><a href="#Literacy" class="headerlink" title="Literacy"></a>Literacy</h3><p><strong>Fahrenheit</strong>: denoted as °F; pronounced as FEH-ruhn-hite.</p><h3 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h3><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center">\(F = (9/5)C+32 \) <br> \(C = (5/9)(F-32) \)</td></tr></tbody></table><p>where \(F\) is temperature value in °F and\(C\) is that in °C.</p><h3 id="Frequently-Used-Values"><a href="#Frequently-Used-Values" class="headerlink" title="Frequently Used Values"></a>Frequently Used Values</h3><ul><li>Boiling Point (100°C): 212 °F</li><li>Freezing Point (0°C): 32 °F</li><li>Comfortable Environment (25°C): 77°F</li><li>A change of 5°C equals a change of 9°F</li></ul><h2 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h2><h3 id="Literacy-1"><a href="#Literacy-1" class="headerlink" title="Literacy"></a>Literacy</h3><p><strong>Inch</strong>: denoted as ″ or in.<br><strong>Foot</strong>: denoted as ′ or ft; pluralized as “feet”<br><strong>Yard</strong>: denoted as yd.<br><strong>Mile</strong>: (statute mile) denoted as mi. </p><h3 id="Conversion-1"><a href="#Conversion-1" class="headerlink" title="Conversion"></a>Conversion</h3><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center">\(1 inch = 2.54 cm \) <br> \(1 cm \approx 0.3937 inches \)</td></tr><tr><td align="center">\(1 foot = 12 inches = 0.3048 m \) <br> \(1 m \approx 3.2808 feet \)</td></tr><tr><td align="center">\(1 yard = 3 feet = 36 inches = 0.914 m \) <br> \(1 m \approx 1.0936 yards \)</td></tr><tr><td align="center">\(1 mile = 1760 yards = 5280 feet = 1.60934 km \) <br> \(1 km \approx 0.62137 miles \)</td></tr></tbody></table><h2 id="Area"><a href="#Area" class="headerlink" title="Area"></a>Area</h2><h3 id="Literacy-2"><a href="#Literacy-2" class="headerlink" title="Literacy"></a>Literacy</h3><p><strong>Square Inch</strong>: denoted as sq in.<br><strong>Square Foot</strong>: denoted as sq ft.<br><strong>Square Yard</strong>: denoted as sq yd.<br><strong>Acre</strong>: denoted as ac; pluralized as acres; pronounced as EI-curr.</p><h3 id="Conversion-2"><a href="#Conversion-2" class="headerlink" title="Conversion"></a>Conversion</h3><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center">\(1 sq in = 6.5416 cm^2 \) <br> \(1 cm^2 \approx 0.155 sq in \)</td></tr><tr><td align="center">\(1 sq ft = 144 sq in \approx 9.29 dm^2 \) <br> \(1 dm \approx 0.10764 feet \) <br> \(1000 sq ft \approx 92.9 m^2\) <br> \(100 m^2 \approx 1076 sq ft\)</td></tr><tr><td align="center">\(1 sq yd = 9 sq ft \approx 0.836 m^2 \) <br> \(1 m^2 \approx 1.19599 yards \)</td></tr><tr><td align="center">\(1 acre = 4840 sq yd = 43560 sq ft \approx 4046.86 m^2 \) <br> \(1 km^2 \approx 247.105 acre \)</td></tr></tbody></table><h2 id="Liquid-Volume"><a href="#Liquid-Volume" class="headerlink" title="(Liquid) Volume"></a>(Liquid) Volume</h2><h3 id="Literacy-3"><a href="#Literacy-3" class="headerlink" title="Literacy"></a>Literacy</h3><p><strong>Ounce</strong>: (Fluid Ounce) Denoted as fl oz.<br><strong>Cup</strong>: Denoted as cup.<br><strong>Pint</strong>: Denoted as pt.<br><strong>Quart</strong>: Denoted as qt.<br><strong>Gallon</strong>: (US Gallon) Denoted as gal.</p><h3 id="Conversion-3"><a href="#Conversion-3" class="headerlink" title="Conversion"></a>Conversion</h3><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center">\(1 fl oz \approx 29.5735 ml \) <br> \(1 L \approx 33.814 fl oz \)</td></tr><tr><td align="center">\(1 cup = 8 fl oz \approx 236.588 ml \) <br> \(1 L \approx 4.22675 cups \)</td></tr><tr><td align="center">\(1 pint = 2 cups = 16 fl oz \approx 473.1765 ml\) <br> \(1 L \approx 2.11338 pints \)</td></tr><tr><td align="center">\(1 quart = 2 pints = 32 fl oz \approx 946.353 ml\) <br> \(1 L \approx 1.0567 quarts \)</td></tr><tr><td align="center">\(1 gal = 4 quarts = 8 pints = 128 fl oz \approx 3.7854 L\) <br> \(1 L \approx 0.2642 gal \)</td></tr></tbody></table><div class="admonition note"><p class="admonition-title">By The Way</p><p>The word ounce ultimately comes from the Latin word <em>uncia</em>, meaning &quot;one-twelfth.&quot; (This is also where we get the word inch.) In Italian, this became <em>onzo</em>, which is where we get both the word ounce and its abbreviation, <em>oz</em>.</p><p>Ounce is a volume unit for liquid (called fluid ounce) or a mass unit for solid.</p></div><h2 id="Mass"><a href="#Mass" class="headerlink" title="Mass"></a>Mass</h2><h3 id="Literacy-4"><a href="#Literacy-4" class="headerlink" title="Literacy"></a>Literacy</h3><p><strong>Grain</strong>: Denoted as fr.<br><strong>Ounce</strong>: Denoted as oz.<br><strong>Pound</strong>: Denoted as lb.<br><strong>Ton</strong>:(Short ton) Denoted as Ton.</p><div class="admonition note"><p class="admonition-title">By The Way</p><p>There is a &quot;long ton&quot; which is 2240 lbs. Both &quot;tons&quot; are different from the standard Metric Ton, or Tonne; 1 Tonne is 1000kg, or about 2,204.6 pounds, heavier than both 1 short ton and 1 long ton.</p></div><h3 id="Conversion-4"><a href="#Conversion-4" class="headerlink" title="Conversion"></a>Conversion</h3><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center">\(1 gr \approx 64.8 mg \) <br> \(1 g \approx 15.43236 gr \)</td></tr><tr><td align="center">\(1 oz = 437.5 gr \approx 28.35 g \) <br> \(1 kg \approx 35.274 oz \)</td></tr><tr><td align="center">\(1 lb = 16 oz = 7000 gr \approx 453.59 g \) <br> \(1 kg \approx 2.2046 lbs \)</td></tr><tr><td align="center">\(1 ton = 2000 lbs \approx 907.1847 kg \) <br> \(1 tonne \approx 1.10231 tons \)</td></tr></tbody></table><div class="admonition note"><p class="admonition-title">By The Way</p><p>&quot;lb&quot; comes from the Latin word <em>Libra</em>, meaning balance or scales(as in the astrological sign), but it also stood for the ancient Roman unit of measure <em>libra pondo</em>), meaning &quot;a pound by weight&quot;. We got the word &quot;pound&quot; in English from the <em>pondo</em> part of the <em>libra pondo</em> but our abbreviation comes from the <em>libra</em>.</p></div>]]></content>
      
      
      <categories>
          
          <category> Non-technical </category>
          
          <category> Utility </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Encoding Basics V - Media Representations</title>
      <link href="/2021/08/08/Encoding-Basics-5/"/>
      <url>/2021/08/08/Encoding-Basics-5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><div class="admonition error"><p class="admonition-title">Construction Ongoing</p><p>This is not a finished post. The final version may have drastic differences as compared to this draft.</p></div><span id="more"></span><div class="admonition info"><p class="admonition-title">Transplanted Post</p><p>After setting up this website I am gradually transferring all my previous blogs stored locally and in other blog system towards here. This is one of them. Thus, you should be aware that the date and time displayed on this blog is not accurate.</p></div><div class="admonition info"><p class="admonition-title">Post Series</p><p>This posts belongs to the series: <em>Encoding Basics</em>. You can see all posts in this series <a href="https://reimirno.github.io/series/encoding-basics">here</a>.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: None</p><p>This post is good for readers having zero or very limited knowledge on the topic: <em>Encoding</em>.However, since this post belongs to a series, you are expected to master the previous posts in the series.</p></div><h2 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h2><h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><h2 id="What-about-Other-Media"><a href="#What-about-Other-Media" class="headerlink" title="What about Other Media?"></a>What about Other Media?</h2><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Principle </tag>
            
            <tag> Machine Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encoding Basics IV - Character Representations</title>
      <link href="/2021/08/08/Encoding-Basics-4/"/>
      <url>/2021/08/08/Encoding-Basics-4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><div class="admonition error"><p class="admonition-title">Construction Ongoing</p><p>This is not a finished post. The final version may have drastic differences as compared to this draft.</p></div><span id="more"></span><div class="admonition info"><p class="admonition-title">Transplanted Post</p><p>After setting up this website I am gradually transferring all my previous blogs stored locally and in other blog system towards here. This is one of them. Thus, you should be aware that the date and time displayed on this blog is not accurate.</p></div><div class="admonition info"><p class="admonition-title">Post Series</p><p>This posts belongs to the series: <em>Encoding Basics</em>. You can see all posts in this series <a href="https://reimirno.github.io/series/encoding-basics">here</a>.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: None</p><p>This post is good for readers having zero or very limited knowledge on the topic: <em>Encoding</em>.However, since this post belongs to a series, you are expected to master the previous posts in the series.</p></div><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><h2 id="Unicode-in-Practice-UTF"><a href="#Unicode-in-Practice-UTF" class="headerlink" title="Unicode in Practice: UTF"></a>Unicode in Practice: UTF</h2><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Principle </tag>
            
            <tag> ASCII </tag>
            
            <tag> Unicode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>On Alcohol</title>
      <link href="/2021/08/08/About-Alcohol/"/>
      <url>/2021/08/08/About-Alcohol/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Out of all non-academic pre-college modules the one on alcohol I think has the greatest practical value.</p><p>I ended up digging into the topic further than the module materials with my long-pending questions on alcohols.</p><span id="more"></span><h2 id="How-Much-Can-I-Drink"><a href="#How-Much-Can-I-Drink" class="headerlink" title="How Much Can I Drink?"></a>How Much Can I Drink?</h2><p>How do I test my limit of alcohol? How much alcohol can I consume before I get drunk? For one that has never seriously consumed alcohols this might be the most valuable question.</p><p>The concept of a <strong>standard drink</strong> (or, “a drink”) refers to a drink that contains about 0.6 fl oz. (or 14 grams) of pure alcohol (ethanol), which is found in:</p><ul><li>1.5 oz. of liquor (distilled spirits, like vodka and rum, typically 40% alcohol by volume)</li><li>5 oz. of table wine (typically 12% alcohol)</li><li>12 oz. of regular beer (typically 5% alcohol; Some can have 15%!)</li></ul><p>In other countries, and in many research studies, a different definition is used.</p><p>Some beverages (including beer, wine and liquor) contain higher than typical amounts of alcohol — it’s important to read and understand the labels. Mixed drinks, including punch, often contain more than one standard drink of alcohol.</p><p>In general, the liver can process one ounce of liquor (or one standard drink) in one hour - but everyone’s limit differs. The <a href="https://www.dietaryguidelines.gov/sites/default/files/2021-03/Dietary_Guidelines_for_Americans-2020-2025.pdf">latest Dietary Guideline</a> defines moderate drinking as “up to 1 drink per day for women and 2 drinks per day for men”.</p><p>I remember there was this time I drank a whole bottle of beer (it should be 600 ml, or 20 oz., and I drank it definitely within one hour), and I felt nothing really happened (no loss of control etc.) - but my friends, the next day, reported that I clearly acted as abnormal - that might be the closest that I have been to a drunk.</p><h2 id="How-to-Minimize-The-Effect-of-Drinking"><a href="#How-to-Minimize-The-Effect-of-Drinking" class="headerlink" title="How to Minimize The Effect of Drinking?"></a>How to Minimize The Effect of Drinking?</h2><p>Say, if drinking is a must, besides controlling the alcohol amount to one drink per hour, what else can I do to minimize the alcohol effect?</p><p>The <strong>Blood Alcohol Concentration</strong> is the amount of alcohol in the bloodstream or on one’s breath. It basically measures how drunk you are.</p><ul><li>The safe range is below 0.04%. You will feel warm but does not lose control completely.</li><li>BAC is expressed as the weight of ethanol, in grams, in 100 milliliters of blood, or 210 liters of breath. BAC can be measured by breath, blood, or urine tests.</li><li>The change rate of BAC is influenced by time, weight, body fat percentage, sex at birth, the speed and the amount of alcohol consumed, the amount of food and medications consumed along with alcohol.</li><li>Carbonated mixers can speed up alcohol absorption, sweet mixers can mask the taste of alcohol, and caffeinated beverages can cause people to underestimate how intoxicated they are. These are risky factors with drink - do not consume them along with alcohol.</li><li>Alternating water and food with drinks can help keep a drinker’s BAC from getting too high. These are protective factors. Consume them with alcohol; also, a protein-heavy meal before alcohol can also help to slow the BAC increasing rate - hence, be sure not to drink on an empty stomach and always stay hydrated.</li><li>Nothing reduces BAC. Not even coffee, cold shower, or throwing up. The only thing lowers BAC is time.</li></ul><h2 id="What-about-Peer-Pressure"><a href="#What-about-Peer-Pressure" class="headerlink" title="What about Peer Pressure?"></a>What about Peer Pressure?</h2><p>I am a non-drinker. I still think that I would not, and need not to drink. I will not deliberately try to test my limit of alcohol, either.</p><p>However, I can imagine in some situations I will be invited to drink and such invitation more than often carries connotations of friendship, bonding, obligation, and networking. Here are some strategies of turning that down:</p><ul><li>Use simple and firm language, like: “I’m good, thanks”.</li><li>Use an excuse, even one that may not be completely accurate, such as, “It gives me headaches” or “I’ve got to get up early tomorrow”.</li><li>Have a non-alcoholic drink so that people won’t ask me if I want something to drink.</li><li>Tell my friends beforehand that they could support me in arguing against alcohol invitation.</li></ul><p>Also, to prevent ingesting alcohol inadvertently:</p><ul><li>Never drink from any “communal” sources such as a punch bowl.</li><li>Always Pour drink myself, and never accept drinks from others unless you trust her.</li><li>Never never cease to monitor it; always keep my drink with me, even when I go to the restroom.</li><li>Always check (the smells, the color) before drinking; pour it out if unsure.</li></ul><h2 id="When-Drinking-Goes-Wrong…"><a href="#When-Drinking-Goes-Wrong…" class="headerlink" title="When Drinking Goes Wrong…"></a>When Drinking Goes Wrong…</h2><p>Where is the line?</p><ul><li>Binge Drinking: 4+ drinks(women)/5+ drinks(men) within 2 hours.</li><li>Heavy Drinking: 8+ drinks(women)/15+ drinks(men) per week.</li><li>Alcohol Use Disorder: This refers to addiction. Commonly involves symptoms like being unable to curb your drinking, requiring more alcohol to achieve the desired effect, and continuing to drink despite its negative effects on your life.</li><li>Alcoholic Poisoning</li></ul><p>Common symptoms of alcohol overdose (OR, alcohol poisoning): CUSP</p><ul><li>Cool, clammy skin (a sign of shock). <ul><li>In people with lighter skin, their face may seem bluish or pale. In people with darker skin, color changes may be visible in their nail beds, inside their mouth, or underneath their eyelids</li></ul></li><li>Unconscious, partially conscious or passes out; can’t fully wake up or speak clearly</li><li>Slow or irregular breathing</li><li>Pike, but are still unresponsive</li></ul><p>Tips for intervention:</p><ul><li>Stay with them; do not leave</li><li>Do not let them “sleep it off”</li><li>No food, drink or drugs if vomited in the last 3 hours</li><li>Make sure they are lying on their side, arm closed, to prevent choking</li><li>Call for help, provide clear address, name, contact number, information about drinking</li></ul><h2 id="Does-Alcohol-Carry-Healthful-Effects"><a href="#Does-Alcohol-Carry-Healthful-Effects" class="headerlink" title="Does Alcohol Carry Healthful Effects?"></a>Does Alcohol Carry Healthful Effects?</h2><p>I remember reading it somewhere that some country’s dietary guideline recommends drinking a little wine every day - this might be a piece of misinformation or a case of memory lapse.</p><p>I tried to find a clear-cut answer but I know I will fail. If there were one, I would have already known it years ago. Yes, too much is bad, but how much is too much, and is little better than none? <a href="https://www.health.harvard.edu/blog/alcohol-and-your-health-is-none-better-than-a-little-2018091914796">The answer varies from research to research.</a></p><p>With that external link I end this article.</p>]]></content>
      
      
      <categories>
          
          <category> Non-technical </category>
          
          <category> Utility </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Encoding Basics III - Signed Number Representations</title>
      <link href="/2021/08/07/Encoding-Basics-3/"/>
      <url>/2021/08/07/Encoding-Basics-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>It started elegant in mathematics but ends up ugly in Engineering.</p><span id="more"></span><div class="admonition info"><p class="admonition-title">Transplanted Post</p><p>After setting up this website I am gradually transferring all my previous blogs stored locally and in other blog system towards here. This is one of them. Thus, you should be aware that the date and time displayed on this blog is not accurate.</p></div><div class="admonition info"><p class="admonition-title">Post Series</p><p>This posts belongs to the series: <em>Encoding Basics</em>. You can see all posts in this series <a href="https://reimirno.github.io/series/encoding-basics">here</a>.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: None</p><p>This post is good for readers having zero or very limited knowledge on the topic: <em>Encoding</em>.However, since this post belongs to a series, you are expected to master the previous posts in the series.</p></div><h2 id="Bits-as-Possibilities-NOT-Numbers"><a href="#Bits-as-Possibilities-NOT-Numbers" class="headerlink" title="Bits as Possibilities, NOT Numbers"></a>Bits as Possibilities, NOT Numbers</h2><p>The last post we mentioned that <code>1111 1010</code> represents <code>-6</code> instead of <code>250</code> in computers. Why do we think it should be <code>250</code>? Because by normal conversion procedure mentioned in the last post, if we convert 1111 1010 to base-10 we get 250; if we convert 250 in base-10 to base-2 we get 1111 1010. What is wrong?</p><p>The problem is that our computer does not use this simple conversion scheme in representing base-10 numbers as base-2 numbers. If it does - how do we represent negative numbers? We cannot add a sign like what we do in mathematics - remember, computers do not have signs. They only have 0s and 1s. So, instead of </p><pre class="language-none"><code class="language-none">0000 0000 &#x3D; 00000 0001 &#x3D; 10000 0010 &#x3D; 2...1111 1110 &#x3D; 2541111 1111 &#x3D; 255</code></pre><p>We can devise a scheme that:</p><pre class="language-none"><code class="language-none">0000 0000 &#x3D; -1280000 0001 &#x3D; -1270000 0010 &#x3D; -126...1111 1110 &#x3D; 1261111 1111 &#x3D; 127</code></pre><p>So as to accommodate negative numbers. What about numbers beyond -128 and 127? You have to use more bits to represent them. In fact, the common data type of signed integer number in many programming language is <code>int</code>, which often has 4 bytes. This means it can represents \(2^{32}\) different possibilities. Instead of representing \(0\) to \(2^{32}-1\), we can let them represent \(- 2^{31}\) to \(2^{31} -1\).</p><p>How is this even allowed? After all, mathematically, 0000 0000 in binary is never -128 in base-10. How could we impose such a definition which is mathematically incorrect? The reason is that the 0000 0000 here is not a number, but a possibility. A Byte of information gives us 256 possibilities and we can use these to represent any 256 distinct numbers: 0 to 255, or -128 to 127, or all odd numbers within 1 to 511… </p><p>The key thing is to select a correspondence scheme meaningfully so that we can represent numerical values as complete as possible with minimal complexity in terms of both machine process on operating them and human readability. Hence, we cannot just use the mathematical conversion as the correspondence scheme because it does not allow us to represent negative number.</p><h2 id="True-Form-and-Two’s-Complement"><a href="#True-Form-and-Two’s-Complement" class="headerlink" title="True Form, and Two’s Complement"></a>True Form, and Two’s Complement</h2><h3 id="Representing-Negative-Numbers"><a href="#Representing-Negative-Numbers" class="headerlink" title="Representing Negative Numbers"></a>Representing Negative Numbers</h3><p>The most intuitive way of representing negative numbers is to imitate what we do in mathematics. We can append a “sign” at the front of each binary sequence, using 0 as positive and 1 as negative. Thus, when machines interpret the numbers, they first have to know the first bit is not related to its value but its sign. For example, <code>0000 1001</code> is 9 but <code>1000 1001</code> is -9. The full list is:</p><pre class="language-none"><code class="language-none">0000 0000 &#x3D; 00000 0001 &#x3D; 10000 0010 &#x3D; 2...0111 1111 &#x3D; 1271000 0000 &#x3D; -01000 0001 &#x3D; -11000 0010 &#x3D; -2...1111 1110 &#x3D; -1261111 1111 &#x3D; -127</code></pre><p>This is the <strong>True From</strong> (or <strong>Sign/Magnitude</strong>) scheme (that is, we say that 1111 1110 is the true form of number -126). Let us get a little deeper than this. With convention mathematical conversion, 1000 0001 is 129, but as a true form it really represents -1. Interpret this another way, we have</p><p>\[ T = \begin{cases} C,     &amp; \text{if C &lt; M } \\ M - C,     &amp; \text{if C &gt;= M}\end{cases} \]</p><p>Or,</p><p>\[ T = \begin{cases} C,     &amp; \text{if C &lt; M } \\ - (C \bmod (M+1)),     &amp; \text{if C &gt;= M}\end{cases} \]</p><p>where T is the true value, C is the value obtained by converting the true form number to base-10 using mathematical conversion, and M is the minimal positive number that cannot be expressed by a fixed count of n bits (\(M = 2^{n-1}\); for example, \(M=2^{(8-1)}=128\) in this case where \(n=8\)).</p><p>This works, but clearly not optimally. For one, why are we having a 0 and a -0? This will cause problems in computer operation (The computer will report <code>0 != -0</code> since <code>0000 0000 != 1000 0000</code>), and it really does not look elegant. </p><p>The second way of writing the true value inspires a more elegant solution is Two’s Complement, using the same idea of modulo. What about:</p><p>\[ T = C \bmod (2M) \]</p><p>Since this is an modulo operation, we take T value as the one that falls into the integers range \( [-M,M-1]\). This gives:</p><pre class="language-none"><code class="language-none">0000 0000 &#x3D; 00000 0001 &#x3D; 10000 0010 &#x3D; 2...0111 1111 &#x3D; 1271000 0000 &#x3D; -1281000 0001 &#x3D; -1271000 0010 &#x3D; -126...1111 1110 &#x3D; -21111 1111 &#x3D; -1</code></pre><p>This scheme is called <strong>Two’s Complement</strong>. This is how positive and negative integers are represented in modern computers. Why use Two’s Complement? It does not have two 0s, and it is also intuitive (if you think about modulo). The greatest benefits is that it <a href="https://stackoverflow.com/questions/1125304/why-prefer-twos-complement-over-sign-and-magnitude-for-signed-numbers">allows the same logic gate set up to perform addition and subtraction</a> as subtracting is just adding a negative number. </p><p>That is why in the last post we get <code>-6</code> on performing NOT on <code>5</code>. <code>5</code> is <code>0000 0101</code> and a NOT turns it to <code>1111 1010</code> which represents <code>-6</code> by Two’s Complement.</p><h3 id="Heuristics"><a href="#Heuristics" class="headerlink" title="Heuristics"></a>Heuristics</h3><p>There are two other schemes of representing negative numbers other than True Form and Two’s Complement, which are rarely used.</p><p><strong>One’s Complement</strong>:</p><p>\[ T = C \bmod (2M-1) \]</p><p>Since this is an modulo operation, we take T value as the one that falls into the integers range \( [-(M-1),M-1]\). This gives:</p><pre class="language-none"><code class="language-none">0000 0000 &#x3D; 00000 0001 &#x3D; 10000 0010 &#x3D; 2...0111 1111 &#x3D; 1271000 0000 &#x3D; -1271000 0001 &#x3D; -1261000 0010 &#x3D; -125...1111 1110 &#x3D; -11111 1111 &#x3D; -0</code></pre><p><strong>Offset Binary</strong>:</p><p>\[ T = (C+M) \bmod (2M) \]</p><p>Since this is an modulo operation, we take T value as the one that falls into the integers range \( [-M,M-1]\). This gives:</p><pre class="language-none"><code class="language-none">0000 0000 &#x3D; -1280000 0001 &#x3D; -127...0111 1110 &#x3D; -20111 1111 &#x3D; -11000 0000 &#x3D; 01000 0001 &#x3D; 11000 0010 &#x3D; 2...1111 1110 &#x3D; 1261111 1111 &#x3D; 127</code></pre><p>There are some heuristics for easy conversion between them:</p><ul><li>For a positive number:<ul><li>Its True Form, One’s Complement and Two’s Complement are the same.</li><li>Its Offset Binary is obtained by taking NOT on the signed bit of its Two’s Complement.</li></ul></li><li>For a negative number:<ul><li>Its One’s Complement is obtained by taking NOT on all bits of its True Form, except the signed bit.</li><li>Its Two’s Complement is obtained by adding 1 to its One’s Complement.</li><li>Its Offset Binary is obtained by taking NOT on the signed bit of its Two’s Complement.</li></ul></li></ul><p>All these can be easily <a href="https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html">proven by modulo mathematics</a>.</p><p>For example,</p><table><thead><tr><th align="center">True Value (Base-10)</th><th align="center">True Form</th><th align="center">One’s Complement</th><th align="center">Two’s Complement</th><th align="center">Offset Binary</th></tr></thead><tbody><tr><td align="center">5</td><td align="center">0000 0101</td><td align="center">0000 0101</td><td align="center">0000 0101</td><td align="center">1000 0101</td></tr><tr><td align="center">35</td><td align="center">0010 0011</td><td align="center">0010 0011</td><td align="center">0010 0011</td><td align="center">1010 0011</td></tr><tr><td align="center">-5</td><td align="center">1000 0101</td><td align="center">1111 1010</td><td align="center">1111 1011</td><td align="center">0111 1011</td></tr><tr><td align="center">-35</td><td align="center">1010 0011</td><td align="center">1101 1100</td><td align="center">1101 1101</td><td align="center">0101 1101</td></tr></tbody></table><p>To summarize:</p><table><thead><tr><th align="center">A Byte of Binary Digits</th><th align="center">True Value (Interpreted as True Form)</th><th align="center">True Value (Interpreted as One’s Complement)</th><th align="center">True Value (Interpreted as Two’s Complement)</th><th align="center">True Value (Interpreted as Offset Binary)</th></tr></thead><tbody><tr><td align="center">0000 0000</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">-128</td></tr><tr><td align="center">0000 0001</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">-127</td></tr><tr><td align="center">0000 0010</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">-126</td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">0111 1110</td><td align="center">126</td><td align="center">126</td><td align="center">126</td><td align="center">-2</td></tr><tr><td align="center">0111 1111</td><td align="center">127</td><td align="center">127</td><td align="center">127</td><td align="center">-1</td></tr><tr><td align="center">1000 0000</td><td align="center">-0</td><td align="center">-127</td><td align="center">-128</td><td align="center">0</td></tr><tr><td align="center">1000 0001</td><td align="center">-1</td><td align="center">-126</td><td align="center">-127</td><td align="center">1</td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1111 1101</td><td align="center">-125</td><td align="center">-2</td><td align="center">-3</td><td align="center">125</td></tr><tr><td align="center">1111 1110</td><td align="center">-126</td><td align="center">-1</td><td align="center">-2</td><td align="center">126</td></tr><tr><td align="center">1111 1111</td><td align="center">-127</td><td align="center">-0</td><td align="center">-1</td><td align="center">127</td></tr></tbody></table><h2 id="Floating-Point-Numbers-and-Other-Numerical-Types"><a href="#Floating-Point-Numbers-and-Other-Numerical-Types" class="headerlink" title="Floating-Point Numbers, and Other Numerical Types"></a>Floating-Point Numbers, and Other Numerical Types</h2><p>Now, think about how to represent decimal numbers. In the previous post we know \(47.625_{(10)}=101111.101_{(2)}\). Hence, what about storing this number with 9 bits, the first 6 for its integer parts and the last three for its decimal parts? This works, but it certainly brings troubles when some numbers with some different counts of integer and decimal digits need to be represented. A solution is to allocate a fixed number of bits for the integer and a fixed number of bits for the decimal. For example, we use two bytes for each decimal number, with the first byte representing its integer part and the second byte representing its decimal part.</p><p>This is called <strong>Fixed-point</strong> representation, in the sense that it fixes the position of the decimal point in each binary sequence that is supposed to represent a number. However, the accuracy and range obtained from this scheme is not satisfactory. If you are interested, you can delve deeper by following up the links below:</p><ul><li>For reasons and the current solution (IEEE 754), read <a href="https://floating-point-gui.de/formats/fp/">this</a>.</li><li>For a visualization of IEEE 754, use <a href="http://evanw.github.io/float-toy/">this</a>.</li><li>Note that both the significand and the exponent in IEEE 754 format use the True Form representation (the sign/magnitude way) instead of Two’s Complement (Strictly speaking, exponent is defined to be positive in IEEE 754 so that does not really matter). Why? Read <a href="https://cs.stackexchange.com/questions/6048/why-floating-point-representation-uses-a-sign-bit-instead-of-2s-complement-to-i">this</a>.</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Just knowing the principle about the bits as possibilities and 1-1 correspondence is not sufficient. Under the principle, there can be numerous practical scheme that implements the principle like the four for integer and the various IEEE standards for floating-point numbers. It is important to choose wisely. Next up, we are using the possibilities that bits give us for characters and symbols. </p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Principle </tag>
            
            <tag> Machine Architecture </tag>
            
            <tag> Two&#39;s Complement </tag>
            
            <tag> IEEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encoding Basics II - Operations in Binary</title>
      <link href="/2021/08/07/Encoding-Basics-2/"/>
      <url>/2021/08/07/Encoding-Basics-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>This reminds me the Olympic mathematics lessons during my primary school time…</p><span id="more"></span><div class="admonition info"><p class="admonition-title">Transplanted Post</p><p>After setting up this website I am gradually transferring all my previous blogs stored locally and in other blog system towards here. This is one of them. Thus, you should be aware that the date and time displayed on this blog is not accurate.</p></div><div class="admonition info"><p class="admonition-title">Post Series</p><p>This posts belongs to the series: <em>Encoding Basics</em>. You can see all posts in this series <a href="https://reimirno.github.io/series/encoding-basics">here</a>.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: None</p><p>This post is good for readers having zero or very limited knowledge on the topic: <em>Encoding</em>.However, since this post belongs to a series, you are expected to master the previous posts in the series.</p></div><h2 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h2><h3 id="Polynomial-Expansion-and-Long-Division"><a href="#Polynomial-Expansion-and-Long-Division" class="headerlink" title="Polynomial Expansion and Long Division"></a>Polynomial Expansion and Long Division</h3><p>We have already seen how a base-2 number can be written into its base-10 form by this polynomial expansion:</p><p>\[ 101111.101_{(2)} = 1 * 2^{5} + 0 * 2^{4} + 1 * 2^{3} + 1 * 2^{2} + 1 * 2^{1} + 1 * 2^{0} + 1 * 2^{-1} + 0 * 2^{-2} + 1 * 2^{-3} = 47.625_{(10)} \]</p><p>This conversion is done by addition and multiplication - hence, we can imagine that its reverse process is done by subtraction and division. To convert a base-10 number into base-2, we do a long division:</p><table><thead><tr><th align="center">Operation</th><th align="center">Quotient</th><th align="center">Reminder</th></tr></thead><tbody><tr><td align="center">(the original base-10 number)</td><td align="center">47</td><td align="center"></td></tr><tr><td align="center">÷2</td><td align="center">23</td><td align="center">1</td></tr><tr><td align="center">÷2</td><td align="center">11</td><td align="center">1</td></tr><tr><td align="center">÷2</td><td align="center">5</td><td align="center">1</td></tr><tr><td align="center">÷2</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">÷2</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">÷2</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><p>What we do is to take out the reminder and divide the quotient by 2 again, until the original number becomes 0. The sequence of reminder in the reverse order of occurrence is the binary representation of the original base-number (\(47_{(10)}=101111_{(2)}\)).</p><p>For decimal places, we divide not by \(2\) but by \(1/2\) (or, multiply by \(2\)). Each time, we takes out the integer part and multiply the decimal part by 2 again, until the decimal part became 0. The sequence of integer part number in the occurrence order (not reversed!) is the desired binary representation.</p><table><thead><tr><th align="center">Operation</th><th align="center">Decimal Part</th><th align="center">Integer Part</th></tr></thead><tbody><tr><td align="center">(the original base-10 number)</td><td align="center">0.625</td><td align="center"></td></tr><tr><td align="center">×2</td><td align="center">0.25</td><td align="center">1</td></tr><tr><td align="center">×2</td><td align="center">0.5</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><p>Hence, \(0.625_{(10)}=0.101_{(2)}\); overall, \(47.625_{(10)}=101111.101_{(2)}\).</p><p>Think about this for a second - although this division process looks strange, the polynomial expansion and the long division are really just reverse process of each other. The two process can be easily extended to numeral systems of other bases - simply replace 2 and 10 with other base values.</p><p>\[ 1F_{(16)} = 1_{(8)} * 20_{(8)}^{1} + 17_{(8)} * 20_{(8)}^{0} = 37_{(8)} \]</p><p>There are some useful heuristics:</p><ul><li>base-2 and base-8: From lower to higher digits, every 3 base-2 digits correspond to 1 base-8 digit. Thus, <code>10010110110001010101 = (0)10/010/110/110/001/010/101 = 2266125</code>. We just need to remember what 0 - 7 in octal are in binary.</li><li>base-2 and base-16: Similarly, from lower to higher digits, every 4 base-2 digits correspond to 1 base-8 digit.</li><li>base-8 and base-16: use base-2 as an intermediate base.</li><li>Know true value of small base-2 numbers at a mere glance: remember 2’s exponents first:<br>  0001 = 1<br>  0010 = 2<br>  0100 = 4<br>  1000 = 8<br>And thus you can know 1001 is 9 at a mere glance by mentally thinking about 1 + 8.</li></ul><h3 id="The-Infinite-Case"><a href="#The-Infinite-Case" class="headerlink" title="The Infinite Case"></a>The Infinite Case</h3><p>What if we want (\(0.626_{(10)} \) instead of (\(0.625_{(10)} \) to be written into binary form?</p><table><thead><tr><th align="center">Operation</th><th align="center">Decimal Part</th><th align="center">Integer Part</th></tr></thead><tbody><tr><td align="center">(the original base-10 number)</td><td align="center">0.626</td><td align="center"></td></tr><tr><td align="center">×2</td><td align="center">0.252</td><td align="center">1</td></tr><tr><td align="center">×2</td><td align="center">0.504</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.008</td><td align="center">1</td></tr><tr><td align="center">×2</td><td align="center">0.016</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.032</td><td align="center">1</td></tr><tr><td align="center">×2</td><td align="center">0.064</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.128</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.256</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.512</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.024</td><td align="center">1</td></tr><tr><td align="center">×2</td><td align="center">0.048</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.096</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.192</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.384</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.768</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.436</td><td align="center">1</td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>This goes on and on, seemingly the decimal part will never gets to 0. Let’s try \(0.1_{(10)} \) this time:</p><table><thead><tr><th align="center">Operation</th><th align="center">Decimal Part</th><th align="center">Integer Part</th></tr></thead><tbody><tr><td align="center">(the original base-10 number)</td><td align="center">0.1</td><td align="center"></td></tr><tr><td align="center">×2</td><td align="center">0.2</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.4</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.8</td><td align="center">0</td></tr><tr><td align="center">×2</td><td align="center">0.6</td><td align="center">1</td></tr><tr><td align="center">×2</td><td align="center">0.2</td><td align="center">1</td></tr><tr><td align="center">×2</td><td align="center">0.4</td><td align="center">0</td></tr><tr><td align="center">…</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>We are back to 0.2 - 0.4 loop in its decimal part and the cycle will repeat indefinitely; that is, \(0.1_{(10)} = 0.0001100110011…_{(2)}\).</p><p>In fact, \(0.625_{(10)} \) is really a special case. Most of the base-10 decimal numbers cannot be written into a finite binary form accurately. In practice, we usually take the first few digits only and write \(0.1_{(10)} \approx 0.000110011001100110011_{(2)}\) - but if we convert this binary number back to base-10 decimals, we get \(0.000110011001100110011_{(2)} = 0.099999904632568359375_{(10)} \) which is not exactly (\(0.1_{(10)}\) (This conversion is done by <a href="https://wims.unice.fr/wims/en_tool~number~baseconv.en.html">this website</a>).</p><p>This causes a problem in computers as they uses binary numeral system. Read more about the famous computer science problem of <code>0.1 + 0.2 != 0.3</code> <a href="https://0.30000000000000004.com/">here</a>.</p><h2 id="Basic-Operation"><a href="#Basic-Operation" class="headerlink" title="Basic Operation"></a>Basic Operation</h2><h3 id="Four-Basic-Arithmetic-Operations"><a href="#Four-Basic-Arithmetic-Operations" class="headerlink" title="Four Basic Arithmetic Operations"></a>Four Basic Arithmetic Operations</h3><p>How to perform addition, multiplication etc. on binary numbers? We of course can convert them into base-10, perform the operations with our usual method, and convert them back, but the easier method is just perform the operations the directly on binary numbers.</p><p>We just need to know that in binary, \(0+0=0\), \(0+1=1\), \(1+1=10\), \(0 * 0=0\), \(0* 1=0\), \(1*1=1\), and use the same rule for arithmetic operations as in base-10: in addition add bit by bit and for exceeding digits we carry forward to the next higher bit; in subtraction we subtract bit by bit and for insufficient minuend digit we borrow from the next higher bit; in multiplication we essentially just do a more complex addition; in division we just use the same long division procedure.</p><p>The only thing to take note is that if the binary dividend has decimal places, remove it by repeatedly multiplying the dividend and the divisor by 2. For example, convert <code>10.11 ÷ 1.1</code> to <code>101.1 ÷ 11</code>. The quotient will be the same for both but to divide the resultant reminder by 2.</p><h3 id="Bit-operation"><a href="#Bit-operation" class="headerlink" title="Bit operation"></a>Bit operation</h3><p>As suggested by its name, bit operation perform bit by bit. The result of one bit does not affect other bits - so, there is no carry or borrow.</p><p>Here is a table for common bit operations:</p><table><thead><tr><th align="center">Bit Operations</th><th align="center">Description</th><th>Example</th></tr></thead><tbody><tr><td align="center">AND (&amp;)</td><td align="center">The result bit is 1 only if the two bits that take the AND operation are 1</td><td>1 &amp; 1 = 1; 101 &amp; 011 = 001</td></tr><tr><td align="center">OR (&#124;)</td><td align="center">The result bit is 1 if at least of the two bits that take the OR operation is 1</td><td>1 &#124; 0 = 1; 101 &#124; 001 = 101</td></tr><tr><td align="center">NOT (~)</td><td align="center">The result is 1 if the original bit is 0, and vice versa</td><td>~1 = 0; ~111 = 000</td></tr><tr><td align="center">XOR (^)</td><td align="center">The result bit is 1 if one, and only one, of the two bits that take the OR operation is 1</td><td>1 ^ 1 = 0; 1 ^ 0 = 1; 110 ^ 100 = 010</td></tr><tr><td align="center">Left Shift (&lt;&lt;)</td><td align="center">Shift all bits to a higher position by the specified distance; discard the exceeding bits and fill in the undefined bits by 0.</td><td>10111 &lt;&lt; 2 = 11100</td></tr><tr><td align="center">Right Shift (&gt;&gt;)</td><td align="center">Shift all bits to a lower position by the specified distance; discard the exceeding bits and fill in the undefined bits by 0.</td><td>10111 &gt;&gt; 3 = 00010</td></tr></tbody></table><p>Take note:</p><ul><li>Bit operations are only defined on binary numbers. Performing bit operations on base-10 number in programming languages are actually performing bit operation on their respective equivalent binary representations (e.g., <code>14 &amp; 58 = 10</code> because in binary, <code>0000 1110 &amp; 0011 1010 = 0000 1010</code>).</li><li>Take note! Different programming languages have different implementation of the shift operation in terms of taking care of the exceeding and the undefined bits.</li><li>Try evaluate <code>~5</code> in most programming languages will give you <code>-6</code>, a negative number; this is <code>-5</code> in base-10 is represented by <code>0000 0101</code> and <code>-6</code> is <code>1111 1010</code> in computer - wait- should not <code>1111 1010</code> represent <code>250</code> in base-2? Well, yes and no. In the next post we will talk about it.</li><li>Left Shift and Right Shift on binary numbers essentially multiply / divide the original number by 2 (without remainder), if we ignore the discards.</li></ul><p>Why bother doing bit operations? In computer architecture, what is really happening are bit operations (which are easily achieved by electronic circuit; in fact, every bit operation corresponds to a <a href="https://en.wikipedia.org/wiki/Logic_gate">logic gate</a>) instead of the four basic arithmetic operations. Addition of one-bit binary number, for example, can be made possible by <a href="https://www.electronics-tutorials.ws/combination/comb_7.html">an AND operation and an XOR operation</a>, and more complex addition and subtraction behaviors originates from that set-up.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We talked about the basic conversions and operations related to binary numbers. This lays the foundation for our next post topic - how numerical values are represented in computers.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Principle </tag>
            
            <tag> Machine Architecture </tag>
            
            <tag> Binary Numeral System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encoding Basics I - Basic Encoding Principle</title>
      <link href="/2021/08/07/Encoding-Basics/"/>
      <url>/2021/08/07/Encoding-Basics/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>My first impression about computer is those zeros and ones. I still remembered the time when they say, computers are nothing but those two digits - and I, the young boy, never fully understood what that means.</p><span id="more"></span><div class="admonition info"><p class="admonition-title">Transplanted Post</p><p>After setting up this website I am gradually transferring all my previous blogs stored locally and in other blog system towards here. This is one of them. Thus, you should be aware that the date and time displayed on this blog is not accurate.</p></div><div class="admonition info"><p class="admonition-title">Post Series</p><p>This posts belongs to the series: <em>Encoding Basics</em>. You can see all posts in this series <a href="https://reimirno.github.io/series/encoding-basics">here</a>.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: None</p><p>This post is good for readers having zero or very limited knowledge on the topic: <em>Encoding</em>.However, since this post belongs to a series, you are expected to master the previous posts in the series.</p></div><h2 id="Machine-representation-and-True-value"><a href="#Machine-representation-and-True-value" class="headerlink" title="Machine representation and True value"></a>Machine representation and True value</h2><p>It is not that hard to understand why computers are zeros and ones. If computers are machines that process data (more or less they are), they must have a way to represent those data: 1, 0, 4, 10, 999, -1, log(2), “ab”, “apple”, an article, a slide, an image of the sky, a piece of your favorite music, a video game about how a plumber saves the princess… To represent all these data, computers only use numerous zeros and ones. </p><p>How? A 0 in computer represents number 0, and a 1 represents number 1, 10 in computer represents number 2, and 11 represents number 3… Note that as we run out of available digit type (0,1), we increase the digit count to represents larger number. This is called <strong>base-2 (or binary) numeral system</strong> and it is really nothing foreign. Think about our mundane base-10 numeral system: we count from number 0 to 9, and when we want to represent a number that is 1 larger than 9 we are out of digit type. So, we simply increases a digit count by 1 - Ta-da, we have “10”. </p><p>Any base-n numeral system uses <a href="https://en.wikipedia.org/wiki/Positional_notation">Positional Notation</a>, where the meaning of digit is contingent of its relative position in a number. In base-10, The digit “5” in “50” represents a quantity that is ten times larger than the quantity represented by the “5” in “15”. If we observe closely, the number 27 in base-10 is really \( 27 = 2 * 10^1 + 7 * 10^0  \) . Similarly, in base-2, \( 11011 = 1 * 2^4 + 1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 \), so 11011’s equivalent number in base-10 is 27. 27 in base-10 and 11011 in base-2 have the same true value. </p><p>Pay close attention to the exponential value (controlled by digit position) and base value (controlled by the base of numeral systems). In mathematical terms, a base-n number \( S_{(n)} \), if expressed in base-10, would be \( S_{(10)} = \Sigma(a_i * n^i)) \), where \( a_i \) is the \( i \)-th digit of \( S_{(n)} \) in its base-n form, counting from the right, starting from 0.</p><p>Decimals are handled in the same manner. For example, \(123.45 = 1 * 10^2 + 2 * 10^1 + 3 * 10^0 + 4 * 10^{-1} + 5 * 10^{-2}\). Binary decimal will look a bit strange to our brains long used to base-10, but \(10.1 = 1 * 2^1 + 0 * 2^0 + 1 * 2^{-1}\).</p><p>Yes, there are other bases for numeral systems. In fact, 45 in base-10, 55 in base-8 and 101101 in base-2 all represent the same value of number. That value is what we call true value of this number, and a true value has many representations (can be represented in various numeral systems). Our computer chose the particular representation method of base-2; hence, we have the famous “computers are nothing but zeros and ones”. (Why binary though? Because transistor - the fundamental building block of modern computers - have two states: on and off. Hence, it is really more of a practical choice. See <a href="https://stackoverflow.com/questions/5165013/why-do-computers-work-in-binary">here</a>.)</p><p>Here is a table of equivilent values in 4 commonly-used positional numeral systems:</p><table><thead><tr><th align="center">Base-10 (Decimal)</th><th align="center">Base-2 (Binary)</th><th align="center">Base-8 (Octal)</th><th align="center">Base-16 (Hexadecimal)</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">11</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">100</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">101</td><td align="center">5</td><td align="center">5</td></tr><tr><td align="center">6</td><td align="center">110</td><td align="center">6</td><td align="center">6</td></tr><tr><td align="center">7</td><td align="center">111</td><td align="center">7</td><td align="center">7</td></tr><tr><td align="center">8</td><td align="center">1000</td><td align="center">10</td><td align="center">8</td></tr><tr><td align="center">9</td><td align="center">1001</td><td align="center">11</td><td align="center">9</td></tr><tr><td align="center">10</td><td align="center">1010</td><td align="center">12</td><td align="center">A</td></tr><tr><td align="center">11</td><td align="center">1011</td><td align="center">13</td><td align="center">B</td></tr><tr><td align="center">12</td><td align="center">1100</td><td align="center">14</td><td align="center">C</td></tr><tr><td align="center">13</td><td align="center">1101</td><td align="center">15</td><td align="center">D</td></tr><tr><td align="center">14</td><td align="center">1110</td><td align="center">16</td><td align="center">E</td></tr><tr><td align="center">15</td><td align="center">1111</td><td align="center">17</td><td align="center">F</td></tr><tr><td align="center">16</td><td align="center">10000</td><td align="center">20</td><td align="center">10</td></tr></tbody></table><p>Letters are used in base-16 numeral system because we are used to the base-10 system and thus simply do not have digit beyond 9.</p><h2 id="Byte-and-when-Numbers-are-not-just-Numbers"><a href="#Byte-and-when-Numbers-are-not-just-Numbers" class="headerlink" title="Byte, and when Numbers are not just Numbers"></a>Byte, and when Numbers are not just Numbers</h2><p>Hence, we you see number 45 on the screen (like now), you know you there is a 0010 1101 sitting in your machine somewhere that causes your screen to render this shape 45. </p><p>Why 0010 1101 instead of 10 1101? Why eight digits? First you have to know any numbers of zeros at the front does not change its value. 101101, 0010 1101 and 0000 0010 1101 are all equal - just like how in base-10, 34, 0034 and 000034 are all equal. Choice of 8 digits in computer representation carries practical significance because eight binary digits makes a Byte, which is a important unit of data practically. </p><p>A <strong>bit</strong> is a <em>b</em>inary dig<em>it</em>, and a Byte equals 8 bits. Bits are rarely seen alone in computers. They are almost always bundled together into 8-bit collections, we give these collections a name: <strong>Byte</strong>.</p><table><thead><tr><th align="center">Unit</th><th align="center">Quantity</th><th align="center">Comments</th></tr></thead><tbody><tr><td align="center">bit (b)</td><td align="center">a binary digit</td><td align="center"></td></tr><tr><td align="center">Byte (B)</td><td align="center">1 Byte = 8 bits</td><td align="center">The smallest unit in computer stoarge</td></tr><tr><td align="center">WORD</td><td align="center">1 WORD = 2 Bytes</td><td align="center">Stores a Chinese character in Windows</td></tr><tr><td align="center">DWORD</td><td align="center">1 DWORD = 2 WORDs</td><td align="center"></td></tr><tr><td align="center">1kB</td><td align="center">1 kB = 1024 Bytes</td><td align="center">Differentiate kb and kB! 1 kB = 8 kb</td></tr><tr><td align="center">1MB</td><td align="center">1 MB = 1024 kB</td><td align="center"></td></tr><tr><td align="center">1GB</td><td align="center">1 GB = 1024 MB</td><td align="center"></td></tr><tr><td align="center">1TB</td><td align="center">1 TB = 1024 GB</td><td align="center"></td></tr></tbody></table><p>With a bit you can represent two possible numbers:</p><p>0 = \( 0_{(10)}\)<br>1 = \( 1_{(10)}\)</p><p>With 2 bits the number of possibilities you can represent is 4:</p><p>00 = \( 0_{(10)}\)<br>01 = \( 1_{(10)}\)<br>10 = \( 2_{(10)}\)<br>11 = \( 3_{(10)}\)</p><p>With a byte you can represent 256 possible numbers:</p><p>00000000 = \( 0_{(10)}\)<br>00000001 = \( 1_{(10)}\)<br>…<br>11111110 = \( 254_{(10)}\)<br>11111111 = \( 255_{(10)}\)</p><p>But wait - why should the 256 different byte-long digits always represent different numbers? What about letting them represent 256 different letters, or symbols? What about this:</p><p>0000 0000 = letter “a”<br>0000 0001 = letter “b”<br>…<br>1111 1110 = symbol “,”<br>1111 1111 = symbol “.”</p> Does this 1-1 representation scheme reminds you  <span class="hint--info hint--rounded hint--top" data-hint="Morse code?Braille?" ontouchstart>anything</span>?<p>And when you realize that 256 possibilities are not sufficient to represent all letters in all languages, you start to think about using two bytes for a character instead of one. Using more bits expands the number of possibilities that you can represent.</p><p>Moreover, What about:</p><pre class="language-none"><code class="language-none">0000 0000 0000 0000 0000 0000 &#x3D; black color0000 0000 0000 0000 0000 0001 &#x3D; black, but with a bit red...0000 0000 0000 0001 0000 0000 &#x3D; black, but with a bit green...1111 1111 1111 1111 1111 1111 &#x3D; white color</code></pre><p>This epiphany is a basic principle of encoding in computers - that bits are not just numbers, but possibilities. The possibilities can be numerical possibilities (in which case bits represent numbers), lexical possibilities (in which case bits represent letters and symbols), chromatic possibilities (in which case bits represent colors)… Each of these types of possibilities is called a <strong>Encoding Method</strong>. We give computer these bits, and we just need some extra bits to tell the computer which encoding method should be used in the current context for it to interpret the bits correctly (Incidentally, this information is usually communicated by setting a file extension).</p><p>Remember, computers only have zeros and ones - but with these bits we can represent numbers, texts, audios, videos and more - we just need different encoding methods.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>With the driving question “why computers are said to be comprising of zeros and ones”, we got to know the concept of number representation, and extended it to representation of different types of possibilities in general - this is the key spirit of computer encoding. The next post in the series will delve further into the binary representation of numbers.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Principle </tag>
            
            <tag> Machine Architecture </tag>
            
            <tag> Binary Numeral System </tag>
            
            <tag> bit and Byte </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Working with Agencies</title>
      <link href="/2021/08/06/Working-with-Agencies/"/>
      <url>/2021/08/06/Working-with-Agencies/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>These months of clearing all administrative requirement before going to my University witnessed more difficulties as I expected. </p><span id="more"></span><p>Immunizations, finance documents, travel documents, insurance, class registration, housing, meal plan, flight, transcripts mailing… some went quite smoothly, yet many did not. </p><p>Assorted sudden, dramatic changes and strange errors have happened at a ridiculously, or so I think, pace: Student Application were lost due to system bugs, flight ticket price surged unreasonably high, testing agencies sent my transcript wrongly to Canada (I still never figure out why), and waiver forms received two contradicting confirmation emails… Admittedly, some complications originated from the COVID-19 situation, but the absurdity of complications I encountered made me feel like one of the most unluckiest incoming international freshmen at my school this year.</p><p>There are plenty to learn from the experience. When something gets wrong in an administrative process, do these in the specified order:</p><ul><li>Try to re-do the process and see if the problem is gone (e.g., refresh the page, retract the previous form and submit a second form).</li><li>Check their Q&amp;A to see whether they got this error covered.</li><li>Ask people around you or on the Internet to see whether they have had similar situations.</li><li>Find their contact method and ask for help.</li></ul><p>We hope the first three steps can resolve the issue but often they do not. We have to get into the fourth step, i.e., contact an official/manager in charge (frankly speaking, the solution you get by asking people around you is often just the fourth step, too). If possible, call them up; if not, submit a ticket or email, describing the problem with proper screenshots/proof documents attached, if any. The process is probably tedious - but when working with agencies, keep two p-words in mind: <strong>persist</strong> and <strong>polite</strong>.</p><p>What does persist mean? It means when no one is answering the call in the morning, call again in the afternoon, and tomorrow, and the day after tomorrow. Do not give up. It means if the person at the other side is not replying, send another email the next day, and three days later, and a week later. Be patient, never give up, but do give the other side a gentle little reminder once a while. Be prepare for a “seesaw battle”, so to speak; do not channel all your mental energy on this unresolved problem.</p><p>What does polite mean? It means to have gratitude and courtesy. Remember, for many other unreasonable things you cannot even find a contact number to ask for help. You have nowhere to complain or submit ticket to. If there is a contact number, it is already not the worst case. Moreover, be polite is important if you plan to nudge the other side every once a while. Never become irritable.</p><p>Again, <strong>persist</strong> and <strong>polite</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> Non-technical </category>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Common CMD Commands</title>
      <link href="/2021/08/05/Common-CMD-Commands/"/>
      <url>/2021/08/05/Common-CMD-Commands/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>A list of common windows CMD commands. </p><span id="more"></span><div class="admonition note"><p class="admonition-title">Update Ongoing</p><p>This list will be updated.</p></div><p>The full list offered by MS is <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands">here</a>. I will put some commone ones in this post.<br>If any command cannot be found: check env variables / sys variables; go to<code>C:\Windows\System32</code> and open CMD there.</p><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><p><code>shutdown</code> - shut down the computer<br><code>cmd</code> - start cmd<br><code>echo</code> - output text<br><code>ver</code> - display OS ver<br><code>systeminfo</code> - display all system info<br><code>tasklist</code> - display applications and related tasks<br><code>date</code> - show/set date<br><code>time</code> - show/set time<br>Type <code>/?</code> behind a command name to see its help (<code>--help</code> for Bash)<br>Wildcards: <code>*</code> matches any sequence of chars, <code>?</code> matches a single char.<br><code>powercfg</code> - print battery stats<br><code>chkdsk /f</code> - check a drive integrity<br><code>read</code> - read user input (put this as the last line of a batch file to avoid closing on finishing)</p><h2 id="Visual"><a href="#Visual" class="headerlink" title="Visual"></a>Visual</h2><p><code>title</code> - set console title<br><code>color</code> - change console color<br><code>cls</code> - clear the screen</p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><p>To start a .exe, just enter its full path and name. Fro batch files,<br><code>start</code> - create a new cmd.exe and start the batch file, variables not shared<br><code>call</code> - run the batch file in the same cmd window, sharing variables<br><code>taskkill</code> - terminate a process or a application<br>Ctrl+C to terminate a run.<br><code>exit</code> - quit cmd<br><code>timeout &lt;num of sec&gt;</code> - wait for secs or keystroke (-1 means forever)<br><code>schtasks</code> - schedule a task</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p><code>ping</code> - pings the network<br><code>ipconfig</code> - display IP network settings<br><code>netstat</code> - get a list of all active TCP connections from computer<br><code>net use Z: &quot;...&quot; /persistent:yes</code> - establish a mapping of drive to Z:</p><h2 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h2><p><code>d:</code> or <code>D:</code> - change the current drive to “D:/“<br><code>cd &lt;path&gt;</code> - go to the specified <code>path</code> (in the same disk only)</p><div class="admonition warning"><p class="admonition-title">Common Pitfalls</p><p>Do not use Chinese characters in path.</p><p>Try &quot;/&quot; and &quot;\&quot;.</p></div><p><code>cd ..</code> - go back to the parent directory<br><code>cd</code> or <code>cd ~</code> - go back to the home directory (Bash only)<br><code>%cs%</code> - (not a command) pwd</p><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p><code>dir</code> - list directory content (this should be <code>ls</code> in Bash)<br><code>tree</code> - display file structure<br><code>mkdir</code> - create an empty folder<br><code>touch</code> - create a file with the specified format<br><code>rmdir</code> - delete a folder<br><code>ren</code> or <code>rename</code> - rename a folder or file<br><code>del</code> or <code>erase</code> - delete a file (<code>del</code> does not accept wildcard)<br><code>move &lt;source_file_path&gt; &lt;destination_file_path&gt;</code> move a file<br><code>replace &lt;source_file_path&gt; &lt;destination_dir_path&gt;</code> replace all files in destination_dir with source_file (including all sub-folders)<br><code>attrib</code> - get/set file attributes<br><code>find</code> or <code>findstr</code> - search<br><code>copy</code> <code>xcopy</code> or <code>robocopy</code> - copy files<br><code>move</code> - move files (<code>mv</code> in Bash)<br><code>unzip</code> - unzip (Bash Only)</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Cheat Sheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> CMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Basics</title>
      <link href="/2021/08/05/Git-Basics/"/>
      <url>/2021/08/05/Git-Basics/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>This is all you need to know about Git.</p><span id="more"></span><div class="admonition info"><p class="admonition-title">Transplanted Post</p><p>After setting up this website I am gradually transferring all my previous blogs stored locally and in other blog system towards here. This is one of them. Thus, you should be aware that the date and time displayed on this blog is not accurate.</p></div><div class="admonition warning"><p class="admonition-title">Expected Reader Experience: None</p><p>This article is good for readers having zero or very limited knowledge on the topic: <em>Git</em>.</p></div><h2 id="About-Git"><a href="#About-Git" class="headerlink" title="About Git"></a>About Git</h2><h3 id="Why-use-Git"><a href="#Why-use-Git" class="headerlink" title="Why use Git?"></a>Why use Git?</h3><p>Many times we will need to control the versions of our files, especially in large projects where many members are cooperating. You can do a rudimentary version control by regular backup your files, but it is time-consuming, and often you cannot retrieve the exact version you want because of your backup period missed it! Git offers a systematic, efficient and fast solution for version control. In contrast to centralized version control tools like SVN, Git employs distributed version control.</p><h3 id="“Distributed”-Workflow"><a href="#“Distributed”-Workflow" class="headerlink" title="“Distributed” Workflow"></a>“Distributed” Workflow</h3><p>Distributed version control implies that all members of the team would have a copy of the project file on their computer (called local repository). There is no “central server” as in centralized version control, so to speak. Team members exchange changes among their own devices (For example, if member A and member B both are collaborating on the file <code>apple.txt</code>, they can use Git to push the changes to each other so both member would have the updated <code>apple.txt</code> with both changes in it) - and if one computer fails, just copy files from another. </p><p>In practice, however, the team would usually set up a central repository online (called remote repository), commit and pull changes from that central repository to and from their local repositories (instead of pull and push between their local computers). This central repository is set up only for the ease of exchanging files - if it fails, unlike in centralized version control, no data will be lost. An online central repository could allow members not in the same LAN to collaborate with each other; also, member A does not need to wait until member B to turn on her computer so as to push the changes to member B.</p><h2 id="Git-Setup"><a href="#Git-Setup" class="headerlink" title="Git Setup"></a>Git Setup</h2><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><p>Download and install Git from <a href="https://git-scm.com/">the official website</a>.<br>After installing, 3 executables will appear: Git Bash, Git CMD and Git GUI. Git Bash and Git CMD are both terminals-like command windows and Git GUI is a GUI wrapper around them (read about their difference <a href="https://stackoverflow.com/questions/45034549/difference-between-git-gui-git-bash-git-cmd">here</a>). For most of the time we only use Git Bash to do everything by typing out commands in it.</p><h3 id="Set-up-Environment"><a href="#Set-up-Environment" class="headerlink" title="Set up Environment"></a>Set up Environment</h3><p>Start Git Bash, and execute:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span></code></pre><p>The <code>git config</code> sets configuration and preferences when using Git (Think of the Settings in other GUI applications). Clearly, these two lines set an identity for you. In version control, it is important to identify each change-maker as the person who commit a change, so that the team can know whose bugs this is. Note that this name and email does not really “log in” to anything or any platform. It is just two lines of text field that will come along with you and your committed changes, like an ID card.</p><p>The <code>git config</code> actually writes data into a local file on your computer that stores all your settings. The <code>--global</code> parameter specifies the level of control. It instructs that the configuration should be written into a a config file under the current computer user’s personal folder, so that the settings here you made in this command would apply to every repository this current user use in the future. The other level of control are <code>--local</code> (writes data to the configuration file in a repository, so the configuration apply to only one repository) and <code>--system</code>(writes data to the configuration file in Git installation directory so the configuration apply to all users of this computers).</p><p>Configurations set at lower levels will override those in higher levels. So, configurations set at local repository level overrides those in user level, which in turn overrides those in system level.</p><ul><li><code>git config [control level] -e</code> allows you to open those configuration files and edit them directly - it will have the same effects as setting those configurations with Git Bash commands. As said, <code>control level</code> can be <code>[--local|--global|--system]</code>. If left blank, it is <code>--local</code> by default.</li><li><code>git config [control level] -l</code> allows you to see the content of the configuration files - you can check what configurations are already made.</li><li><code>git config [control level] --add &lt;section&gt;.&lt;key&gt; &lt;value&gt;</code> adds a configuration.</li><li><code>git config [control level] --get &lt;section&gt;.&lt;key&gt;</code> (or simply <code>git config [control level] &lt;section&gt;.&lt;key&gt;</code>) let you see a configuration. If the requested <code>section</code> does not exist, an error is thrown; if the requested <code>key</code> does not exist, nothing returns. </li><li><code>git config [control level] --unset &lt;section&gt;.&lt;key&gt;</code> deletes a configuration.</li></ul><p>Two important keys, other than <code>user.name</code> and <code>user.email</code>, that I think one should know, are <code>core.editor</code> and the <code>alias</code> section.  </p><ul><li>The <code>editor</code> controls what editor will be used by Git by default - set it to your favorite editor installation path, for example:</li></ul><pre class="language-none"><code class="language-none">core.editor&#x3D;&quot;D:\Portables\NPP_Portable_7.9.5\notepad++.exe&quot; -multiInst -notabbar -nosession -noPlugin</code></pre><p>You can also set editor by <code>git config --global core.editor editor-path</code>. If you are using NPP, use the 32-bit version; if not, you must type <code>-multiInst -notabbar -nosession -noPlugin</code> after the <code>editor-path</code> because the 64-bit plugins may cause problems.</p><ul><li>The <code>alias</code> sections controls all shorthands for your git commands. See below.</li></ul><h3 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h3><p>This is really another type of configuration stored in the <code>config</code> file. Alias allows you to shorten commands.</p><ul><li><code>git config [control level] alias.&lt;short-name&gt; &lt;command&gt;</code> sets an alias</li><li><code>git config --global --unset alias.&lt;short-name&gt;</code> removes an alias</li><li>You can also go to the configuration file (Still remember how? Check above) and add/delete alias directly, following the syntax that is already there (should be quite simple).<br>Here are some common alias you may want to set:</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global alias.co checkout<span class="token function">git</span> config --global alias.br branch<span class="token function">git</span> config --global alias.ci commit<span class="token function">git</span> config --global alias.st status<span class="token function">git</span> config --global alias.unstage <span class="token string">'reset HEAD --'</span><span class="token function">git</span> config --global alias.last <span class="token string">'log -1 HEAD'</span></code></pre><p>Alias is not just capable of setting git command. To set a non-Git command, use ! to lead; to set a multiple line command, use &amp; to concatenate. For example,<br><code>!cd $&#123;GIT_PREFIX:-.&#125; &amp;&amp; start update.sh</code> this will go into the project root directory and execute the <code>update.sh</code> there. <code>!c:/windows/explorer</code> will start a windows explorer.</p><h3 id="Set-up-Local-Directory"><a href="#Set-up-Local-Directory" class="headerlink" title="Set up Local Directory"></a>Set up Local Directory</h3><p>For Git to manage your directory you must let it know where it is. Direct (not sure how to? See my other <a href="/2021/08/05/Common-CMD-Commands/" title="[blog]">[blog]</a> for common CMD command) Git Bash to your project root directory (that is, the folder that contains all project files you want to do version control; if you do not have one, create one and put all your files into it), and type</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init</code></pre><p>This initiates the current folder as an empty local Git repository - which means Git starts managing it. You will find that in your project root directory a <code>.git</code> folder is created. If you do not see it, it might be hidden. Check Google to see how to reveal hidden files. Folders that contains a <code>.git</code> subfolder is managed by Git. (Incidentally, the configuration file <code>config</code> for this local repository is also in the <code>.git</code> folder.)</p><ul><li><code>git init</code> initializes the current directory as a git directory.<ul><li><code>git init &lt;directory&gt;</code> initializes the specified directory.</li><li>Run <code>git init</code> multiple times will do nothing. Only the configuration from the first time is kept.</li></ul></li></ul><p>Now you have set up a Git local repository at your project directory - that is, you have set up the three-tree Git structure that manages version control for your project folder. The three trees are: working directory(working tree), staging index, and commit history. </p><ul><li>The working tree is simply your computer folder, the folder you want to manage. When you make changes (adding, modifying, deleting files) in that folder, the working tree is updated automatically with the same change (unless you tell Git to ignore certain files explicitly - we will cover that later).</li><li>The staging index stores your changes that have been “staged” by using <code>git add</code> command. So, after you make a change to a file, the working tree is automatically updated but the staging index is not. You can select certain changes and add them to the staging index (if a change is not staged, in the staging index the file that is supposed to bear this change remains unchanged). After adding, as long as you do not “commit”, you can always remove them from the staging index.</li><li>The commit history contains permanent snapshot of your file status. After adding certain files into the staging index, you can use <code>git commit</code> to commit the current file status in the staging index. This is like backing-up a copy of the current version in commit history. Think of saving checkpoints in a long game, the numerous commits are your checkpoints in the development cycle. When in need, you can always checkout a certain commit version to the working tree so as to retrieve a previous version.</li></ul><!-- <img src="tree.jpg" width="50%" height="50%" alt = "Git Tree Structure" title = "Git Tree Structure" loading="lazy"> --><h2 id="Use-Git"><a href="#Use-Git" class="headerlink" title="Use Git"></a>Use Git</h2><h3 id="Get-help"><a href="#Get-help" class="headerlink" title="Get help"></a>Get help</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token operator">&lt;</span>verb<span class="token operator">></span><span class="token function">git</span> <span class="token operator">&lt;</span>verb<span class="token operator">></span> --help<span class="token function">git</span> <span class="token operator">&lt;</span>verb<span class="token operator">></span> -h<span class="token function">man</span> git-<span class="token operator">&lt;</span>verb<span class="token operator">></span></code></pre><p>There are four ways to get help about a certain action. Use any when in doubt, for example <code>git config -h</code> will tell you how to use the <code>git config</code> command in a brief way. Of course, you could also check the <a href="https://git-scm.com/docs">official documentation</a>.</p><h3 id="Add-Commit-Locally"><a href="#Add-Commit-Locally" class="headerlink" title="Add, Commit Locally"></a>Add, Commit Locally</h3><p>Now, type</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> -A<span class="token function">git</span> commit -m <span class="token string">"Initialized a repo"</span></code></pre><p>If you started from an empty folder, this two lines will do nothing; but if you started from a project folder with pre-existing files, these two lines add those files to the Git repository we just initialized (remember, we just initialized an <em>empty</em> repository). You can understand it as “backing-up” those files to Git.</p><p>If we then created another file, say <code>test.txt</code>, under our project folder, and re-run those two lines of commands, Git will again detect this change and do another commit to the local repository to update the version information. If we do not make any change and run those two lines, nothing will happen.</p><p>Let’s look closely. <code>git add</code> detects and “stages” changed files. When you do <code>git commit</code>, all staged changes are “committed”. You always need the stage-commit two steps to inform Git to update version record (or, “backup your files”) after making any change. <a href="https://stackoverflow.com/questions/4878358/why-would-i-want-stage-before-committing-in-git">Why two steps</a></p><ul><li><code>git add -A</code> stages all changed file. <ul><li>You can also stage selected file(s) by <code>git add &lt;file-name&gt; &lt;file-name&gt; ...</code>.</li><li>This accepts wildcards. Use <code>git add *.&lt;file-format&gt;</code> to stage all files with a specific format, <code>git add &lt;file-name-prefix&gt;*</code> to stage all file with a certain prefix in names, etc.</li><li>Use <code>git add .</code> to stage all new and modified files but not deleted files, <code>git add -u</code> to stage all deleted and modified files but not new files.</li></ul></li><li>How to “unstage”?<ul><li>Use <code>git reset</code> to unstage all files.</li><li>Use <code>git reset &lt;file-name&gt;</code> to unstage a specific file.</li></ul></li><li><code>git commit -m &quot;msg&quot;</code> write a message on this commit. <ul><li>You can do both steps (<code>add</code> and <code>commit</code>) by adding <code>-a</code> argument to <code>git commit</code>. That is, do <code>git commit -a -m &quot;msg&quot;</code> to skip <code>git add</code>. This stages all modified files and commit them.</li><li>The <code>-m</code> signals a msg argument and the stuff in quotation marks are the actual message content. As a good practice, your message should describe what changes you have made in this commit. There are ways to omit this message argument but please do not do that. </li></ul></li></ul><div class="admonition warning"><p class="admonition-title">Common Pitfall</p><p>Do not just omit &quot;-m&quot; argument - a Vim editor will pop out to ask you to enter the message.</p></div><ul><li>Realize you have forgotten to add or remove something after committing? <code>git add</code> or <code>git rm</code> it first, and then <code>git commit --amend</code> to re-submit. You will have only one commit in the end instead of two; the second commit would replace the first one.</li><li>Have a typo in your commit message? Run <code>git commit --amend -m &quot;correct message&quot;</code>.</li></ul><h3 id="Move-Delete-Rename"><a href="#Move-Delete-Rename" class="headerlink" title="Move, Delete, Rename"></a>Move, Delete, Rename</h3><p>By right you can work without these - but they can speed up the process.</p><ul><li>There is a separate command <code>git rm &lt;file-name&gt;</code> to both delete a file from the working directory (file system) and the staging index.<ul><li>It has the same effect as deleting that file manually (or run <code>rm &lt;file-name&gt;</code>) in file explorer and then <code>git add</code>.</li><li><code>git rm &lt;file-name&gt; -cached</code> will remove the file from the staging index but it will remain at the working directory.</li><li>If the file to be deleted has already been staged, you must use force deletion <code>git rm -f &lt;file-name&gt;</code>.</li><li>You can delete all files and directory in a parent directory by going into that directory and run <code>git rm –r * </code>(recursive deletion).</li></ul></li><li><code>git mv &lt;file_from&gt; &lt;file_to&gt;</code> would move or rename the file from both the working directory (file system) and the staging index.<ul><li>It has the same effect as renaming a file in the file explorer (or run <code>mv &lt;file_from&gt; &lt;file_to&gt;</code>), and then <code>git rm &lt;file_from&gt;</code> followed by <code>git add &lt;file_to&gt;</code>. </li><li>If the new file name is already existing, use force rename <code>git mv -f &lt;file_from&gt; &lt;file_to&gt;</code></li></ul></li></ul><h3 id="Check-status"><a href="#Check-status" class="headerlink" title="Check status"></a>Check status</h3><p>Believe me, you will need to know the status quo of your project now and then.</p><ul><li><code>git status</code> tells you the current project status: what changes are detected, and out of these which are staged but not committed, and what are not even staged (not tracked)… You can have a better idea where you are in the project.</li><li><code>git log</code> shows you this repository’s commit history. The displayed <code>commit id</code> are numerical ids calculated by Git that uniquely identify each commit.<ul><li>Add <code>-p</code> or <code>--stat</code> to show changes made along with each commit. </li><li>Add <code>--graph</code> to show visual history of merging and branching. </li><li>Add <code>--pretty=oneline</code> argument to display one commit in one line, or <code>-s</code> to shorten. If you used <code>-s</code>, new files are marked by <code>??</code>, staged files are marked by <code>A</code> and modified files are marked by <code>M</code>. </li><li>Add <code>--reverse</code> to display logs in the reverse order.</li><li>Add <code>--&lt;user-name&gt;</code> to display only commits made by a specific user.</li><li>Add <code>--since</code> <code>--before</code> <code>--until</code> <code>--after</code> to limit the time period at which commits are done. For example, <code>--before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125;</code></li><li>Add <code>--no-merges</code> to hide merged commits.</li><li>Check <a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History">Viewing the Commit History</a> for more options.</li></ul></li><li><code>git blame &lt;file-name&gt;</code> lists the editing history of a file.</li><li><code>git diff &lt;file-name&gt;</code> shows you the latest change made on the selected file.</li><li><code>git reflog</code> displays all commands you have made. I barely use this - but it turns out useful under certain desperate situations.</li><li><code>git clean</code> can remove untracked files from the working tree.</li></ul><h3 id="Regret"><a href="#Regret" class="headerlink" title="Regret"></a>Regret</h3><p>One of the most important reasons why version control exists is to allow you to regret.</p><ul><li><code>git checkout &lt;file-name&gt;</code> let you discards all unstaged changes in the working tree, but it will not touch any change that has already been committed.</li><li><code>git reset [reset mode] commit-id</code> let you go back to a previous commit (last version) - this can revert all changes since that commit.<ul><li>Find your commit-id by <code>git log</code>, or, just use <code>HEAD^</code> for the one commit back, <code>HEAD^^</code> for two commits back, <code>HEAD^3</code> for three, etc. (If you want to move back forward in commits after moving back, you will not see your desired id with <code>git log</code>; in this case, use <code>git reflog</code>.)<ul><li>HEAD points to the current branch, and the current branch points to a specific commit.</li></ul></li><li><code>reset mode</code> can be <code>[--soft | --mixed | --hard]</code>. If left empty, it is <code>--mixed</code> by default. See their difference <a href="https://stackoverflow.com/questions/34149356/what-exactly-is-the-difference-between-all-the-git-reset-modes">here</a> or <a href="https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified">here</a>. For most of the case, I simply want to go back in time and thus I use <code>--hard</code> (it will simply discard all changes since that previous commit, reset your working tree to that previous commit and leave no staged change in staging index).</li></ul></li><li>People always forget - but any wrongly deleted file can also be reverted in the same way! Git does not only revert modification, it can revert deletion.</li><li>Incidentally - do you not think <code>checkout</code> is too long? Remember alias? Run <code>git config --global alias.co checkout</code> and from now on you can replace <code>checkout</code> with <code>co</code> every time you want to use it.</li></ul><div class="admonition warning"><p class="admonition-title">Common Pitfall</p><p>Sometimes you will see Git commands with double dashes <code>--</code> before their <code>&lt;file-name&gt;</code> parameter. For example,  <code>git checkout -- &lt;file-name&gt;</code> instead of just  <code>git checkout &lt;file-name&gt;</code>. The meaning of this please refer to <a href="https://stackoverflow.com/questions/14217853/what-does-the-double-dash-option-do-on-git-reset">here</a>, <a href="https://stackoverflow.com/questions/23208156/why-do-we-use-double-dash-in-git-checkout">here</a> and <a href="https://stackoverflow.com/questions/22750028/in-git-what-does-dash-dash-mean">here</a>.</p></div><h2 id="Remote-Repository"><a href="#Remote-Repository" class="headerlink" title="Remote Repository"></a>Remote Repository</h2><h3 id="Set-up-Remote-Directory"><a href="#Set-up-Remote-Directory" class="headerlink" title="Set up Remote Directory"></a>Set up Remote Directory</h3><p>As previously said, usually we set up a remote directory online for easy exchange of changes. The standard solution is GitHub, a free platform for hosting Git remote repository - this saves you the hassle of building a git server by your own. Register a Github account first, and then you can get remote repositories for free. (Free users can only create public repositories - that means your project is publicly visible; to create private repositories, you must pay for GitHub Pro; <a href="https://education.github.com/">students may get GitHub Pro for free</a>; another option is to build a Git server of your own - but for personal users that probably cost more than a GitHub Pro…)<br>Register a GitHub account and create a repository (name it properly to avoid confusion). If you need guidance on these, check <a href="https://docs.github.com/en/get-started">GitHub Documentation</a>.</p><p>Now two things need to be done:</p><ul><li>Link your local repository to the remote repository. This can be done by <code>git remote add remote-alias remote-url</code>. The <code>remote-alias</code> is a name you give to this remote repository (usually we use <code>origin</code>, but you can use any name), and the <code>remote-url</code> is the link to this repository. This link can be obtained by clicking “Clone” on your GitHub repository page. There are two options - HTTPS or SSH. If you are the repository owner, use SSL, or else use HTTPS. </li><li>Set your remote repository to allow read/write from your local repository. This is done by add a SSH key to your GitHub account - for detailed steps, see <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">GitHub Documentation</a>. If you do not do this you cannot push anything from local to remote - it will be rejected.</li></ul><p>Once the two things are done you basically connected your local and remote repository.</p><ul><li>You can check all added remote repository by <code>git remote -v</code>.</li><li>You can remove any added remote repository by <code>git remote remove &lt;remote-alias&gt;</code> (this does not delete the GitHub repository; it only disconnect the local and the remote repository).</li><li>You can rename a remote repository by <code>git remote rename &lt;original-name&gt; &lt;new-name&gt;</code>.</li><li>Local and remote repository need not to be one-to-one; for example, you can add multiple remote repositories to a local repositories (just make sure you push to each of them). </li></ul><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><p>Now, every time you committed some change, you can do <code>git push -u &lt;remote-alias&gt; &lt;branch-name&gt;</code> to push this commit to the remote repository at GitHub, your teammates can then get changes from there.</p><ul><li><code>git push</code> commands allows you to push the local commit history to the remote repository after you committed all changes. The <code>-u</code> is to link the current local branch to the remote branch with the <code>branch-name</code>, so the second time onwards you only need to enter <code>git push &lt;remote-alias&gt; &lt;branch-name&gt;</code> to push the local commits on current local branch to the linked remote branch. All repository will by default have one branch call <code>master</code>, so you probably want to use <code>git push -u origin master</code> if you have not modified any branch. We will talk about branching later.</li><li>Note that Git actually silently creates a remote branch with the same name as the local branch, and what we do is to push content from the local branch to that remote branch. If we want our target remote branch to have a different name, we can use <code>git push &lt;remote-alias&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</code>. Of course, if that remote branch with our desired name is already created, we just do <code>git push &lt;remote-alias&gt; &lt;desired-remote-branch-name&gt;</code>.</li></ul><h3 id="Conflict-Pull-Fetch-Merge"><a href="#Conflict-Pull-Fetch-Merge" class="headerlink" title="Conflict, Pull, Fetch, Merge"></a>Conflict, Pull, Fetch, Merge</h3><div class="admonition info"><p class="admonition-title">Best Practice</p><p>Do not modify the same file at the same time from two branches.</p></div><p>Sometimes, when you and your teammates modified the same document and both want to push to the remote repository, there will be conflicts. When this happens, the push action on one side would be rejected and she must resolve the conflict before pushing. </p><ul><li>Let your copy override your teammate’s copy. In this case just force push by <code>git push &lt;remote-alias&gt; &lt;branch-name&gt; -f</code>. This results in the loss of your teammate’s changes and you probably do not want to do that.</li><li>Instead, the common thing to do is to take in your teammate’s change first in your local repository and then push. To do so, use <code>git fetch</code> to download all remote changes (this does not modify your local files or staging index) and if you are fine with all the changes, use <code>git merge</code> to merge these changes to your local files (this will automatically creates a new commit that incorporates all changes from the remote directory). To do this in one step, use <code>git pull</code>.</li><li>If there are true conflicts - i.e., you and your teammate modified the same part of the same document, <code>git merge</code> or <code>git pull</code> cannot incorporate the changes from the other side automatically, and will throw a merge conflict.<ul><li>In such a state, The <code>HEAD</code> pointer stays the same, and The <code>MERGE_HEAD</code> ref is set to point to the other branch head; All files without conflicts are staged (but not committed) and all files with conflicts are not staged. The working tree files with conflicts are updated to reflect the result of the merge conflicts using the familiar conflict markers <code>&lt;&lt;&lt;</code> <code>===</code> <code>&gt;&gt;&gt;</code>. See <a href="https://git-scm.com/docs/git-merge">how conflicts are presented</a>.</li><li>You can check the conflicts by <code>git mergetool</code>, <code>git diff</code> or <code>git log --merge -p &lt;path&gt;</code> to see the difference. To check a file content: <code>git show :1:&lt;filename&gt;</code> shows the common ancestor, <code>git show :2:&lt;filename&gt;</code> shows the <code>HEAD</code> version, and <code>git show :3:&lt;filename&gt;</code> shows the <code>MERGE_HEAD</code> version.</li><li>If you want to let your teammate’s changes override your changes, do <code>git checkout --theirs &lt;file-name&gt;</code> and then <code>git add &lt;file-name&gt;</code>. Still you can use <code>.</code> in place of the <code>file-name</code> to resolve all conflicts using your teammate’s copy. To do the reverse, change <code>--theirs</code> to <code>--ours</code>.</li><li>If you want a bit from both side, you have to go to the conflicted file, open it and adjust its content manually. After that, <code>git add</code> and <code>git commit</code>.</li><li>To avoid going into such a merge-conflicted state in the first place, you can set the merge strategy when doing merge/pull: <code>git merge --strategy-option theirs</code> OR <code>git pull --strategy-option theirs</code>. You can shorten the <code>--strategy-option</code> to <code>-X</code>.</li></ul></li><li>There are two commands that might be useful.<ul><li><code>git merge --abort</code> to abort a merge when in a conflicted state (it really does a <code>git reset --merge</code> but will not run when not merging). You usually want to use this when a merge gets into a complex conflict.</li><li><code>git merge --continue</code> to commit changes after resolving all conflicts (it really does a <code>git commit</code> but it will not run when not merging). </li><li>You can use these two commands in replacement of <code>git reset</code> and <code>git commit</code> during a merge, see <a href="https://stackoverflow.com/questions/54381041/what-does-git-merge-abort-is-equivalent-to-git-reset-merge-when-merge-head">here</a>.</li></ul></li></ul><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><p>Following the previous steps, we started from a local repository, created another remote repository and established a connection between the two. There is really a simpler way to achieve the same effect: to start from a remote repository.<br>Create a repository in GitHub and get its SSH link, direct Git Bash to an empty folder in your file system locally (you probably want to create a dedicated folder for this), and then type in <code>git clone &lt;repo-link&gt;</code>. The files (if any) would be downloaded from GitHub remote repository into that folder, a local Git repository will be initialized automatically at that folder, a local branch with the same name as the remote branch will be created and it will be linked to the remote branch - all done.</p><ul><li><code>git clone &lt;repo-link&gt; &lt;local-directory&gt;</code> can clone the remote repository to the specified local directory (if not specified, clone to the current directory by default)</li><li><code>git clone -o remote-alias</code> clones a remote repository while setting an alias for it (by default it is <code>origin</code>).</li><li>To add other tracking relation between the current local branch and remote branches, use <code>git checkout --track &lt;remote-alias&gt;/&lt;remote-branch-name&gt;</code>.</li></ul><div class="admonition warning"><p class="admonition-title">Common Pitfall</p><p>You do not need to do <code>git init</code> before <code>git clone</code>. <code>git clone</code> does everything for you.</p></div><h2 id="Branch-Management"><a href="#Branch-Management" class="headerlink" title="Branch Management"></a>Branch Management</h2><h3 id="How-to-Use-Branch"><a href="#How-to-Use-Branch" class="headerlink" title="How to Use Branch"></a>How to Use Branch</h3><p>Why bother branching?</p><p>Branching is inevitable. When we set up a remote repository, we are already using branching - one local branch and one remote branch. When multiple team members cloned a remote repository to their respective computers, their local branches are created. They need to constantly track the remote branch, pull from it and merge their work into the remote branch. </p><p>Moreover, we will open a local branch every time a new feature request or bug pops out. We will maintain a stable branch <code>master</code> locally, and when bug or features are calling, the person in charge will branches out from the stable branches and do her own work on that separate branch <code>dev</code>, leaving the stable branch intact; after she finishes, she merge back her work into <code>master</code> and delete <code>dev</code>. This provides extra security to the work we have already done.</p><p>There is a good illustration (in Chinese) of this workflow <a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424">here</a> and <a href="https://www.liaoxuefeng.com/wiki/896043488029600/900375748016320">here</a>. Remember: HEAD points to the current branch, and the current branch points to a specific commit. </p><h3 id="Make-Switch-Delete"><a href="#Make-Switch-Delete" class="headerlink" title="Make, Switch, Delete"></a>Make, Switch, Delete</h3><p>Use the commands below to manage branches and working at different branches:</p><ul><li><code>git branch &lt;branch-name&gt;</code> make a branch that branches out from the current commit. You will not be automatically switched to that branch.</li><li><code>git checkout &lt;branch-name&gt;</code> OR <code>git switch -c &lt;branch-name&gt;</code> switch to the branch specified by the name. <ul><li><code>git switch master</code> could directly switch back to the <code>master</code> branch. </li></ul></li><li><code>git checkout -b &lt;branch-name&gt;</code> does the previous two steps in one go: create and switch to a branch. <ul><li>If this command is used on a remote branch (that is, <code>git checkout -b &lt;remote-alias&gt;/&lt;remote-branch-name&gt;</code>), it will create a local branch with the same name as the remote branch and set up their tracking relation and also switch to that local branch.<ul><li>In fact, the <code>-b</code> here can be omitted in this situation.</li><li>If want to customize the name of the created local branch, add the name as the second last argument: <code>git checkout -b &lt;local-branch-name&gt; &lt;remote-alias&gt;/&lt;remote-branch-name&gt;</code>.</li></ul></li></ul></li><li><code>git branch -d &lt;branch-name&gt;</code> deletes a branch by name. <ul><li>If a branch is not fully merged but you do want to delete it, replace <code>-d</code> with <code>-D</code> to force delete.</li><li><code>git push &lt;remote-alias&gt; --delete &lt;branch-name&gt;</code> deletes a remote branch.</li></ul></li><li><code>git branch</code> lists all branches.<ul><li><code>git branch -v</code> lists all branches with their last commit. </li><li><code>git branch --merged</code> list all branches that have been merged into the current branch, and <code>git branch --no-merged</code> does the reverse.</li><li><code>git branch -vv</code> lists all tracking branches.</li></ul></li><li><code>git merge &lt;branch-name&gt;</code> merge the branch specified by the name to the current branch. <ul><li>By default, git uses <code>fast-forward</code> strategy to merge (simply move the pointer of the old branch to the same place as the new branch). Deleting any of the branch results in all information about that branch being lost. To disable <code>fast-forward</code>, add <code>--no-ff</code> when merging, which forces Git to create a new commit after merging (even though there is no conflict). For more about merge strategy, see <a href="https://git-scm.com/docs/git-merge">Merge Strategies</a>.</li><li>When conflicts arise, refer to the strategy above to resolve them.</li></ul></li></ul><h2 id="Other-Useful-Topics"><a href="#Other-Useful-Topics" class="headerlink" title="Other Useful Topics"></a>Other Useful Topics</h2><p>You can stop reading now. You have all Git knowledge for daily use. The topics below are not used as frequently but might turn out useful under certain messy situations. Completing the topics below gives you an edge over other Git beginners.</p><h3 id="Submodules"><a href="#Submodules" class="headerlink" title="Submodules"></a>Submodules</h3><p>Often, scenarios arise that a project needs another project as its part - do not just copy-paste another projects over entirely! See the elegant way to manage that using <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">submodules</a>.</p><h3 id="Rebasing"><a href="#Rebasing" class="headerlink" title="Rebasing"></a>Rebasing</h3><p>A merge from C1 to C2 will consider their common ancestor C0 and the two descendants C1 and C2 and combine all of them. A rebase will have the same end effect, but with a cleaner branch history. Check the <a href="https://git-scm.com/book/en/v2/Git-Branching-Rebasing">Rebasing</a> chapter for a detailed explanation.</p><h3 id="Stashing-and-Cleaning"><a href="#Stashing-and-Cleaning" class="headerlink" title="Stashing and Cleaning"></a>Stashing and Cleaning</h3><p>You must have experienced the situation where when you are working on a feature and your boss request you to fix an urgent bug. Now what? Commit the unfinished feature half-way? Make yet another branch? They will work, but <a href="https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning">Stashing</a> provides an easier solution.</p><h3 id="gitkeep-and-gitignore"><a href="#gitkeep-and-gitignore" class="headerlink" title=".gitkeep and .gitignore"></a>.gitkeep and .gitignore</h3><p>Add a .gitkeep file to an empty directory so that Git will manage that (Git does not manage completely empty directory). The .gitignore file lists files that should be ignored by Git. Create a <code>.gitignore</code> file (usually it is created for you) at the project root directory to specify files that Git should ignore in that directory. For the syntax, see <a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository">Ignoring Files</a>.</p><h3 id="Tagging"><a href="#Tagging" class="headerlink" title="Tagging"></a>Tagging</h3><p>Sometimes we attach tags to our commits to the convenience of categorization, search and management. <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">This Chapter</a> has an excellent explanation on tagging.</p><h3 id="Other-Git-servers"><a href="#Other-Git-servers" class="headerlink" title="Other Git servers"></a>Other Git servers</h3><p>There are other hosting website other than GitHub such as <a href="https://gitee.com/">Gitee</a>. Get to know them and their specific features. Tired of using a third-party server? You can learn how to set up your own Git server <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server">here</a> or <a href="https://www.runoob.com/git/git-server.html">here</a> (in Chinese).</p><h3 id="Using-Git-GUI"><a href="#Using-Git-GUI" class="headerlink" title="Using Git GUI"></a>Using Git GUI</h3><p>After you get familiar with Git command-line operations you can consider switching to a GUI wrapper for Git, like <a href="https://confluence.atlassian.com/get-started-with-sourcetree">SourceTree</a>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://git-scm.com/docs">Official Documentation</a></li><li><a href="https://git-scm.com/book/en/v2">Pro Git by Scott Chacon</a></li><li><a href="https://training.github.com/downloads/github-git-cheat-sheet.pdf">GitHub Git Cheat Sheet</a></li><li><a href="https://www.git-tower.com/learn/git/ebook/">Git Tower</a></li><li><a href="https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud">Bitbucket Cloud</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git Tutorial from Xuefeng Liao (in Chinese)</a></li><li><a href="https://www.runoob.com/git/git-tutorial.html">Runoob Git Tutorial (in Chinese)</a></li><li><a href="https://blog.csdn.net/qq_36667170/article/details/79085301">Git Bash Notes on CSDN (in Chinese)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD </tag>
            
            <tag> Git </tag>
            
            <tag> Version Control </tag>
            
            <tag> Featured </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, Blog!</title>
      <link href="/2021/08/01/Hello-Blog/"/>
      <url>/2021/08/01/Hello-Blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Hi there, I’m Yu!</p><span id="more"></span><div class="admonition note"><p class="admonition-title">Update Ongoing</p><p>This list will be updated.</p></div><p>I finally set this website up - for this very first blog, I posted some common syntax useful for my future blogging. Note that many of the features below do not apply to generic Markdown document and are specific to this blog system only.</p><h2 id="Organization"><a href="#Organization" class="headerlink" title="Organization"></a>Organization</h2><h3 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> Heading H2</span></code></pre><ul><li>The above syntax gives an H2 level heading. For lower-level headings, simply add more #s at the front. </li><li>Remember to leave an empty line both before and after the heading.</li><li>Do not use H1-level heading in the main text as one post should have only one H1-level heading, and that should be the post title.</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> Element 1<span class="token list punctuation">*</span> Element 2    <span class="token list punctuation">*</span> Sub-element 1    <span class="token list punctuation">*</span> Sub-element 2<span class="token list punctuation">*</span> Element 3<span class="token list punctuation">1.</span> Element 1<span class="token list punctuation">2.</span> Element 2    <span class="token list punctuation">1.</span> Sub-element 1    <span class="token list punctuation">2.</span> Sub-element 2<span class="token list punctuation">3.</span> Element 3<span class="token list punctuation">*</span> [x] Task 1<span class="token list punctuation">*</span> [ ] Task 2<span class="token list punctuation">*</span> [ ] Task 3</code></pre><p>This renders as:</p><ul><li>Element 1</li><li>Element 2<ul><li>Sub-element 1</li><li>Sub-element 2</li></ul></li><li>Element 3</li></ul><ol><li>Element 1</li><li>Element 2<ol><li>Sub-element 1</li><li>Sub-element 2</li></ol></li><li>Element 3</li></ol><ul><li><input checked="" disabled="" type="checkbox"> Task 1</li><li><input disabled="" type="checkbox"> Task 2</li><li><input disabled="" type="checkbox"> Task 3</li></ul><ul><li>The actual numbers you use to mark the list have no effect on the HTML output Markdown produces. You can use <code>1. 5. 8.</code>,<code>1. 1. 1.</code> or even <code>3. 1. 8.</code>. They will be rendered in the same way as <code>1. 2. 3.</code>.</li><li>Leave a line before and after the list to avoid incorrect indentation.</li><li>We can use <code>+</code> or <code>-</code> instead of <code>*</code> in leading a list element as well, but do not mix them.</li><li>Escape: You can display a number character in an ordered list by using its HTML character code (<code>&amp;#124;</code>).</li></ul><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><pre class="language-md" data-language="md"><code class="language-md"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> Syntax       </span><span class="token punctuation">|</span><span class="token table-header important"> Description </span><span class="token punctuation">|</span><span class="token table-header important"> Test Text     </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">-----------</span> <span class="token punctuation">|</span> <span class="token punctuation">:---------:</span> <span class="token punctuation">|</span>   <span class="token punctuation">---:</span> <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> Header </span><span class="token punctuation">|</span><span class="token table-data"> Title  </span><span class="token punctuation">|</span><span class="token table-data">    Here's this   </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> Paragraph   </span><span class="token punctuation">|</span><span class="token table-data"> Text         </span><span class="token punctuation">|</span><span class="token table-data"> And more      </span><span class="token punctuation">|</span></span></span></code></pre><p>This renders as:</p><table><thead><tr><th>Syntax</th><th align="center">Description</th><th align="right">Test Text</th></tr></thead><tbody><tr><td>Header</td><td align="center">Title</td><td align="right">Here’s this</td></tr><tr><td>Paragraph</td><td align="center">Text</td><td align="right">And more</td></tr></tbody></table><ul><li>Leave a line before and after the table.</li><li>Number of dashes and spaces in between pipes are not important.</li><li>If alignment is not set, by default the column texts align to the left.</li><li>Links, in-line codes, Katex expressions can be nested in table content, but many styles cannot.</li><li>Escape<ul><li>You can display a pipe (|) character in a table by using its HTML character code (<code>&amp;#124;</code>).</li><li>You can add multiple lines in one cell using the <code>&lt;br&gt;</code> tag.</li></ul></li><li>By default, a MarkDown table will have the first row as the horizontal header; You cannot do a table that has vertical header or without header. For those you need to use <a href="https://www.w3schools.com/html/html_tables.asp">HTML tables</a>. A work-around for tables without header is to leave the header row blank:</li></ul><pre class="language-md" data-language="md"><code class="language-md"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">   </span><span class="token punctuation">|</span><span class="token table-header important">   </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span><span class="token punctuation">---</span><span class="token punctuation">|</span><span class="token punctuation">---</span><span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"><span class="token bold"><span class="token punctuation">__</span><span class="token content">Bold Key</span><span class="token punctuation">__</span></span></span><span class="token punctuation">|</span><span class="token table-data"> Value1 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> Normal Key </span><span class="token punctuation">|</span><span class="token table-data"> Value2 </span><span class="token punctuation">|</span></span></span></code></pre><p>Which renders as:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Bold Key</strong></td><td>Value1</td></tr><tr><td>Normal Key</td><td>Value2</td></tr></tbody></table><ul><li>Use a GUI like <a href="https://www.tablesgenerator.com/markdown_tables">this</a>, <a href="https://tableconvert.com/">this</a> or <a href="https://jakebathman.github.io/Markdown-Table-Generator/">this</a> for faster table generation.</li></ul><h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><pre class="language-none"><code class="language-none">&#123;% tabs Overall-name %&#125;&lt;!-- tab --&gt;**This is Tab 1.**&lt;!-- endtab --&gt;&lt;!-- tab --&gt;This is Tab 2.&lt;!-- endtab --&gt;&lt;!-- tab --&gt;*This is Tab 3.*&lt;!-- endtab --&gt;&#123;% endtabs %&#125;</code></pre><p>This renders as:</p><div class="tag-common tabs" id="overall-name"><ul class="nav-tabs"><li class="tab active"><a href="#overall-name-1">Overall-name 1</a></li><li class="tab"><a href="#overall-name-2">Overall-name 2</a></li><li class="tab"><a href="#overall-name-3">Overall-name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="overall-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="overall-name-2"><p>This is Tab 2.</p></div><div class="tab-pane" id="overall-name-3"><p><em>This is Tab 3.</em></p></div></div></div><ul><li>This feature is powered by <a href="https://github.com/YunYouJun/hexo-tag-common">hexo-tag-common</a>.</li><li>More tests are needed for compatibility of this feature with other syntax.</li></ul><h3 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h3><ul><li>Paragraph break: Add an empty line between paragraphs.</li><li>Line break: Add two trailing spaces after a sentence to make line break.</li><li>Read about their difference <a href="https://weblearn.ox.ac.uk/portal/help/TOCDisplay/content.hlp?docId=whyshouldiuseparagraphbreaksinmydocument">here</a>.</li></ul><h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><h3 id="Bold-Italicized-Deleted-Underscored"><a href="#Bold-Italicized-Deleted-Underscored" class="headerlink" title="Bold, Italicized, Deleted, Underscored"></a>Bold, Italicized, Deleted, Underscored</h3><pre class="language-none"><code class="language-none">*Italicized* _Italicized_ **Bold** __Bold__***BnI*** ___BnI___  __*BnI*__ _**BnI**_ **_BnI_**   &#x2F;&#x2F;Bold and Italicized~~Deleted text~~</code></pre><ul><li>Do not use the <code>_</code> notation without space (like <code>a very_expensive_car</code>). In such case, use <code>*</code>.</li><li>Markdown has no native supports for underscore, superscript or subscript. Use HTML tags to for them. Als0, when formatting multiple lines, use HTML tags:</li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>Italicized<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>BnI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">></span></span>Deleted text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">></span></span>      // strikethough<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>Deleted text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span>  // deleted line<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>Underlined Text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span>   // underscore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>Underlined text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span>  // inserted lineNormal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>Superscript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>Normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>Subscript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span></code></pre><p>These render as:</p><p><em>Italicized</em><br><strong>Bold</strong><br><em><strong>BnI</strong></em><br><s>Deleted text</s><br><del>Deleted text</del><br><u>Underlined Text</u><br><ins>Underlined text</ins><br>Normal<sup>Superscript</sup><br>Normal<sub>Subscript</sub></p><ul><li>For difference between the <code>&lt;ins&gt;</code> and <code>&lt;u&gt;</code> tag, see <a href="https://stackoverflow.com/questions/12148517/whats-the-difference-between-the-u-tag-and-the-ins-tag">here</a>.</li><li>For difference between the <code>&lt;del&gt;</code> and <code>&lt;s&gt;</code> tag, see <a href="https://stackoverflow.com/questions/16743581/what-is-the-difference-between-s-and-del-in-html-and-do-they-affect-website">here</a>.</li></ul><h3 id="Color-Size-Font"><a href="#Color-Size-Font" class="headerlink" title="Color, Size, Font"></a>Color, Size, Font</h3><p>Markdown does not have native syntax to support font type, size or color. We use HTML CSS (Do not just use the <code>&lt;font&gt;</code> tag. It is no longer supported in HTML5):</p><ul><li>All the CSS below are shown with in-line style, which is:</li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text-type</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">attribute</span><span class="token punctuation">:</span>value<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Text Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text-type</span><span class="token punctuation">></span></span></code></pre><p><code>text-type</code> can be <code>&lt;p&gt;</code>(main text),<code>&lt;h2&gt;</code>(H2 Heading) and etc. The example codes below uses <code>&lt;p&gt;</code>.</p><ul><li>For advanced use of CSS, I found <a href="https://www.w3schools.com/html/html_css.asp">w3school</a> as a good starting point.</li></ul><p>To format font type, size or color, use:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Text in color<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span>30px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Text in 30 px.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-family</span><span class="token punctuation">:</span>monospace</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Text in monospace font family.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>These render as:</p><p style="color: #FF0000;">Text in color</p><p style="font-size:30px">Text in 30 px.</p><p style="font-family:monospace">Text in monospace font family.</p><ul><li>Color:<ul><li>Pick a color using Hex code. To achieve the desired color, use an online color picker like <a href="https://www.w3schools.com/colors/colors_picker.asp">this</a>.</li><li>Some colors have aliases. Check <a href="https://www.w3schools.com/colors/colors_names.asp">here</a>.</li></ul></li><li>Font Family: Only <code>serif</code>, <code>sans_serif</code>, <code>monospace</code> are currently in this blog system. It is possible to import more.</li></ul><h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>Markdown does not support alignment natively; so, again, we use HTML CSS to achieve the result (Do not just use the <code>&lt;center&gt;</code> tag. It is no longer supported in HTML5):</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Left-aligned text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Centered text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Right-aligned text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>These render as:</p><p style="text-align: left;">Left-aligned text</p><p style="text-align: center;">Centered text</p><p style="text-align: right;">Right-aligned text</p><ul><li>All the above CSS can be used in conjunction with each other (One CSS could have multiple attribute specified).</li></ul><h3 id="Separation-line"><a href="#Separation-line" class="headerlink" title="Separation line"></a>Separation line</h3><pre class="language-md" data-language="md"><code class="language-md"><span class="token title important">***<span class="token punctuation">---</span></span>_________________</code></pre><p>They render as:</p><hr><hr><hr><p>All look the same.</p><h3 id="Empty-Line"><a href="#Empty-Line" class="headerlink" title="Empty Line"></a>Empty Line</h3><p>Compare: </p><pre class="language-md" data-language="md"><code class="language-md">Line 1<span class="token entity named-entity" title="&NewLine;">&amp;NewLine;</span>Line 2<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>Line 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>Line 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>Line 5                    //Nothing hereLine 6                    //One Space hereLine 7                    //Two Space here                Line 8              //No trailing space hereLine 9              //1 trailing space hereLine 10             //2 trailing space2 hereLine 11</code></pre><p>This will be rendered as:<br>Line 1<br>&NewLine;<br>Line 2<br>&nbsp;<br>Line 3<br /><br>Line 4</p><p></p>Line 5<p>Line 6</p><p>Line 7</p><p>Line 8<br>Line 9<br>Line 10<br>Line 11</p><ul><li>Note that although at the first glance some of them look the same, they are different.<ul><li>Some of the “empty lines” are selectable and some are not. I am not fully sure about their difference.</li><li>They have different width.</li><li><code>&amp;nbsp;</code> is actually an space character (Called “non-breaking space”. For the difference between this and the normal space, refer <a href="https://stackoverflow.com/questions/1357078/whats-the-difference-between-nbsp-and">here</a>), adding a space character to a new line will make the line look like empty.</li></ul></li></ul><h3 id="Line-Continuity"><a href="#Line-Continuity" class="headerlink" title="Line Continuity"></a>Line Continuity</h3><p>The <code>raw</code> tag is meant to avoid Markdown interpretation, but it can be used to mark line continuity.</p><pre class="language-md" data-language="md"><code class="language-md">The first line in editor &#123;% raw %&#125;&#123;% endraw %&#125; The second line in editor</code></pre><p>These two lines will be rendered as one line:<br>The first line in editor  The second line in editor</p><h2 id="Stylized-Text"><a href="#Stylized-Text" class="headerlink" title="Stylized Text"></a>Stylized Text</h2><h3 id="Snippet"><a href="#Snippet" class="headerlink" title="Snippet"></a>Snippet</h3><pre class="language-md" data-language="md"><code class="language-md">!!! <span class="token url">[<span class="token content">type</span>] [<span class="token variable">title</span>]</span>    Snippet Content Line 1     Line 2Normal text.</code></pre><ul><li><code>type</code> field could be:<ul><li>(blue) <code>note</code></li><li>(green) <code>info</code>, <code>todo</code></li><li>(yellow) <code>warning</code>, <code>attention</code>, <code>caution</code></li><li>(red) <code>error</code>, <code>failure</code>, <code>missing</code>, <code>fail</code></li></ul></li><li><code>title</code> field is optional - if left blank, the <code>type</code> field would be used as Title; to completely remove Title, set <code>title</code> to <code>&quot;&quot;</code>.</li><li>Put 4 spaces (1 tab) in front of each line of snippet content. Put one empty line after the snippet to signal an end. Normal texts come after that.</li><li>Other Markdown syntax can be nested inside the snippet. For example:</li></ul><div class="admonition warning"><p class="admonition-title">Warning</p><p><a href="%22https://reimirno.github.io">Home page</a> of this blog.</p><blockquote><p>a nested quote.</p></blockquote></div><div class="admonition error"><p class="admonition-title">error</p><p>Error msg!!! Omit the title.</p></div><div class="admonition note"><p class="admonition-title">This is a title</p><p>Note content</p></div><div class="admonition info"><p>Info without title</p></div><ul><li>This feature is modified from <a href="https://github.com/lxl80/hexo-admonition">hexo-admonition</a>.</li></ul><h3 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h3><pre class="language-md" data-language="md"><code class="language-md"><span class="token blockquote punctuation">></span> This is a quote.</code></pre><p>Or</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% blockquote %&#125;This is a quote.&#123;% endblockquote %&#125;&#123;% blockquote [author[, source]] <span class="token url">[<span class="token content">link</span>] [<span class="token variable">source_link_title</span>]</span> %&#125;This is a quote.&#123;% endblockquote %&#125;</code></pre><p>They would be rendered as something like these:</p><blockquote><p>This is a quote.</p></blockquote><pre class="language-md" data-language="md"><code class="language-md">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125;</code></pre><ul><li>The latter syntax are not Markdown native syntax. They rely on Hexo-Tag-Plugins. Instead of <code>blockquote</code> you can also use its alias <code>quote</code>. Using this syntax allows you to define more fields for the quote.</li><li>If the quote contains more than one paragraph, use:</li></ul><pre class="language-md" data-language="md"><code class="language-md"><span class="token blockquote punctuation">></span> Quote Paragraph 1<span class="token blockquote punctuation">></span><span class="token blockquote punctuation">></span> Quote Paragraph 2</code></pre><p>which renders as:</p><blockquote><p>Quote Paragraph 1</p><p>Quote Paragraph 2</p></blockquote><ul><li>The quote block can also be nested or/and used with other markdown syntax:</li></ul><blockquote><pre class="language-md" data-language="md"><code class="language-md">Some codes here</code></pre><ul><li>List Element 1.<ul><li><a href="https://reimirno.github.io/home">hyperlink</a></li></ul></li><li>List Element 2.<blockquote><p>Nested Quote</p></blockquote></li></ul><p> <em>Blah</em> blah <strong>blah</strong>.</p></blockquote><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>This blog’s code highlighting feature is powered by <a href="https://github.com/PrismJS/prism">Prism</a>.</p><pre class="language-md" data-language="md"><code class="language-md"><span class="token code"><span class="token punctuation">```</span><span class="token code-language"> [language name] [title] [url] [link text] [additional options]</span><span class="token code-block language-language">code snippet</span><span class="token punctuation">```</span></span></code></pre><p>OR</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% codeblock <span class="token url">[<span class="token content">title</span>] [<span class="token variable">lang:language</span>]</span> <span class="token url">[<span class="token content">url</span>] [<span class="token variable">link text</span>]</span> [additional options] %&#125;code snippet&#123;% endcodeblock %&#125;</code></pre><ul><li>They all give a code block (which is also how the code block style is implemented everywhere in this blog post). </li><li>Note the markdown only supports the language name field - hexo has expanded on that to allow more fields.</li><li>Moreover, the latter syntax are not Markdown native syntax. They rely on Hexo-Tag-Plugins. Instead of <code>codeblock</code> you can also use its alias <code>code</code>.</li><li>For language name:<ul><li>Use <code>csharp</code> OR <code>cs</code> OR <code>dotnet</code> for C#</li><li>Use <code>cpp</code> for C++</li><li>Use <code>c</code> for C</li><li>Use <code>md</code> or <code>markdown</code> for Markdown</li><li>Use <code>py</code> or <code>python</code> for Python</li><li>Use <code>java</code> for Java</li><li>Use <code>json</code> for JSON<br>…</li><li>For the full list of support language, see <a href="https://prismjs.com/#supported-languages">here</a>.</li></ul></li><li>For additional options: I have checked the documentation - it seems none can work in this blog. Ignore this option.</li></ul><p>If you want in-line code, use:</p><pre class="language-none"><code class="language-none">...&#96;Some in-line Code&#96;...</code></pre><p>This renders something like <code>this</code>.</p><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><pre class="language-md" data-language="md"><code class="language-md">&#123;% hint 'body_text' 'hint_text' %&#125;</code></pre><p>For multiple-line hint, separate lines to be multiple fields:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% hint 'body_text' 'hint_text_line_1' 'hint_text_line_2' ... %&#125;</code></pre><ul><li>This feature is powered by <a href="https://github.com/etigerstudio/hexo-tag-hint">hexo-tag-hint</a>.</li></ul><div class="admonition warning"><p class="admonition-title">Known Bug</p><p>The hint bubble will not be rendered if there are texts in front of the hint tag at the same line. I have raised an issue to the package manager. For now, a work-around is to use the <code>raw</code> tag to surround all texts at the front. See:</p></div><pre class="language-md" data-language="md"><code class="language-md">&#123;% raw %&#125;This is a &#123;% endraw %&#125;&#123;% hint 'hint title' 'hint text' %&#125;!</code></pre><p>This renders as:</p>This is a <span class="hint--info hint--rounded hint--top" data-hint="hint text" ontouchstart>hint title</span>!<h3 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h3><p>Github Markdown does not support the footnote. We can fake it by:</p><pre class="language-md" data-language="md"><code class="language-md">This is some argument<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span><span class="token url">[<span class="token content">1</span>](<span class="token url">#myfootnote1</span>)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myfootnote1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span> Footnote content goes here...</code></pre><p>This renders as:</p><p>This is some argument<sup><a href="#myfootnote1">1</a></sup>.</p><p><sup><a name="myfootnote1">1</a></sup> Footnote content goes here…</p><ul><li>This is essentially HTML formatting, modified from <a href="https://stackoverflow.com/questions/25579868/how-to-add-footnotes-to-github-flavoured-markdown/29384216#29384216">suryasankar’s implementation</a>.</li><li>The<code>&lt;sup&gt;</code>makes it superscript.</li><li>The <code>#myfootnote1</code> makes it clickable.</li></ul><h2 id="Multimedia"><a href="#Multimedia" class="headerlink" title="Multimedia"></a>Multimedia</h2><h3 id="Hyperlink"><a href="#Hyperlink" class="headerlink" title="Hyperlink"></a>Hyperlink</h3><p>This is a <a href="https://reimirno.github.io/" title="Reimirno&#39;s Blog Home Page">hyperlink</a> that leads to this blog’s Home Page. This uses:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">[Link Title Text](link itself "Link Description Text")</code></pre><p>OR</p><pre class="language-md" data-language="md"><code class="language-md"><span class="token url">[<span class="token content">Link Title Text</span>][<span class="token variable">1</span>]</span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">&lt;</span>link</span> itself> "Link Description Text"</code></pre><p>OR, using hexo-tag-plugins:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% Link Title Text <span class="token url">[<span class="token content">link itself</span>] [<span class="token variable">Link Description Text</span>]</span> %&#125;</code></pre><ul><li>Link does not have to be urls. You can link to a local image in the source folder using the same syntax.</li><li>You can omit the description text and the surrounding quotation marks.</li><li>You can also mix stylized string (bold, italicized, code, etc.) into link title text.</li><li>To display links literally, simply put:</li></ul><pre class="language-md" data-language="md"><code class="language-md"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">url</span><span class="token punctuation">></span></span></code></pre><p>For example, my blog home page link, if implemented literally, would be rendered as:<br><a href="https://reimirno.github.io/">https://reimirno.github.io</a></p><ul><li>But even if you do not use <code>&lt;...&gt;</code>, if an address is entered it would be automatically converted into a hyperlink. To avoid this, put the link address as in-line codes.</li></ul><p>If you are including links to your other post, simply use:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% post_link filename <span class="token url">[<span class="token content">title</span>] [<span class="token variable">escape</span>]</span> %&#125;</code></pre><ul><li>Simply put the post filename you want to link to. This syntax would find the correct .md file, ignoring its permalink, directory etc.</li><li>Special characters set in the title texts would be escaped by default. Set the <code>escape</code> field to <code>false</code> to avoid this.</li></ul><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>The native Markdown syntax is:</p><pre class="language-md" data-language="md"><code class="language-md">![image tooltip](image link)</code></pre><p>Or, using HTML tag:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>image link<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>image description<span class="token punctuation">"</span></span> <span class="token attr-name">title</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>image tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">width</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>Or, using hexo-tag-plugin:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% img [class names] /path/to/image <span class="token url">[<span class="token content">width</span>] [<span class="token variable">height</span>]</span> '"title text" "alt text"' %&#125;</code></pre><p>Or, since the asset folder option is turned on in this blog system, we can also use:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% asset_img [class names] slug <span class="token url">[<span class="token content">width</span>] [<span class="token variable">height</span>]</span> [title text [alt text]] %&#125;</code></pre><ul><li>In posts, use relative path for links (as the asset folder option is turned on). Relative paths is with respect to two parent folders:<ul><li>The Global Asset Folder: The themes/yun/source/images folder.</li><li>The Post Asset Folder: the folder which has the same name as the blog post, placed in the same directory as the .md file.</li></ul></li><li>.gif images are also supported.</li><li>Leaving the <code>width</code> and <code>height</code> field empty means using default value. Their values are in pixel or percentage.</li></ul><div class="admonition warning"><p class="admonition-title">Known Bug</p><p>There is a bug in Hexo 5.4.0. When <code>post_asset_folder</code> is set to <code>true</code>, due to an internal bug in <code>hexo-asset-image</code> the images cannot be rendered. See <a href="https://blog.csdn.net/qq904305159/article/details/104162802">here</a> for the solution.</p></div><h3 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h3><p>There are numerous ways of importing audios… The method I go with is to use <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a>.</p><p>For the APlayer to take effect in a post, include <code>aplayer: true</code> in the front matter of that post.</p><p>For general song:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% aplayer "title" "author" "url" [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</code></pre><p>For generic playlist:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% aplayerlist %&#125;&#123;    "narrow": false,                           // Optional: mini-styled playlist    "autoplay": true,                          // Optional; not supported on mobile devices    "mode": "circulation",                     // 'random', 'single', 'circulation', 'order'    "showlrc": 1,                              // The style to show lyrics：1,2,3    "mutex": true,                             // When this is true, this player would pause when another aplayer starts at the same page    "theme": "#b7daff",                       // Color theme    "preload": "auto",                         // 'none' 'metadata' 'auto'    "listmaxheight": "513px",                      "music": [        &#123;            "title": "CoCo",            "author": "Jeff Williams",            "url": "caffeine.mp3",            "pic": "caffeine.jpeg",            "lrc": "caffeine.txt"        &#125;,        &#123;            "title": "アイロニ",            "author": "鹿乃",            "url": "irony.mp3",            "pic": "irony.jpg"        &#125;    ]&#125;&#123;% endaplayerlist %&#125;</code></pre><p>For China’s music platform (NetEase, Tencent, Kugou, Baidu etc.), use <code>meting</code> syntax (this is an extension from Aplayer):</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% meting "id" "server" "type" [various configurations] %&#125;</code></pre><ul><li>The compulsory parameters:<ul><li>id: song/playlist id, search keyword</li><li>server: <code>netease</code>,<code>tencent</code>,<code>kugou</code>,<code>baidu</code> etc.</li><li>type: <code>song</code>, <code>playlist</code>, <code>album</code>, <code>artist</code>, <code>search</code></li></ul></li><li>The optional parameters (show only the useful ones, for the full list, refer to the documentation):<ul><li>put <code>&quot;fixed&quot;</code> to dock the player, <code>&quot;mini&quot;</code> to minimize the player</li><li>put <code>&quot;listfolded:true&quot;</code> to fold the playlist (by default it is <code>false</code>)</li><li><code>&quot;loop = ...&quot;</code>: <code>all</code>(by default),<code>one</code>,<code>none</code></li><li><code>&quot;order = ...&quot;</code>: <code>list</code>(by default),<code>random</code></li><li><code>autoplay</code>, <code>mutex</code>, <code>listmaxheight</code>, <code>preload</code>, <code>theme</code>: refer above</li></ul></li></ul><p>To unify layout style, I put a fine-tuned code snippet for Netease music here (for copy-pasting later):<br>A song:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% meting "id" "netease" "song" "mutex:true" "theme:#C20C0C" %&#125;</code></pre><p>A(n) playlist/album/artist/search (change <code>type</code> accordingly):</p><pre class="language-md" data-language="md"><code class="language-md">//10 songs shown: (about 33px per song, tested on my screen)&#123;% meting "id" "netease" "playlist" "mutex:true" "listmaxheight:330px" "theme:#C20C0C"%&#125; //5 songs shown:&#123;% meting "id" "netease" "playlist" "mutex:true" "listmaxheight:165px" "theme:#C20C0C"%&#125;//folded:&#123;% meting "id" "netease" "playlist" "mutex:true" "listfolded:true" "theme:#C20C0C"%&#125;//docked:&#123;% meting "id" "netease" "playlist" "mutex:true" "fixed" "theme:#C20C0C"%&#125;</code></pre><p>I am feeling like exemplifying this by putting this piece here:</p>    <div id="aplayer-UvidufCp" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="651675" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>Again, there are really numerous ways of inserting videos:</p><ul><li>Using iframe - and iframe has both an HTML and a Hexo version.</li><li>Using video tag.</li><li>Using third-party plugins designed for videos uploaded onto a specific site (<code>&#123;% youtube video_id [type] [cookie] %&#125;</code> for YouTube, for example; by the way, this syntax has a very strange layout).</li><li>And more…</li></ul><p>But they all have some layout issues, even on desktop computers. As I am not a Front-End Engineer (thus far), the best (or so I think) solution I found is to use a fine-tunes iframe importing method for videos from all platform in general (so, the layout is unified, at least):</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 30% 45%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span> <span class="token attr-name">allow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fullscreen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> </code></pre><ul><li>This snippet of code is modified from <a href="https://www.bilibili.com/read/cv6775208">here</a>.</li><li>You cannot copy the url link in the address bar for the <code>src</code> field, in general. You need to find the share button on the video site and get the embed iframe code.<ul><li>For YouTube, there are some customizable options when exporting the embed code (like privacy options).</li><li>For Bilibili, add “&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0” to the end of the src field obtained.</li></ul></li></ul><p>Here is a Bilibili video:</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=760961320&bvid=BV1R64y1k7d3&cid=349499855&page=1&as_wide=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no" loading="lazy" allow="fullscreen"></iframe></div> <p>If the thing you want to include is not a video player but simply a “video card”, there is a <a href="https://github.com/MaxChang3/hexo-bilibili-card">plugin</a> for bilibili video card to implement (I do not see the need currently).</p><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>The best practice is to convert everything to .pdf format first and then distribute. To set up a Pdf viewport in the post, use:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% pdf pdf-link %&#125;</code></pre><p>For example:</p><div class="row">    <embed src="https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf" width="100%" height="550" type="application/pdf"></div><ul><li>This feature is powered by <a href="https://github.com/superalsrk/hexo-pdf/">hexo-pdf</a>. As usual, the <code>pdf-link</code> can be local or online. You can also use a Google Drive Pdf Preview link or Slideshare Embed Link - check the documentation page.</li></ul><h2 id="More-Multimedia"><a href="#More-Multimedia" class="headerlink" title="More Multimedia"></a>More Multimedia</h2><h3 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h3><del><pre class="language-none"><code class="language-none">:happy::sparkles:</code></pre>This renders as::happy::sparkles:* This feature is powered by [hexo-filter-github-emojis](https://github.com/crimx/hexo-filter-github-emojis).* Simply surrounds the emoji name with two colons.* For a reference list of emoji, refer to [emojipedia](https://emojipedia.org/) or [Emoji Cheatsheet](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md).</del><div class="admonition error"><p class="admonition-title">Feature Not Working</p><p>The above feature does not work. I'm working on it.</p></div><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>I have imported the CSS file for Remix Icons into this site. To insert an icon, simply use this syntax:</p><pre class="language-md" data-language="md"><code class="language-md"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- fixed width --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-xxs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 0.5em --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-xs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 0.75em --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 0.875em --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-1x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 1em --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 1.3333em --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 1.5em --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-2x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 2em --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-3x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 3em --></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-admin-line ri-10x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 10em --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>The above renders as:</p><div style="font-size: 24px;">  <i class="ri-admin-line ri-fw"></i> <!-- fixed width -->  <i class="ri-admin-line ri-xxs"></i> <!-- 0.5em -->  <i class="ri-admin-line ri-xs"></i> <!-- 0.75em -->  <i class="ri-admin-line ri-sm"></i> <!-- 0.875em -->  <i class="ri-admin-line ri-1x"></i> <!-- 1em -->  <i class="ri-admin-line ri-lg"></i> <!-- 1.3333em -->  <i class="ri-admin-line ri-xl"></i> <!-- 1.5em -->  <i class="ri-admin-line ri-2x"></i> <!-- 2em -->  <i class="ri-admin-line ri-3x"></i> <!-- 3em -->  ...  <i class="ri-admin-line ri-10x"></i> <!-- 10em --></div><ul><li>For the complete list of icon names, visit Remix Icon’s <a href="https://remixicon.com/">website</a>.</li><li>Size will be automatically adjusted to match to text size. To adjust its relative size with respect to text, see the above code.</li><li>Color can be changed by adding <code>style=&quot;color:...;&quot;</code> after the <code>class</code> field - these icons are really just another font. For example:</li></ul><pre class="language-md" data-language="md"><code class="language-md"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ri-article-line<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>#7ccbab<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><p>This renders:<br><i class="ri-article-line" style="color:#7ccbab;"></i></p><h3 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h3><p>This site uses <a href="https://katex.org/">KaTex</a> for displaying mathematical expressions. If a post needs it, the front matter should have a line <code>katex: true</code>, because I did not enable KaTex globally to avoid loading it for no reason.<br>A mathematical expression can be implemented by:</p><pre class="language-md" data-language="md"><code class="language-md">$$ \frac&#123;\partial&#125;&#123;\partial t&#125; $$\\[ E = mc^2 \\]</code></pre><p>This renders as:<br>$$ \frac{\partial}{\partial t} $$<br>\[ E = mc^2 \]<br>In-line expressions use this syntax:</p><pre class="language-md" data-language="md"><code class="language-md">$\frac&#123;\partial&#125;&#123;\partial t&#125;$\\( E = mc^2 \\)  </code></pre><p>These two expressions are rendered as $\frac{\partial}{\partial t}$ and \( E = mc^2 \) respectively.</p><ul><li>Note that we use two \s since we need to escape the symbol <code>\</code> in Markdown. To avoid this, use <code>&lt;div&gt;&lt;/div&gt;</code> HTML tag to surround the expression so that it will not be read as Markdown. Like this:</li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\( E = mc^2 \)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  </code></pre><ul><li>KaTex syntax cannot be placed in quote or code block.</li><li>For the full list of supported expressions in KaTex, check the <a href="https://katex.org/docs/supported.html">official documentation</a>.</li><li>Use an online LaTex editor like <a href="https://www.tutorialspoint.com/online_latex_editor.php">this</a> to speed up the process.</li></ul><h3 id="Chart"><a href="#Chart" class="headerlink" title="Chart"></a>Chart</h3><p>There are various solutions for charts: <a href="https://github.com/Shen-Yu/hexo-tag-chart">hexo-tag-chart</a> which uses ChartJS support, <a href="https://github.com/juampi92/hexo-tag-googlecharts">hexo-tag-goolgecharts</a> which uses Google Chart support, <a href="https://github.com/kchen0x/hexo-tag-echarts3">hexo-tag-echarts3</a> which uses ECharts support, and <a href="hexo-tag-easy-charts">hexo-tag-easy-charts</a> etc. I will implement one of them when I need to include charts in posts.</p><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><p>Use <a href="https://www.google.com/maps">Google Map</a> (For addresses outside China) or <a href="https://ditu.amap.com/">Gaode Map</a> (in-China address) to export iframe. Use the same iframe syntax as the video viewer:</p><pre class="language-md" data-language="md"><code class="language-md"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 30% 45%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span> <span class="token attr-name">allow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fullscreen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> </code></pre><p>An example, using Google Map, is:</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3988.7611329935835!2d103.93306925033089!3d1.3190055990332583!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x31da22b7b378525b%3A0xb349c60aceb7e7e5!2sTemasek%20Junior%20College!5e0!3m2!1sen!2s!4v1628045647978!5m2!1sen!2s"frameborder="no" scrolling="no" loading="lazy" allow="fullscreen"></iframe></div> <h3 id="Wikipedia"><a href="#Wikipedia" class="headerlink" title="Wikipedia"></a>Wikipedia</h3><del><pre class="language-md" data-language="md"><code class="language-md">&#123;% wikipedia title:... <span class="token url">[<span class="token content">wikiButton:true</span>] [<span class="token variable">lang:en</span>]</span> [sentence] %&#125;</code></pre><ul><li>This displays a excerpt card for a wikipedia page, powered by <a href="https://github.com/tuanna-hsp/hexo-tag-wikipedia">hexo-tag-wikipedia</a>.</li><li>The <code>title</code> field and the <code>lang</code> field must be formatted with the wiki url. For example, the <code>title</code> would be <code>Touhou_Project</code> and <code>lang</code> be <code>en</code> for the wikipage <code>https://en.wikipedia.org/wiki/Touhou_Project</code>. <code>lang</code> is optional - if omitted, it would be <code>en</code> by default.</li><li>The <code>sentence</code> field limits the number of sentences to show if specified. It only accepts value ranging from 1 to 10. It is optional - if omitted, the full excerpt would be shown.</li><li>The <code>wikiButton</code> controls whether to show a wikipedia link at the button.</li></ul></del><div class="admonition error"><p class="admonition-title">Feature Not Working</p><p>The above feature does not work. I have raised an issue to the package manager.</p></div><h3 id="Steam-Game"><a href="#Steam-Game" class="headerlink" title="Steam Game"></a>Steam Game</h3><p>This is important to my blog as I will also publish my steam game projects here.</p><p>For a single game:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% steamgame appid description %&#125;</code></pre><p>For a list of games:</p><pre class="language-md" data-language="md"><code class="language-md">&#123;% steamgames %&#125;appidappidappidappid&#123;% endsteamgames %&#125;</code></pre><ul><li>The <code>description</code> field is optional; if filled, it will substitue game’s original Steam Page description.</li><li>This feature is powered by <a href="https://github.com/HCLonely/hexo-tag-steamgame">hexo-tag-steamgame</a>.</li></ul><p>The game will be rendered like this (this is my first large game projects):</p><iframe src="https://store.steampowered.com/widget/1260810/" frameborder="0" width="100%" height="190"></iframe><h3 id="Downloadable-Content"><a href="#Downloadable-Content" class="headerlink" title="Downloadable Content"></a>Downloadable Content</h3><p>For now, use a hyperlink to a Dropbox / BaiduYun resource file. </p><p>I will try to make a wrapper style for these kind of special links, later.</p>]]></content>
      
      
      <categories>
          
          <category> Technical </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> HTML </tag>
            
            <tag> Blog System </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
